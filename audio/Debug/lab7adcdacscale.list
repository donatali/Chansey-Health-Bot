
lab7adcdacscale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007620  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080077e0  080077e0  000087e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a28  08007a28  00009354  2**0
                  CONTENTS
  4 .ARM          00000008  08007a28  08007a28  00008a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a30  08007a30  00009354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a30  08007a30  00008a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08007a38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000354  08007d8c  00009354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08007d8c  000095a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c6b  00000000  00000000  00009384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002718  00000000  00000000  0001efef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00021708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e91  00000000  00000000  000229a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c281  00000000  00000000  00023839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015280  00000000  00000000  0004faba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a88e  00000000  00000000  00064d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  0017f60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001849f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080077c8 	.word	0x080077c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	080077c8 	.word	0x080077c8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b988 	b.w	8000e64 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	468e      	mov	lr, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	4688      	mov	r8, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d962      	bls.n	8000c48 <__udivmoddi4+0xdc>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	40b7      	lsls	r7, r6
 8000b96:	ea43 0808 	orr.w	r8, r3, r8
 8000b9a:	40b4      	lsls	r4, r6
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc0:	f080 80ea 	bcs.w	8000d98 <__udivmoddi4+0x22c>
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f240 80e7 	bls.w	8000d98 <__udivmoddi4+0x22c>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2a3      	uxth	r3, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be2:	459c      	cmp	ip, r3
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bec:	f080 80d6 	bcs.w	8000d9c <__udivmoddi4+0x230>
 8000bf0:	459c      	cmp	ip, r3
 8000bf2:	f240 80d3 	bls.w	8000d9c <__udivmoddi4+0x230>
 8000bf6:	443b      	add	r3, r7
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba3 030c 	sub.w	r3, r3, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f3      	lsrs	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d146      	bne.n	8000cb8 <__udivmoddi4+0x14c>
 8000c2a:	4573      	cmp	r3, lr
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xc8>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 8105 	bhi.w	8000e3e <__udivmoddi4+0x2d2>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4690      	mov	r8, r2
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e5      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	e9c5 4800 	strd	r4, r8, [r5]
 8000c46:	e7e2      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f000 8090 	beq.w	8000d6e <__udivmoddi4+0x202>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f040 80a4 	bne.w	8000da0 <__udivmoddi4+0x234>
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	b280      	uxth	r0, r0
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c72:	fb04 f20c 	mul.w	r2, r4, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x11e>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x11c>
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f200 80e0 	bhi.w	8000e48 <__udivmoddi4+0x2dc>
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c98:	fb02 f404 	mul.w	r4, r2, r4
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x144>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x142>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2d6>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	1b1b      	subs	r3, r3, r4
 8000cb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cb6:	e7a5      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0620 	rsb	r6, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc2:	431f      	orrs	r7, r3
 8000cc4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cc8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ccc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	fa1f fc87 	uxth.w	ip, r7
 8000cde:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ce8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1a0>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cfe:	f080 809c 	bcs.w	8000e3a <__udivmoddi4+0x2ce>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f240 8099 	bls.w	8000e3a <__udivmoddi4+0x2ce>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	443c      	add	r4, r7
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	fa1f fe83 	uxth.w	lr, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1ce>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d2e:	f080 8082 	bcs.w	8000e36 <__udivmoddi4+0x2ca>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d97f      	bls.n	8000e36 <__udivmoddi4+0x2ca>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3e:	eba4 040c 	sub.w	r4, r4, ip
 8000d42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d46:	4564      	cmp	r4, ip
 8000d48:	4673      	mov	r3, lr
 8000d4a:	46e1      	mov	r9, ip
 8000d4c:	d362      	bcc.n	8000e14 <__udivmoddi4+0x2a8>
 8000d4e:	d05f      	beq.n	8000e10 <__udivmoddi4+0x2a4>
 8000d50:	b15d      	cbz	r5, 8000d6a <__udivmoddi4+0x1fe>
 8000d52:	ebb8 0203 	subs.w	r2, r8, r3
 8000d56:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431e      	orrs	r6, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e74f      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000d6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d72:	0c01      	lsrs	r1, r0, #16
 8000d74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4638      	mov	r0, r7
 8000d82:	463c      	mov	r4, r7
 8000d84:	46b8      	mov	r8, r7
 8000d86:	46be      	mov	lr, r7
 8000d88:	2620      	movs	r6, #32
 8000d8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d8e:	eba2 0208 	sub.w	r2, r2, r8
 8000d92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d96:	e766      	b.n	8000c66 <__udivmoddi4+0xfa>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e718      	b.n	8000bce <__udivmoddi4+0x62>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	e72c      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000da0:	f1c6 0220 	rsb	r2, r6, #32
 8000da4:	fa2e f302 	lsr.w	r3, lr, r2
 8000da8:	40b7      	lsls	r7, r6
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	fa20 f202 	lsr.w	r2, r0, r2
 8000db0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb08 f904 	mul.w	r9, r8, r4
 8000dca:	40b0      	lsls	r0, r6
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd2:	b280      	uxth	r0, r0
 8000dd4:	d93e      	bls.n	8000e54 <__udivmoddi4+0x2e8>
 8000dd6:	1879      	adds	r1, r7, r1
 8000dd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ddc:	d201      	bcs.n	8000de2 <__udivmoddi4+0x276>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d81f      	bhi.n	8000e22 <__udivmoddi4+0x2b6>
 8000de2:	eba1 0109 	sub.w	r1, r1, r9
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	b292      	uxth	r2, r2
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d229      	bcs.n	8000e50 <__udivmoddi4+0x2e4>
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e02:	d2c4      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e04:	4542      	cmp	r2, r8
 8000e06:	d2c2      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e08:	f1a9 0102 	sub.w	r1, r9, #2
 8000e0c:	443a      	add	r2, r7
 8000e0e:	e7be      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e10:	45f0      	cmp	r8, lr
 8000e12:	d29d      	bcs.n	8000d50 <__udivmoddi4+0x1e4>
 8000e14:	ebbe 0302 	subs.w	r3, lr, r2
 8000e18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	e796      	b.n	8000d50 <__udivmoddi4+0x1e4>
 8000e22:	eba7 0909 	sub.w	r9, r7, r9
 8000e26:	4449      	add	r1, r9
 8000e28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e30:	fb09 f804 	mul.w	r8, r9, r4
 8000e34:	e7db      	b.n	8000dee <__udivmoddi4+0x282>
 8000e36:	4673      	mov	r3, lr
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1ce>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	e766      	b.n	8000d0c <__udivmoddi4+0x1a0>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xd2>
 8000e42:	443b      	add	r3, r7
 8000e44:	3a02      	subs	r2, #2
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x144>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	443b      	add	r3, r7
 8000e4e:	e71c      	b.n	8000c8a <__udivmoddi4+0x11e>
 8000e50:	4649      	mov	r1, r9
 8000e52:	e79c      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e54:	eba1 0109 	sub.w	r1, r1, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fb09 f804 	mul.w	r8, r9, r4
 8000e62:	e7c4      	b.n	8000dee <__udivmoddi4+0x282>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <fill_LUT>:
	float freq;
	uint16_t length;
} Note;

void fill_LUT(void)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
	//creates a sine wave look up table centered at VREF/2
	double HALF_AMP = (AMP_PCENT/ 100.0) * 2047.0;//calculates a half amplitude given the desired volume
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4939      	ldr	r1, [pc, #228]	@ (8000f58 <fill_LUT+0xf0>)
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <fill_LUT+0xf4>)
 8000e7a:	f7ff fca7 	bl	80007cc <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	a330      	add	r3, pc, #192	@ (adr r3, 8000f48 <fill_LUT+0xe0>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fb74 	bl	8000578 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t i = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	81fb      	strh	r3, [r7, #14]
	for(; i < LUT_SIZE; ++i)
 8000e9c:	e04b      	b.n	8000f36 <fill_LUT+0xce>
	{
		SIN_LUT[i] = (uint16_t) ( (sin( ( (double) i) * 360.0 / ((double) LUT_SIZE)  * 3.14159265/180.0) * HALF_AMP) + 2048.0);
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff faef 	bl	8000484 <__aeabi_ui2d>
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <fill_LUT+0xf8>)
 8000eac:	f7ff fb64 	bl	8000578 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <fill_LUT+0xf4>)
 8000ebe:	f7ff fc85 	bl	80007cc <__aeabi_ddiv>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	a321      	add	r3, pc, #132	@ (adr r3, 8000f50 <fill_LUT+0xe8>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb52 	bl	8000578 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <fill_LUT+0xfc>)
 8000ee2:	f7ff fc73 	bl	80007cc <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ec43 2b17 	vmov	d7, r2, r3
 8000eee:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef2:	eef0 0a67 	vmov.f32	s1, s15
 8000ef6:	f005 fc43 	bl	8006780 <sin>
 8000efa:	ec51 0b10 	vmov	r0, r1, d0
 8000efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f02:	f7ff fb39 	bl	8000578 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <fill_LUT+0x100>)
 8000f14:	f7ff f97a 	bl	800020c <__adddf3>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	89fc      	ldrh	r4, [r7, #14]
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fdeb 	bl	8000afc <__aeabi_d2uiz>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <fill_LUT+0x104>)
 8000f2c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(; i < LUT_SIZE; ++i)
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	3301      	adds	r3, #1
 8000f34:	81fb      	strh	r3, [r7, #14]
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	2b63      	cmp	r3, #99	@ 0x63
 8000f3a:	d9b0      	bls.n	8000e9e <fill_LUT+0x36>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	409ffc00 	.word	0x409ffc00
 8000f50:	53c8d4f1 	.word	0x53c8d4f1
 8000f54:	400921fb 	.word	0x400921fb
 8000f58:	40518000 	.word	0x40518000
 8000f5c:	40590000 	.word	0x40590000
 8000f60:	40768000 	.word	0x40768000
 8000f64:	40668000 	.word	0x40668000
 8000f68:	40a00000 	.word	0x40a00000
 8000f6c:	20000370 	.word	0x20000370

08000f70 <setComp>:

//sets compare value (period) for tim2
void setComp(uint32_t newComp)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim2);
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <setComp+0x54>)
 8000f7a:	f004 f8e5 	bl	8005148 <HAL_TIM_Base_Stop>
	htim2.Instance = TIM2;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <setComp+0x54>)
 8000f80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f84:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = TIM2_PRSC;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <setComp+0x54>)
 8000f88:	220c      	movs	r2, #12
 8000f8a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <setComp+0x54>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = newComp;
 8000f92:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <setComp+0x54>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <setComp+0x54>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <setComp+0x54>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <setComp+0x54>)
 8000fa6:	f004 f80f 	bl	8004fc8 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <setComp+0x44>
	{
		Error_Handler();
 8000fb0:	f000 fcca 	bl	8001948 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim2);
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <setComp+0x54>)
 8000fb6:	f004 f85f 	bl	8005078 <HAL_TIM_Base_Start>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000548 	.word	0x20000548

08000fc8 <changeNote>:

//frequency = tim2_clk/tim2_prsclr/LUT_SIZE/tim2_prd
//desired tim2_prd = tm2_clk/tim2_prsclr/LUT_SIZE/frequency
//tim2_clk = 120 MHz, tim2_prsclr = 12, LUT_SIZE = 100
void changeNote(float frequency)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
	if(frequency == 0.0){
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	d108      	bne.n	8000ff2 <changeNote+0x2a>
		setComp((uint32_t)(frequency));
 8000fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe8:	ee17 0a90 	vmov	r0, s15
 8000fec:	f7ff ffc0 	bl	8000f70 <setComp>
	}
	else{
		setComp((uint32_t) (120000000.0f/TIM2_PRSC/((float)LUT_SIZE)/frequency) );
	}

}
 8000ff0:	e00b      	b.n	800100a <changeNote+0x42>
		setComp((uint32_t) (120000000.0f/TIM2_PRSC/((float)LUT_SIZE)/frequency) );
 8000ff2:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001014 <changeNote+0x4c>
 8000ff6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001002:	ee17 0a90 	vmov	r0, s15
 8001006:	f7ff ffb3 	bl	8000f70 <setComp>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	47c35000 	.word	0x47c35000

08001018 <TIM2_ISR>:

//used to iterate through the LUT
void TIM2_ISR()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	static uint32_t index = 0;
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, SIN_LUT[index]);
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <TIM2_ISR+0x34>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <TIM2_ISR+0x38>)
 8001022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	480a      	ldr	r0, [pc, #40]	@ (8001054 <TIM2_ISR+0x3c>)
 800102c:	f001 ffbd 	bl	8002faa <HAL_DAC_SetValue>
	++index;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <TIM2_ISR+0x34>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <TIM2_ISR+0x34>)
 8001038:	6013      	str	r3, [r2, #0]
	if(index > LUT_SIZE) index = 0;
 800103a:	4b04      	ldr	r3, [pc, #16]	@ (800104c <TIM2_ISR+0x34>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b64      	cmp	r3, #100	@ 0x64
 8001040:	d902      	bls.n	8001048 <TIM2_ISR+0x30>
 8001042:	4b02      	ldr	r3, [pc, #8]	@ (800104c <TIM2_ISR+0x34>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000598 	.word	0x20000598
 8001050:	20000370 	.word	0x20000370
 8001054:	200004a0 	.word	0x200004a0

08001058 <playNote>:
Note empty[] = { {0,50} };

uint8_t currentSong = 0;
uint8_t change = 0;

void playNote(float freq, uint16_t length){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001062:	4603      	mov	r3, r0
 8001064:	807b      	strh	r3, [r7, #2]
	changeNote(freq/1.5);
 8001066:	edd7 7a01 	vldr	s15, [r7, #4]
 800106a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800106e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001072:	eeb0 0a47 	vmov.f32	s0, s14
 8001076:	f7ff ffa7 	bl	8000fc8 <changeNote>
	HAL_Delay(length);
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 ff09 	bl	8001e94 <HAL_Delay>
	changeNote(0);
 8001082:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001098 <playNote+0x40>
 8001086:	f7ff ff9f 	bl	8000fc8 <changeNote>
	HAL_Delay(50);
 800108a:	2032      	movs	r0, #50	@ 0x32
 800108c:	f000 ff02 	bl	8001e94 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	00000000 	.word	0x00000000

0800109c <playSong>:

void playSong(Note *buf, uint32_t buf_size){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010aa:	f000 fef3 	bl	8001e94 <HAL_Delay>
	for(int i = 0; i < buf_size; ++i){
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e01a      	b.n	80010ea <playSong+0x4e>
		playNote(buf[i].freq, buf[i].length);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	f7ff ffc2 	bl	8001058 <playNote>
		if(change == 1){
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <playSong+0x5c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d103      	bne.n	80010e4 <playSong+0x48>
			change = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <playSong+0x5c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
			return;
 80010e2:	e006      	b.n	80010f2 <playSong+0x56>
	for(int i = 0; i < buf_size; ++i){
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d8e0      	bhi.n	80010b4 <playSong+0x18>
		}
	}
}
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000595 	.word	0x20000595

080010fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	if(currentSong == 0){
 8001106:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <HAL_GPIO_EXTI_Callback+0x1e>
		currentSong = 1;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
		change = 1;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_GPIO_EXTI_Callback+0x30>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
	}
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000594 	.word	0x20000594
 800112c:	20000595 	.word	0x20000595

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f000 fe39 	bl	8001daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f852 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 f9d2 	bl	80014e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001140:	f000 f8a0 	bl	8001284 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001144:	f000 f902 	bl	800134c <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8001148:	f000 f934 	bl	80013b4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800114c:	f000 f97e 	bl	800144c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  fill_LUT();
 8001150:	f7ff fe8a 	bl	8000e68 <fill_LUT>

    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x0);
 8001154:	2300      	movs	r3, #0
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	4819      	ldr	r0, [pc, #100]	@ (80011c0 <main+0x90>)
 800115c:	f001 ff25 	bl	8002faa <HAL_DAC_SetValue>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001160:	2100      	movs	r1, #0
 8001162:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <main+0x90>)
 8001164:	f001 fecf 	bl	8002f06 <HAL_DAC_Start>

    HAL_TIM_Base_Start_IT(&htim2);
 8001168:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <main+0x94>)
 800116a:	f004 f815 	bl	8005198 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    changeNote(0);
 800116e:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80011c8 <main+0x98>
 8001172:	f7ff ff29 	bl	8000fc8 <changeNote>

  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
 8001176:	2102      	movs	r1, #2
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f002 fa18 	bl	80035b0 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	d113      	bne.n	80011ae <main+0x7e>
		  if(currentSong == 1){
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <main+0x9c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10a      	bne.n	80011a4 <main+0x74>
			  playSong(pokeCenter, 5);
 800118e:	2105      	movs	r1, #5
 8001190:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <main+0xa0>)
 8001192:	f7ff ff83 	bl	800109c <playSong>
			  currentSong = 0;
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <main+0x9c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
			  change = 0;
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <main+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e7e8      	b.n	8001176 <main+0x46>
		  }
		  else{
			  playSong(introSong, sizeof(introSong)/sizeof(introSong[0]));
 80011a4:	2163      	movs	r1, #99	@ 0x63
 80011a6:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <main+0xa8>)
 80011a8:	f7ff ff78 	bl	800109c <playSong>
 80011ac:	e7e3      	b.n	8001176 <main+0x46>
		  }

	  }
	  else{
		  playSong(empty, 1);
 80011ae:	2101      	movs	r1, #1
 80011b0:	480a      	ldr	r0, [pc, #40]	@ (80011dc <main+0xac>)
 80011b2:	f7ff ff73 	bl	800109c <playSong>
		  currentSong = 0;
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <main+0x9c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
 80011bc:	e7db      	b.n	8001176 <main+0x46>
 80011be:	bf00      	nop
 80011c0:	200004a0 	.word	0x200004a0
 80011c4:	20000548 	.word	0x20000548
 80011c8:	00000000 	.word	0x00000000
 80011cc:	20000594 	.word	0x20000594
 80011d0:	20000318 	.word	0x20000318
 80011d4:	20000595 	.word	0x20000595
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000340 	.word	0x20000340

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	@ 0x58
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	@ 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 fa98 	bl	8006724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001202:	2000      	movs	r0, #0
 8001204:	f002 fa3c 	bl	8003680 <HAL_PWREx_ControlVoltageScaling>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800120e:	f000 fb9b 	bl	8001948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001212:	2310      	movs	r3, #16
 8001214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001216:	2301      	movs	r3, #1
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800121e:	2360      	movs	r3, #96	@ 0x60
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001226:	2301      	movs	r3, #1
 8001228:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800122e:	233c      	movs	r3, #60	@ 0x3c
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fad0 	bl	80037e8 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800124e:	f000 fb7b 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2303      	movs	r3, #3
 8001258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	2105      	movs	r1, #5
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fed6 	bl	800401c <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001276:	f000 fb67 	bl	8001948 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3758      	adds	r7, #88	@ 0x58
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <MX_ADC1_Init+0xbc>)
 800129c:	4a29      	ldr	r2, [pc, #164]	@ (8001344 <MX_ADC1_Init+0xc0>)
 800129e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80012a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012bc:	2204      	movs	r2, #4
 80012be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	4810      	ldr	r0, [pc, #64]	@ (8001340 <MX_ADC1_Init+0xbc>)
 80012fe:	f000 ff8d 	bl	800221c <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001308:	f000 fb1e 	bl	8001948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_ADC1_Init+0xc4>)
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001310:	2306      	movs	r3, #6
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001314:	2307      	movs	r3, #7
 8001316:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001318:	237f      	movs	r3, #127	@ 0x7f
 800131a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131c:	2304      	movs	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_ADC1_Init+0xbc>)
 800132a:	f001 f8bd 	bl	80024a8 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001334:	f000 fb08 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000438 	.word	0x20000438
 8001344:	50040000 	.word	0x50040000
 8001348:	04300002 	.word	0x04300002

0800134c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2228      	movs	r2, #40	@ 0x28
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f005 f9e3 	bl	8006724 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_DAC1_Init+0x60>)
 8001360:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <MX_DAC1_Init+0x64>)
 8001362:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	@ (80013ac <MX_DAC1_Init+0x60>)
 8001366:	f001 fdac 	bl	8002ec2 <HAL_DAC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001370:	f000 faea 	bl	8001948 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800137c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001380:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_DAC1_Init+0x60>)
 8001396:	f001 fe2d 	bl	8002ff4 <HAL_DAC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 fad2 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200004a0 	.word	0x200004a0
 80013b0:	40007400 	.word	0x40007400

080013b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <MX_LPUART1_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 80013fe:	f004 fb23 	bl	8005a48 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fa9e 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 8001410:	f005 f8be 	bl	8006590 <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 fa95 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 8001422:	f005 f8f3 	bl	800660c <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fa8c 	bl	8001948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_LPUART1_UART_Init+0x90>)
 8001432:	f005 f874 	bl	800651e <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fa84 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200004b4 	.word	0x200004b4
 8001448:	40008000 	.word	0x40008000

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_TIM2_Init+0x94>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <MX_TIM2_Init+0x94>)
 8001474:	220c      	movs	r2, #12
 8001476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_TIM2_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_TIM2_Init+0x94>)
 8001480:	225a      	movs	r2, #90	@ 0x5a
 8001482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_TIM2_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_TIM2_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001490:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <MX_TIM2_Init+0x94>)
 8001492:	f003 fd99 	bl	8004fc8 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800149c:	f000 fa54 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <MX_TIM2_Init+0x94>)
 80014ae:	f003 ffea 	bl	8005486 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b8:	f000 fa46 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_TIM2_Init+0x94>)
 80014ca:	f004 fa17 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 fa38 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000548 	.word	0x20000548

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	@ 0x38
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4bb1      	ldr	r3, [pc, #708]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	4ab0      	ldr	r2, [pc, #704]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001506:	4bae      	ldr	r3, [pc, #696]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4bab      	ldr	r3, [pc, #684]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	4aaa      	ldr	r2, [pc, #680]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151e:	4ba8      	ldr	r3, [pc, #672]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	4ba5      	ldr	r3, [pc, #660]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4aa4      	ldr	r2, [pc, #656]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4ba2      	ldr	r3, [pc, #648]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	4b9f      	ldr	r3, [pc, #636]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a9e      	ldr	r2, [pc, #632]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b9c      	ldr	r3, [pc, #624]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b99      	ldr	r3, [pc, #612]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a98      	ldr	r2, [pc, #608]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b96      	ldr	r3, [pc, #600]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b93      	ldr	r3, [pc, #588]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a92      	ldr	r2, [pc, #584]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b90      	ldr	r3, [pc, #576]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b8d      	ldr	r3, [pc, #564]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a8c      	ldr	r2, [pc, #560]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b8a      	ldr	r3, [pc, #552]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a2:	4b87      	ldr	r3, [pc, #540]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a86      	ldr	r2, [pc, #536]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 80015a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b84      	ldr	r3, [pc, #528]	@ (80017c0 <MX_GPIO_Init+0x2dc>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80015ba:	f002 f905 	bl	80037c8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	4880      	ldr	r0, [pc, #512]	@ (80017c4 <MX_GPIO_Init+0x2e0>)
 80015c4:	f002 f80c 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c8:	230c      	movs	r3, #12
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015d8:	230d      	movs	r3, #13
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4879      	ldr	r0, [pc, #484]	@ (80017c8 <MX_GPIO_Init+0x2e4>)
 80015e4:	f001 fe52 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80015e8:	2307      	movs	r3, #7
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ec:	2312      	movs	r3, #18
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015f8:	2304      	movs	r3, #4
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4872      	ldr	r0, [pc, #456]	@ (80017cc <MX_GPIO_Init+0x2e8>)
 8001604:	f001 fe42 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001618:	230d      	movs	r3, #13
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	486a      	ldr	r0, [pc, #424]	@ (80017cc <MX_GPIO_Init+0x2e8>)
 8001624:	f001 fe32 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001632:	2302      	movs	r3, #2
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001640:	f001 fe24 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001644:	2302      	movs	r3, #2
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f001 fe17 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23e0      	movs	r3, #224	@ 0xe0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166e:	2305      	movs	r3, #5
 8001670:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167c:	f001 fe06 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001680:	2301      	movs	r3, #1
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001690:	2302      	movs	r3, #2
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	484a      	ldr	r0, [pc, #296]	@ (80017c4 <MX_GPIO_Init+0x2e0>)
 800169c:	f001 fdf6 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80016a0:	2344      	movs	r3, #68	@ 0x44
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a4:	2303      	movs	r3, #3
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4844      	ldr	r0, [pc, #272]	@ (80017c4 <MX_GPIO_Init+0x2e0>)
 80016b4:	f001 fdea 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80016b8:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	483c      	ldr	r0, [pc, #240]	@ (80017c8 <MX_GPIO_Init+0x2e4>)
 80016d6:	f001 fdd9 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016da:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80016ec:	2303      	movs	r3, #3
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4834      	ldr	r0, [pc, #208]	@ (80017c8 <MX_GPIO_Init+0x2e4>)
 80016f8:	f001 fdc8 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016fc:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800170e:	230d      	movs	r3, #13
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	482a      	ldr	r0, [pc, #168]	@ (80017c4 <MX_GPIO_Init+0x2e0>)
 800171a:	f001 fdb7 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800171e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001730:	230e      	movs	r3, #14
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4822      	ldr	r0, [pc, #136]	@ (80017c4 <MX_GPIO_Init+0x2e0>)
 800173c:	f001 fda6 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001740:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001752:	2307      	movs	r3, #7
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	481c      	ldr	r0, [pc, #112]	@ (80017d0 <MX_GPIO_Init+0x2ec>)
 800175e:	f001 fd95 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001762:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001774:	2302      	movs	r3, #2
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4814      	ldr	r0, [pc, #80]	@ (80017d0 <MX_GPIO_Init+0x2ec>)
 8001780:	f001 fd84 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001784:	2340      	movs	r3, #64	@ 0x40
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001794:	230d      	movs	r3, #13
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <MX_GPIO_Init+0x2f0>)
 80017a0:	f001 fd74 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017b4:	2302      	movs	r3, #2
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	e00b      	b.n	80017d8 <MX_GPIO_Init+0x2f4>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48001000 	.word	0x48001000
 80017cc:	48001400 	.word	0x48001400
 80017d0:	48000c00 	.word	0x48000c00
 80017d4:	48000800 	.word	0x48000800
 80017d8:	4857      	ldr	r0, [pc, #348]	@ (8001938 <MX_GPIO_Init+0x454>)
 80017da:	f001 fd57 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017de:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017f0:	230c      	movs	r3, #12
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	484f      	ldr	r0, [pc, #316]	@ (8001938 <MX_GPIO_Init+0x454>)
 80017fc:	f001 fd46 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001800:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001812:	230a      	movs	r3, #10
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001820:	f001 fd34 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f001 fd26 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001840:	2301      	movs	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001850:	2309      	movs	r3, #9
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4838      	ldr	r0, [pc, #224]	@ (800193c <MX_GPIO_Init+0x458>)
 800185c:	f001 fd16 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001860:	2304      	movs	r3, #4
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001870:	230c      	movs	r3, #12
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	4830      	ldr	r0, [pc, #192]	@ (800193c <MX_GPIO_Init+0x458>)
 800187c:	f001 fd06 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001880:	2378      	movs	r3, #120	@ 0x78
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001890:	2307      	movs	r3, #7
 8001892:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4828      	ldr	r0, [pc, #160]	@ (800193c <MX_GPIO_Init+0x458>)
 800189c:	f001 fcf6 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018a0:	2338      	movs	r3, #56	@ 0x38
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b0:	2306      	movs	r3, #6
 80018b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4821      	ldr	r0, [pc, #132]	@ (8001940 <MX_GPIO_Init+0x45c>)
 80018bc:	f001 fce6 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	481a      	ldr	r0, [pc, #104]	@ (8001940 <MX_GPIO_Init+0x45c>)
 80018d8:	f001 fcd8 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e2:	2312      	movs	r3, #18
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ee:	2304      	movs	r3, #4
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	4811      	ldr	r0, [pc, #68]	@ (8001940 <MX_GPIO_Init+0x45c>)
 80018fa:	f001 fcc7 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fe:	2301      	movs	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800190e:	2302      	movs	r3, #2
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	480a      	ldr	r0, [pc, #40]	@ (8001944 <MX_GPIO_Init+0x460>)
 800191a:	f001 fcb7 	bl	800328c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2006      	movs	r0, #6
 8001924:	f001 fa97 	bl	8002e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001928:	2006      	movs	r0, #6
 800192a:	f001 fab0 	bl	8002e8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800192e:	bf00      	nop
 8001930:	3738      	adds	r7, #56	@ 0x38
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	48000400 	.word	0x48000400
 8001944:	48001000 	.word	0x48001000

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <Error_Handler+0x8>

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	@ 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	@ 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0b0      	sub	sp, #192	@ 0xc0
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	2294      	movs	r2, #148	@ 0x94
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 feb1 	bl	8006724 <memset>
  if(hadc->Instance==ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a42      	ldr	r2, [pc, #264]	@ (8001ad0 <HAL_ADC_MspInit+0x134>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d17d      	bne.n	8001ac8 <HAL_ADC_MspInit+0x12c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80019d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80019e2:	2310      	movs	r3, #16
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ee:	2302      	movs	r3, #2
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fdcb 	bl	8004598 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001a08:	f7ff ff9e 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	4a30      	ldr	r2, [pc, #192]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a30:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a40:	4a24      	ldr	r2, [pc, #144]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <HAL_ADC_MspInit+0x138>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a6c:	233f      	movs	r3, #63	@ 0x3f
 8001a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a72:	230b      	movs	r3, #11
 8001a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a82:	4619      	mov	r1, r3
 8001a84:	4814      	ldr	r0, [pc, #80]	@ (8001ad8 <HAL_ADC_MspInit+0x13c>)
 8001a86:	f001 fc01 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a90:	230b      	movs	r3, #11
 8001a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa6:	f001 fbf1 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ab0:	230b      	movs	r3, #11
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	@ (8001adc <HAL_ADC_MspInit+0x140>)
 8001ac4:	f001 fbe2 	bl	800328c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ac8:	bf00      	nop
 8001aca:	37c0      	adds	r7, #192	@ 0xc0
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	50040000 	.word	0x50040000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000400 	.word	0x48000400

08001ae0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <HAL_DAC_MspInit+0x74>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d124      	bne.n	8001b4c <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_DAC_MspInit+0x78>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <HAL_DAC_MspInit+0x78>)
 8001b08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_DAC_MspInit+0x78>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_DAC_MspInit+0x78>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b58 <HAL_DAC_MspInit+0x78>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_DAC_MspInit+0x78>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b32:	2310      	movs	r3, #16
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b48:	f001 fba0 	bl	800328c <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	@ 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40007400 	.word	0x40007400
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0ae      	sub	sp, #184	@ 0xb8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2294      	movs	r2, #148	@ 0x94
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 fdd1 	bl	8006724 <memset>
  if(huart->Instance==LPUART1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_UART_MspInit+0xb4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d13d      	bne.n	8001c08 <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fcfd 	bl	8004598 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ba4:	f7ff fed0 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_UART_MspInit+0xb8>)
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc4:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001bd8:	f001 fdf6 	bl	80037c8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bdc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001be0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bfc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <HAL_UART_MspInit+0xbc>)
 8001c04:	f001 fb42 	bl	800328c <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001c08:	bf00      	nop
 8001c0a:	37b8      	adds	r7, #184	@ 0xb8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40008000 	.word	0x40008000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48001800 	.word	0x48001800

08001c1c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3c:	d130      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4808      	ldr	r0, [pc, #32]	@ (8001cac <HAL_TIM_Base_MspInit+0x90>)
 8001c8c:	f001 fafe 	bl	800328c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	201c      	movs	r0, #28
 8001c96:	f001 f8de 	bl	8002e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	f001 f8f7 	bl	8002e8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	@ 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000400 	.word	0x48000400

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f000 f8a5 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f001 fc7c 	bl	8003610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	 TIM2_ISR();
 8001d20:	f7ff f97a 	bl	8001018 <TIM2_ISR>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <TIM2_IRQHandler+0x14>)
 8001d26:	f003 faa7 	bl	8005278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000548 	.word	0x20000548

08001d34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
    Reset_Handler:
      ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d5c:	f7ff ffea 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	@ (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	@ (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f004 fcd5 	bl	8006734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8a:	f7ff f9d1 	bl	8001130 <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
      ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001d9c:	08007a38 	.word	0x08007a38
  ldr r2, =_sbss
 8001da0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001da4:	200005a0 	.word	0x200005a0

08001da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_IRQHandler>

08001daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f001 f843 	bl	8002e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f80e 	bl	8001ddc <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dcc:	f7ff fdc2 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_InitTick+0x6c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df0:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <HAL_InitTick+0x70>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_InitTick+0x6c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 f84f 	bl	8002eaa <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d809      	bhi.n	8001e2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f001 f819 	bl	8002e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <HAL_InitTick+0x74>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e004      	b.n	8001e3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e001      	b.n	8001e3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000350 	.word	0x20000350
 8001e4c:	20000348 	.word	0x20000348
 8001e50:	2000034c 	.word	0x2000034c

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000350 	.word	0x20000350
 8001e78:	2000059c 	.word	0x2000059c

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000059c 	.word	0x2000059c

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000350 	.word	0x20000350

08001edc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3360      	adds	r3, #96	@ 0x60
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <LL_ADC_SetOffset+0x44>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	03fff000 	.word	0x03fff000

08001f8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3360      	adds	r3, #96	@ 0x60
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	@ 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3330      	adds	r3, #48	@ 0x30
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	211f      	movs	r1, #31
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 011f 	and.w	r1, r3, #31
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3314      	adds	r3, #20
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0e5b      	lsrs	r3, r3, #25
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0d1b      	lsrs	r3, r3, #20
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2107      	movs	r1, #7
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0d1b      	lsrs	r3, r3, #20
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0318 	and.w	r3, r3, #24
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	400b      	ands	r3, r1
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	0007ffff 	.word	0x0007ffff

0800210c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800211c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6093      	str	r3, [r2, #8]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002144:	d101      	bne.n	800214a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002168:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800216c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002194:	d101      	bne.n	800219a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_IsEnabled+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_IsEnabled+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d101      	bne.n	80021e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d101      	bne.n	800220c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e129      	b.n	800248a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fba9 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff67 	bl	8002130 <LL_ADC_IsDeepPowerDownEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff4d 	bl	800210c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff82 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff66 	bl	8002158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228c:	4b81      	ldr	r3, [pc, #516]	@ (8002494 <HAL_ADC_Init+0x278>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	4a81      	ldr	r2, [pc, #516]	@ (8002498 <HAL_ADC_Init+0x27c>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	3301      	adds	r3, #1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff64 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f043 0210 	orr.w	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff75 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 80022e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80c2 	bne.w	8002478 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80be 	bne.w	8002478 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002304:	f043 0202 	orr.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff49 	bl	80021a8 <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800231c:	485f      	ldr	r0, [pc, #380]	@ (800249c <HAL_ADC_Init+0x280>)
 800231e:	f7ff ff43 	bl	80021a8 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4619      	mov	r1, r3
 800232e:	485c      	ldr	r0, [pc, #368]	@ (80024a0 <HAL_ADC_Init+0x284>)
 8002330:	f7ff fdd4 	bl	8001edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e5b      	ldrb	r3, [r3, #25]
 8002338:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800233e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002344:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800234a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002352:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	045b      	lsls	r3, r3, #17
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <HAL_ADC_Init+0x288>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	430b      	orrs	r3, r1
 800239e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff25 	bl	80021f4 <LL_ADC_INJ_IsConversionOngoing>
 80023aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d140      	bne.n	8002434 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d13d      	bne.n	8002434 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7e1b      	ldrb	r3, [r3, #24]
 80023c0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023da:	f023 0306 	bic.w	r3, r3, #6
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d118      	bne.n	8002424 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002414:	430a      	orrs	r2, r1
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e007      	b.n	8002434 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10c      	bne.n	8002456 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f023 010f 	bic.w	r1, r3, #15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020f 	bic.w	r2, r2, #15
 8002464:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	659a      	str	r2, [r3, #88]	@ 0x58
 8002476:	e007      	b.n	8002488 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002488:	7ffb      	ldrb	r3, [r7, #31]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000348 	.word	0x20000348
 8002498:	053e2d63 	.word	0x053e2d63
 800249c:	50040000 	.word	0x50040000
 80024a0:	50040300 	.word	0x50040300
 80024a4:	fff0c007 	.word	0xfff0c007

080024a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0b6      	sub	sp, #216	@ 0xd8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x22>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e3d5      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x7ce>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fe79 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 83ba 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d824      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	3b02      	subs	r3, #2
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d81b      	bhi.n	8002536 <HAL_ADC_ConfigChannel+0x8e>
 80024fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002504 <HAL_ADC_ConfigChannel+0x5c>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002515 	.word	0x08002515
 8002508:	0800251d 	.word	0x0800251d
 800250c:	08002525 	.word	0x08002525
 8002510:	0800252d 	.word	0x0800252d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002514:	230c      	movs	r3, #12
 8002516:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800251a:	e010      	b.n	800253e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800251c:	2312      	movs	r3, #18
 800251e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002522:	e00c      	b.n	800253e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002524:	2318      	movs	r3, #24
 8002526:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800252a:	e008      	b.n	800253e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800252c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002534:	e003      	b.n	800253e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002536:	2306      	movs	r3, #6
 8002538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800253c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800254c:	f7ff fd62 	bl	8002014 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fe3a 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 800255a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fe46 	bl	80021f4 <LL_ADC_INJ_IsConversionOngoing>
 8002568:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800256c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 81bf 	bne.w	80028f4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 81ba 	bne.w	80028f4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002588:	d10f      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff fd69 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fd23 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>
 80025a8:	e00e      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7ff fd58 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fd13 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	08db      	lsrs	r3, r3, #3
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00a      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025fa:	f7ff fca3 	bl	8001f44 <LL_ADC_SetOffset>
 80025fe:	e179      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fcc0 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <HAL_ADC_ConfigChannel+0x184>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fcb5 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	e01e      	b.n	800266a <HAL_ADC_ConfigChannel+0x1c2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fcaa 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800264a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800264e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e004      	b.n	8002668 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800265e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x1da>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x20c>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800269a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800269e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80026aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fc79 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fc5d 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x24a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fc52 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x288>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fc47 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002714:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002718:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e004      	b.n	800272e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x2a0>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	e018      	b.n	800277a <HAL_ADC_ConfigChannel+0x2d2>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800275c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e004      	b.n	800277a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277a:	429a      	cmp	r2, r3
 800277c:	d106      	bne.n	800278c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fc16 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fbfa 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x310>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fbef 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	f003 021f 	and.w	r2, r3, #31
 80027b6:	e01e      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x34e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fbe4 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80027de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e004      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80027ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_ADC_ConfigChannel+0x366>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	e014      	b.n	8002838 <HAL_ADC_ConfigChannel+0x390>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800281c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800281e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002822:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e004      	b.n	8002838 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800282e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002838:	429a      	cmp	r2, r3
 800283a:	d106      	bne.n	800284a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	2102      	movs	r1, #2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fbb7 	bl	8001fb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2103      	movs	r1, #3
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fb9b 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x3ce>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2103      	movs	r1, #3
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb90 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	e017      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x3fe>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2103      	movs	r1, #3
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fb85 	bl	8001f8c <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800288e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002890:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e003      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800289c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_ADC_ConfigChannel+0x416>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	e011      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x43a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80028cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80028da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d106      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2103      	movs	r1, #3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fb62 	bl	8001fb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fc55 	bl	80021a8 <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 813f 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f7ff fbd6 	bl	80020c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b58 <HAL_ADC_ConfigChannel+0x6b0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f040 8130 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_ADC_ConfigChannel+0x4a4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	3301      	adds	r3, #1
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2b09      	cmp	r3, #9
 8002942:	bf94      	ite	ls
 8002944:	2301      	movls	r3, #1
 8002946:	2300      	movhi	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e019      	b.n	8002980 <HAL_ADC_ConfigChannel+0x4d8>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800295a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800295e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2b09      	cmp	r3, #9
 8002978:	bf94      	ite	ls
 800297a:	2301      	movls	r3, #1
 800297c:	2300      	movhi	r3, #0
 800297e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002980:	2b00      	cmp	r3, #0
 8002982:	d079      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x4f8>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	069b      	lsls	r3, r3, #26
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299e:	e015      	b.n	80029cc <HAL_ADC_ConfigChannel+0x524>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80029bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	069b      	lsls	r3, r3, #26
 80029c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x544>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	e017      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x574>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	ea42 0103 	orr.w	r1, r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x59a>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	e018      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x5cc>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e003      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a74:	430b      	orrs	r3, r1
 8002a76:	e080      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x5ec>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a92:	e015      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x618>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e003      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x638>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	e017      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x668>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	61bb      	str	r3, [r7, #24]
  return result;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	ea42 0103 	orr.w	r1, r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x694>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	3b1e      	subs	r3, #30
 8002b34:	051b      	lsls	r3, r3, #20
 8002b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	e01d      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x6d0>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	60fb      	str	r3, [r7, #12]
  return result;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d103      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e005      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x6bc>
 8002b58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 021f 	and.w	r2, r3, #31
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b1e      	subs	r3, #30
 8002b72:	051b      	lsls	r3, r3, #20
 8002b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7ff fa74 	bl	800206c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d06c      	beq.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b90:	483c      	ldr	r0, [pc, #240]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b92:	f7ff f9c9 	bl	8001f28 <LL_ADC_GetCommonPathInternalCh>
 8002b96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d127      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d121      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a35      	ldr	r2, [pc, #212]	@ (8002c8c <HAL_ADC_ConfigChannel+0x7e4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d157      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	482f      	ldr	r0, [pc, #188]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bc6:	f7ff f99c 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bca:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <HAL_ADC_ConfigChannel+0x7e8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	4a30      	ldr	r2, [pc, #192]	@ (8002c94 <HAL_ADC_ConfigChannel+0x7ec>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf2:	e03a      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <HAL_ADC_ConfigChannel+0x7f0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <HAL_ADC_ConfigChannel+0x7e4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d12a      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4819      	ldr	r0, [pc, #100]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c20:	f7ff f96f 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c24:	e021      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <HAL_ADC_ConfigChannel+0x7f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d11c      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <HAL_ADC_ConfigChannel+0x7e4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d111      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c52:	f7ff f956 	bl	8001f02 <LL_ADC_SetCommonPathInternalCh>
 8002c56:	e008      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	37d8      	adds	r7, #216	@ 0xd8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	80080000 	.word	0x80080000
 8002c84:	50040300 	.word	0x50040300
 8002c88:	c7520000 	.word	0xc7520000
 8002c8c:	50040000 	.word	0x50040000
 8002c90:	20000348 	.word	0x20000348
 8002c94:	053e2d63 	.word	0x053e2d63
 8002c98:	cb840000 	.word	0xcb840000
 8002c9c:	80000001 	.word	0x80000001

08002ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	@ (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4907      	ldr	r1, [pc, #28]	@ (8002d3c <__NVIC_EnableIRQ+0x38>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	@ (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	@ (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	@ 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	@ 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e0c:	d301      	bcc.n	8002e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00f      	b.n	8002e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <SysTick_Config+0x40>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1a:	210f      	movs	r1, #15
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f7ff ff8e 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <SysTick_Config+0x40>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2a:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <SysTick_Config+0x40>)
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff29 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e68:	f7ff ff3e 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	6978      	ldr	r0, [r7, #20]
 8002e74:	f7ff ff8e 	bl	8002d94 <NVIC_EncodePriority>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff5d 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff31 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ffa2 	bl	8002dfc <SysTick_Config>
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e014      	b.n	8002efe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe fdfb 	bl	8001ae0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_DAC_Start+0x16>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e040      	b.n	8002f9e <HAL_DAC_Start+0x98>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2201      	movs	r2, #1
 8002f36:	409a      	lsls	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d11d      	bne.n	8002f90 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	e014      	b.n	8002f90 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2102      	movs	r1, #2
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d107      	bne.n	8002f90 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0202 	orr.w	r2, r2, #2
 8002f8e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3308      	adds	r3, #8
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e004      	b.n	8002fde <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3314      	adds	r3, #20
 8002fdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	795b      	ldrb	r3, [r3, #5]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_DAC_ConfigChannel+0x1c>
 800300c:	2302      	movs	r3, #2
 800300e:	e137      	b.n	8003280 <HAL_DAC_ConfigChannel+0x28c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2202      	movs	r2, #2
 800301a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b04      	cmp	r3, #4
 8003022:	f040 8081 	bne.w	8003128 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003026:	f7fe ff29 	bl	8001e7c <HAL_GetTick>
 800302a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d140      	bne.n	80030b4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003032:	e018      	b.n	8003066 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003034:	f7fe ff22 	bl	8001e7c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d911      	bls.n	8003066 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f043 0208 	orr.w	r2, r3, #8
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2203      	movs	r2, #3
 8003060:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e10c      	b.n	8003280 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1df      	bne.n	8003034 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003074:	2001      	movs	r0, #1
 8003076:	f7fe ff0d 	bl	8001e94 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	69d2      	ldr	r2, [r2, #28]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40
 8003084:	e023      	b.n	80030ce <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003086:	f7fe fef9 	bl	8001e7c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d90f      	bls.n	80030b4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0a      	bge.n	80030b4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f043 0208 	orr.w	r2, r3, #8
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2203      	movs	r2, #3
 80030ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0e5      	b.n	8003280 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	dbe3      	blt.n	8003086 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fe fee8 	bl	8001e94 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	69d2      	ldr	r2, [r2, #28]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	ea02 0103 	and.w	r1, r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	21ff      	movs	r1, #255	@ 0xff
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	ea02 0103 	and.w	r1, r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d11d      	bne.n	800316c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	221f      	movs	r2, #31
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	4013      	ands	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	4313      	orrs	r3, r2
 8003162:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003172:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2207      	movs	r2, #7
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	4013      	ands	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	431a      	orrs	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	400a      	ands	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003210:	d104      	bne.n	800321c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e018      	b.n	800324e <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e00f      	b.n	800324e <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800322e:	f001 f8bb 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 8003232:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <HAL_DAC_ConfigChannel+0x294>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d904      	bls.n	8003246 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	e003      	b.n	800324e <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800324c:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	22c0      	movs	r2, #192	@ 0xc0
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	04c4b400 	.word	0x04c4b400

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329a:	e166      	b.n	800356a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8158 	beq.w	8003564 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d005      	beq.n	80032cc <HAL_GPIO_Init+0x40>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d130      	bne.n	800332e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003302:	2201      	movs	r2, #1
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 0201 	and.w	r2, r3, #1
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b03      	cmp	r3, #3
 8003338:	d017      	beq.n	800336a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d123      	bne.n	80033be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	6939      	ldr	r1, [r7, #16]
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0203 	and.w	r2, r3, #3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80b2 	beq.w	8003564 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003400:	4b61      	ldr	r3, [pc, #388]	@ (8003588 <HAL_GPIO_Init+0x2fc>)
 8003402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003404:	4a60      	ldr	r2, [pc, #384]	@ (8003588 <HAL_GPIO_Init+0x2fc>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6613      	str	r3, [r2, #96]	@ 0x60
 800340c:	4b5e      	ldr	r3, [pc, #376]	@ (8003588 <HAL_GPIO_Init+0x2fc>)
 800340e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003418:	4a5c      	ldr	r2, [pc, #368]	@ (800358c <HAL_GPIO_Init+0x300>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003442:	d02b      	beq.n	800349c <HAL_GPIO_Init+0x210>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a52      	ldr	r2, [pc, #328]	@ (8003590 <HAL_GPIO_Init+0x304>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d025      	beq.n	8003498 <HAL_GPIO_Init+0x20c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a51      	ldr	r2, [pc, #324]	@ (8003594 <HAL_GPIO_Init+0x308>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d01f      	beq.n	8003494 <HAL_GPIO_Init+0x208>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a50      	ldr	r2, [pc, #320]	@ (8003598 <HAL_GPIO_Init+0x30c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d019      	beq.n	8003490 <HAL_GPIO_Init+0x204>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a4f      	ldr	r2, [pc, #316]	@ (800359c <HAL_GPIO_Init+0x310>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_GPIO_Init+0x200>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a4e      	ldr	r2, [pc, #312]	@ (80035a0 <HAL_GPIO_Init+0x314>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00d      	beq.n	8003488 <HAL_GPIO_Init+0x1fc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a4d      	ldr	r2, [pc, #308]	@ (80035a4 <HAL_GPIO_Init+0x318>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <HAL_GPIO_Init+0x1f8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4c      	ldr	r2, [pc, #304]	@ (80035a8 <HAL_GPIO_Init+0x31c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_GPIO_Init+0x1f4>
 800347c:	2307      	movs	r3, #7
 800347e:	e00e      	b.n	800349e <HAL_GPIO_Init+0x212>
 8003480:	2308      	movs	r3, #8
 8003482:	e00c      	b.n	800349e <HAL_GPIO_Init+0x212>
 8003484:	2306      	movs	r3, #6
 8003486:	e00a      	b.n	800349e <HAL_GPIO_Init+0x212>
 8003488:	2305      	movs	r3, #5
 800348a:	e008      	b.n	800349e <HAL_GPIO_Init+0x212>
 800348c:	2304      	movs	r3, #4
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x212>
 8003490:	2303      	movs	r3, #3
 8003492:	e004      	b.n	800349e <HAL_GPIO_Init+0x212>
 8003494:	2302      	movs	r3, #2
 8003496:	e002      	b.n	800349e <HAL_GPIO_Init+0x212>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_GPIO_Init+0x212>
 800349c:	2300      	movs	r3, #0
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	f002 0203 	and.w	r2, r2, #3
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4093      	lsls	r3, r2
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ae:	4937      	ldr	r1, [pc, #220]	@ (800358c <HAL_GPIO_Init+0x300>)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034bc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ac <HAL_GPIO_Init+0x320>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034e0:	4a32      	ldr	r2, [pc, #200]	@ (80035ac <HAL_GPIO_Init+0x320>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_GPIO_Init+0x320>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800350a:	4a28      	ldr	r2, [pc, #160]	@ (80035ac <HAL_GPIO_Init+0x320>)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003510:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <HAL_GPIO_Init+0x320>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003534:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <HAL_GPIO_Init+0x320>)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800353a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <HAL_GPIO_Init+0x320>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800355e:	4a13      	ldr	r2, [pc, #76]	@ (80035ac <HAL_GPIO_Init+0x320>)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f ae91 	bne.w	800329c <HAL_GPIO_Init+0x10>
  }
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40021000 	.word	0x40021000
 800358c:	40010000 	.word	0x40010000
 8003590:	48000400 	.word	0x48000400
 8003594:	48000800 	.word	0x48000800
 8003598:	48000c00 	.word	0x48000c00
 800359c:	48001000 	.word	0x48001000
 80035a0:	48001400 	.word	0x48001400
 80035a4:	48001800 	.word	0x48001800
 80035a8:	48001c00 	.word	0x48001c00
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e001      	b.n	80035d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035fc:	e002      	b.n	8003604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800361a:	4b08      	ldr	r3, [pc, #32]	@ (800363c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003626:	4a05      	ldr	r2, [pc, #20]	@ (800363c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fd64 	bl	80010fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40010400 	.word	0x40010400

08003640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003650:	d102      	bne.n	8003658 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003656:	e00b      	b.n	8003670 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003658:	4b08      	ldr	r3, [pc, #32]	@ (800367c <HAL_PWREx_GetVoltageRange+0x3c>)
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003666:	d102      	bne.n	800366e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003668:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800366c:	e000      	b.n	8003670 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800366e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40007000 	.word	0x40007000

08003680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d141      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800368e:	4b4b      	ldr	r3, [pc, #300]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d131      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800369c:	4b47      	ldr	r3, [pc, #284]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a2:	4a46      	ldr	r2, [pc, #280]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ac:	4b43      	ldr	r3, [pc, #268]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b4:	4a41      	ldr	r2, [pc, #260]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036bc:	4b40      	ldr	r3, [pc, #256]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2232      	movs	r2, #50	@ 0x32
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a3f      	ldr	r2, [pc, #252]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	e002      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036da:	4b38      	ldr	r3, [pc, #224]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d102      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f2      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ee:	4b33      	ldr	r3, [pc, #204]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fa:	d158      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e057      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003700:	4b2e      	ldr	r3, [pc, #184]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003706:	4a2d      	ldr	r2, [pc, #180]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003710:	e04d      	b.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003718:	d141      	bne.n	800379e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800371a:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d131      	bne.n	800378c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003728:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800372e:	4a23      	ldr	r2, [pc, #140]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003734:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003740:	4a1e      	ldr	r2, [pc, #120]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2232      	movs	r2, #50	@ 0x32
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a1c      	ldr	r2, [pc, #112]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375e:	e002      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003772:	d102      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f2      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800377a:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003786:	d112      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e011      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800378c:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800379c:	e007      	b.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800379e:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40007000 	.word	0x40007000
 80037c0:	20000348 	.word	0x20000348
 80037c4:	431bde83 	.word	0x431bde83

080037c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a04      	ldr	r2, [pc, #16]	@ (80037e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037d6:	6053      	str	r3, [r2, #4]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000

080037e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f000 bc08 	b.w	800400c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fc:	4b96      	ldr	r3, [pc, #600]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003806:	4b94      	ldr	r3, [pc, #592]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80e4 	beq.w	80039e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_RCC_OscConfig+0x4c>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	f040 808b 	bne.w	8003942 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b01      	cmp	r3, #1
 8003830:	f040 8087 	bne.w	8003942 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003834:	4b88      	ldr	r3, [pc, #544]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x64>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e3df      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	4b81      	ldr	r3, [pc, #516]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_RCC_OscConfig+0x7e>
 800385c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003864:	e005      	b.n	8003872 <HAL_RCC_OscConfig+0x8a>
 8003866:	4b7c      	ldr	r3, [pc, #496]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003872:	4293      	cmp	r3, r2
 8003874:	d223      	bcs.n	80038be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fdcc 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e3c0      	b.n	800400c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388a:	4b73      	ldr	r3, [pc, #460]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a72      	ldr	r2, [pc, #456]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b70      	ldr	r3, [pc, #448]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	496d      	ldr	r1, [pc, #436]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	4968      	ldr	r1, [pc, #416]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e025      	b.n	800390a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038be:	4b66      	ldr	r3, [pc, #408]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a65      	ldr	r2, [pc, #404]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b63      	ldr	r3, [pc, #396]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4960      	ldr	r1, [pc, #384]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	495b      	ldr	r1, [pc, #364]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fd8c 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e380      	b.n	800400c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390a:	f000 fcc1 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b51      	ldr	r3, [pc, #324]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	4950      	ldr	r1, [pc, #320]	@ (8003a5c <HAL_RCC_OscConfig+0x274>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a4e      	ldr	r2, [pc, #312]	@ (8003a60 <HAL_RCC_OscConfig+0x278>)
 8003928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800392a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a64 <HAL_RCC_OscConfig+0x27c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fa54 	bl	8001ddc <HAL_InitTick>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d052      	beq.n	80039e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	e364      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d032      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394a:	4b43      	ldr	r3, [pc, #268]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a42      	ldr	r2, [pc, #264]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003956:	f7fe fa91 	bl	8001e7c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800395e:	f7fe fa8d 	bl	8001e7c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e34d      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003970:	4b39      	ldr	r3, [pc, #228]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397c:	4b36      	ldr	r3, [pc, #216]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a35      	ldr	r2, [pc, #212]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b33      	ldr	r3, [pc, #204]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4930      	ldr	r1, [pc, #192]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	492b      	ldr	r1, [pc, #172]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
 80039ae:	e01a      	b.n	80039e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b0:	4b29      	ldr	r3, [pc, #164]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fa5e 	bl	8001e7c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c4:	f7fe fa5a 	bl	8001e7c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e31a      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1dc>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d073      	beq.n	8003ada <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x21c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d10e      	bne.n	8003a1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d063      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d15f      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2f7      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x24c>
 8003a26:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e025      	b.n	8003a80 <HAL_RCC_OscConfig+0x298>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3c:	d114      	bne.n	8003a68 <HAL_RCC_OscConfig+0x280>
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a05      	ldr	r2, [pc, #20]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b03      	ldr	r3, [pc, #12]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a02      	ldr	r2, [pc, #8]	@ (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e013      	b.n	8003a80 <HAL_RCC_OscConfig+0x298>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	080077e0 	.word	0x080077e0
 8003a60:	20000348 	.word	0x20000348
 8003a64:	2000034c 	.word	0x2000034c
 8003a68:	4ba0      	ldr	r3, [pc, #640]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a9f      	ldr	r2, [pc, #636]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b9d      	ldr	r3, [pc, #628]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a9c      	ldr	r2, [pc, #624]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fe f9f8 	bl	8001e7c <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe f9f4 	bl	8001e7c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e2b4      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa2:	4b92      	ldr	r3, [pc, #584]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2a8>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe f9e4 	bl	8001e7c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe f9e0 	bl	8001e7c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	@ 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e2a0      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aca:	4b88      	ldr	r3, [pc, #544]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2d0>
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d060      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x310>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d119      	bne.n	8003b26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d116      	bne.n	8003b26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af8:	4b7c      	ldr	r3, [pc, #496]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x328>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e27d      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b76      	ldr	r3, [pc, #472]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	4973      	ldr	r1, [pc, #460]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b24:	e040      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d023      	beq.n	8003b76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6e      	ldr	r2, [pc, #440]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe f99f 	bl	8001e7c <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b42:	f7fe f99b 	bl	8001e7c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e25b      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b54:	4b65      	ldr	r3, [pc, #404]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b62      	ldr	r3, [pc, #392]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	495f      	ldr	r1, [pc, #380]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	e018      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b5d      	ldr	r3, [pc, #372]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe f97b 	bl	8001e7c <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe f977 	bl	8001e7c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e237      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b9c:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fe f956 	bl	8001e7c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe f952 	bl	8001e7c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e212      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be6:	4b41      	ldr	r3, [pc, #260]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x3ec>
 8003bf4:	e01b      	b.n	8003c2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fe f939 	bl	8001e7c <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0e:	f7fe f935 	bl	8001e7c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e1f5      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c20:	4b32      	ldr	r3, [pc, #200]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ef      	bne.n	8003c0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80a6 	beq.w	8003d88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c40:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c50:	4a26      	ldr	r2, [pc, #152]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c58:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c64:	2301      	movs	r3, #1
 8003c66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c68:	4b21      	ldr	r3, [pc, #132]	@ (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d118      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c74:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c80:	f7fe f8fc 	bl	8001e7c <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fe f8f8 	bl	8001e7c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1b8      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9a:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d108      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4d8>
 8003cae:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cbe:	e029      	b.n	8003d14 <HAL_RCC_OscConfig+0x52c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d115      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x50c>
 8003cc8:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cce:	4a07      	ldr	r2, [pc, #28]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	4a03      	ldr	r2, [pc, #12]	@ (8003cec <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x52c>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	4a9c      	ldr	r2, [pc, #624]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d04:	4b99      	ldr	r3, [pc, #612]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0a:	4a98      	ldr	r2, [pc, #608]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe f8ae 	bl	8001e7c <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe f8aa 	bl	8001e7c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e168      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	4b8c      	ldr	r3, [pc, #560]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ed      	beq.n	8003d24 <HAL_RCC_OscConfig+0x53c>
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fe f897 	bl	8001e7c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f893 	bl	8001e7c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e151      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d68:	4b80      	ldr	r3, [pc, #512]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ed      	bne.n	8003d52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d76:	7ffb      	ldrb	r3, [r7, #31]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d80:	4a7a      	ldr	r2, [pc, #488]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d03c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d9c:	4b73      	ldr	r3, [pc, #460]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003da2:	4a72      	ldr	r2, [pc, #456]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe f866 	bl	8001e7c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db4:	f7fe f862 	bl	8001e7c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e122      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dc6:	4b69      	ldr	r3, [pc, #420]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <HAL_RCC_OscConfig+0x5cc>
 8003dd4:	e01b      	b.n	8003e0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd6:	4b65      	ldr	r3, [pc, #404]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ddc:	4a63      	ldr	r2, [pc, #396]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe f849 	bl	8001e7c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fe f845 	bl	8001e7c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e105      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e00:	4b5a      	ldr	r3, [pc, #360]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ef      	bne.n	8003dee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80f9 	beq.w	800400a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f040 80cf 	bne.w	8003fc0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e22:	4b52      	ldr	r3, [pc, #328]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0203 	and.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d12c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	3b01      	subs	r3, #1
 8003e42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d123      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d11b      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d113      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d071      	beq.n	8003f74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d068      	beq.n	8003f68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e96:	4b35      	ldr	r3, [pc, #212]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ea2:	4b32      	ldr	r3, [pc, #200]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0ac      	b.n	800400c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ebc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ebe:	f7fd ffdd 	bl	8001e7c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fd ffd9 	bl	8001e7c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e099      	b.n	800400c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <HAL_RCC_OscConfig+0x788>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0112      	lsls	r2, r2, #4
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003efe:	0212      	lsls	r2, r2, #8
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0552      	lsls	r2, r2, #21
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f12:	0852      	lsrs	r2, r2, #1
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0652      	lsls	r2, r2, #25
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f1e:	06d2      	lsls	r2, r2, #27
 8003f20:	430a      	orrs	r2, r1
 8003f22:	4912      	ldr	r1, [pc, #72]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f28:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f34:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a0c      	ldr	r2, [pc, #48]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f40:	f7fd ff9c 	bl	8001e7c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fd ff98 	bl	8001e7c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e058      	b.n	800400c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f66:	e050      	b.n	800400a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e04f      	b.n	800400c <HAL_RCC_OscConfig+0x824>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f74:	4b27      	ldr	r3, [pc, #156]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d144      	bne.n	800400a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f80:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a23      	ldr	r2, [pc, #140]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f8c:	4b21      	ldr	r3, [pc, #132]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a20      	ldr	r2, [pc, #128]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f98:	f7fd ff70 	bl	8001e7c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd ff6c 	bl	8001e7c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e02c      	b.n	800400c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb2:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x7b8>
 8003fbe:	e024      	b.n	800400a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d01f      	beq.n	8004006 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a12      	ldr	r2, [pc, #72]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fd ff53 	bl	8001e7c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd ff4f 	bl	8001e7c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e00f      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4905      	ldr	r1, [pc, #20]	@ (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_RCC_OscConfig+0x830>)
 8004000:	4013      	ands	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e001      	b.n	800400a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	feeefffc 	.word	0xfeeefffc

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e11d      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b90      	ldr	r3, [pc, #576]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d910      	bls.n	8004064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b8d      	ldr	r3, [pc, #564]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 020f 	bic.w	r2, r3, #15
 800404a:	498b      	ldr	r1, [pc, #556]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b89      	ldr	r3, [pc, #548]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e105      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b81      	ldr	r3, [pc, #516]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800407c:	429a      	cmp	r2, r3
 800407e:	d908      	bls.n	8004092 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	4b7e      	ldr	r3, [pc, #504]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	497b      	ldr	r1, [pc, #492]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d079      	beq.n	8004192 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d11e      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a6:	4b75      	ldr	r3, [pc, #468]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0dc      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80040b6:	f000 fa09 	bl	80044cc <RCC_GetSysClockFreqFromPLLSource>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4a70      	ldr	r2, [pc, #448]	@ (8004280 <HAL_RCC_ClockConfig+0x264>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d946      	bls.n	8004150 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80040c2:	4b6e      	ldr	r3, [pc, #440]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d140      	bne.n	8004150 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ce:	4b6b      	ldr	r3, [pc, #428]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040d6:	4a69      	ldr	r2, [pc, #420]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80040d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040de:	2380      	movs	r3, #128	@ 0x80
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e035      	b.n	8004150 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ec:	4b63      	ldr	r3, [pc, #396]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d115      	bne.n	8004124 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b9      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004104:	4b5d      	ldr	r3, [pc, #372]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0ad      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004114:	4b59      	ldr	r3, [pc, #356]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0a5      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004124:	f000 f8b4 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004128:	4603      	mov	r3, r0
 800412a:	4a55      	ldr	r2, [pc, #340]	@ (8004280 <HAL_RCC_ClockConfig+0x264>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d90f      	bls.n	8004150 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004130:	4b52      	ldr	r3, [pc, #328]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800413c:	4b4f      	ldr	r3, [pc, #316]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004144:	4a4d      	ldr	r2, [pc, #308]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800414c:	2380      	movs	r3, #128	@ 0x80
 800414e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004150:	4b4a      	ldr	r3, [pc, #296]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4947      	ldr	r1, [pc, #284]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004162:	f7fd fe8b 	bl	8001e7c <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004168:	e00a      	b.n	8004180 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416a:	f7fd fe87 	bl	8001e7c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e077      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004180:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 020c 	and.w	r2, r3, #12
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	429a      	cmp	r2, r3
 8004190:	d1eb      	bne.n	800416a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b80      	cmp	r3, #128	@ 0x80
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004198:	4b38      	ldr	r3, [pc, #224]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a37      	ldr	r2, [pc, #220]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800419e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b31      	ldr	r3, [pc, #196]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041bc:	429a      	cmp	r2, r3
 80041be:	d208      	bcs.n	80041d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b2e      	ldr	r3, [pc, #184]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	492b      	ldr	r1, [pc, #172]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d2:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d210      	bcs.n	8004202 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e0:	4b25      	ldr	r3, [pc, #148]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 020f 	bic.w	r2, r3, #15
 80041e8:	4923      	ldr	r1, [pc, #140]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f0:	4b21      	ldr	r3, [pc, #132]	@ (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e036      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420e:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4918      	ldr	r1, [pc, #96]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422c:	4b13      	ldr	r3, [pc, #76]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4910      	ldr	r1, [pc, #64]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004240:	f000 f826 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <HAL_RCC_ClockConfig+0x260>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	490c      	ldr	r1, [pc, #48]	@ (8004284 <HAL_RCC_ClockConfig+0x268>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <HAL_RCC_ClockConfig+0x26c>)
 800425e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_RCC_ClockConfig+0x270>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd fdb9 	bl	8001ddc <HAL_InitTick>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]

  return status;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40022000 	.word	0x40022000
 800427c:	40021000 	.word	0x40021000
 8004280:	04c4b400 	.word	0x04c4b400
 8004284:	080077e0 	.word	0x080077e0
 8004288:	20000348 	.word	0x20000348
 800428c:	2000034c 	.word	0x2000034c

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429e:	4b3e      	ldr	r3, [pc, #248]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d121      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11e      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d0:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e005      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042ec:	4a2b      	ldr	r2, [pc, #172]	@ (800439c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d102      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004308:	4b25      	ldr	r3, [pc, #148]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e004      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d101      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004314:	4b23      	ldr	r3, [pc, #140]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d134      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xa6>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xac>
 8004334:	e005      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004336:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	e005      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800433c:	4b19      	ldr	r3, [pc, #100]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800433e:	617b      	str	r3, [r7, #20]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004348:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	3301      	adds	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	fb03 f202 	mul.w	r2, r3, r2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0e5b      	lsrs	r3, r3, #25
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	3301      	adds	r3, #1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004388:	69bb      	ldr	r3, [r7, #24]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	@ 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	080077f8 	.word	0x080077f8
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	007a1200 	.word	0x007a1200

080043a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b03      	ldr	r3, [pc, #12]	@ (80043bc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000348 	.word	0x20000348

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4904      	ldr	r1, [pc, #16]	@ (80043e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	080077f0 	.word	0x080077f0

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f0:	f7ff ffda 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0adb      	lsrs	r3, r3, #11
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4904      	ldr	r1, [pc, #16]	@ (8004414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	080077f0 	.word	0x080077f0

08004418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004424:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004430:	f7ff f906 	bl	8003640 <HAL_PWREx_GetVoltageRange>
 8004434:	6178      	str	r0, [r7, #20]
 8004436:	e014      	b.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443c:	4a21      	ldr	r2, [pc, #132]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	@ 0x58
 8004444:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004450:	f7ff f8f6 	bl	8003640 <HAL_PWREx_GetVoltageRange>
 8004454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445a:	4a1a      	ldr	r2, [pc, #104]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004468:	d10b      	bne.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d913      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2ba0      	cmp	r3, #160	@ 0xa0
 8004474:	d902      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004476:	2302      	movs	r3, #2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e00d      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e00a      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b7f      	cmp	r3, #127	@ 0x7f
 8004486:	d902      	bls.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004488:	2302      	movs	r3, #2
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e004      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b70      	cmp	r3, #112	@ 0x70
 8004492:	d101      	bne.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004494:	2301      	movs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 020f 	bic.w	r2, r3, #15
 80044a0:	4909      	ldr	r1, [pc, #36]	@ (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044a8:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40022000 	.word	0x40022000

080044cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d00b      	beq.n	80044fa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d825      	bhi.n	8004534 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d008      	beq.n	8004500 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d11f      	bne.n	8004534 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044f4:	4b25      	ldr	r3, [pc, #148]	@ (800458c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044f6:	613b      	str	r3, [r7, #16]
    break;
 80044f8:	e01f      	b.n	800453a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044fa:	4b25      	ldr	r3, [pc, #148]	@ (8004590 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044fc:	613b      	str	r3, [r7, #16]
    break;
 80044fe:	e01c      	b.n	800453a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004500:	4b21      	ldr	r3, [pc, #132]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d107      	bne.n	800451c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800450c:	4b1e      	ldr	r3, [pc, #120]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e005      	b.n	8004528 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004528:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004530:	613b      	str	r3, [r7, #16]
    break;
 8004532:	e002      	b.n	800453a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
    break;
 8004538:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800453a:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	3301      	adds	r3, #1
 8004546:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004548:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	fb03 f202 	mul.w	r2, r3, r2
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0e5b      	lsrs	r3, r3, #25
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800457a:	683b      	ldr	r3, [r7, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40021000 	.word	0x40021000
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200
 8004594:	080077f8 	.word	0x080077f8

08004598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a4:	2300      	movs	r3, #0
 80045a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d040      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b8:	2b80      	cmp	r3, #128	@ 0x80
 80045ba:	d02a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045bc:	2b80      	cmp	r3, #128	@ 0x80
 80045be:	d825      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045c0:	2b60      	cmp	r3, #96	@ 0x60
 80045c2:	d026      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045c4:	2b60      	cmp	r3, #96	@ 0x60
 80045c6:	d821      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d006      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x42>
 80045cc:	2b40      	cmp	r3, #64	@ 0x40
 80045ce:	d81d      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d010      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045d8:	e018      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045da:	4b89      	ldr	r3, [pc, #548]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a88      	ldr	r2, [pc, #544]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e6:	e015      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb02 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3320      	adds	r3, #32
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fbed 	bl	8004de0 <RCCEx_PLLSAI2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	74fb      	strb	r3, [r7, #19]
      break;
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461a:	4b79      	ldr	r3, [pc, #484]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800461c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004620:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004628:	4975      	ldr	r1, [pc, #468]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004630:	e001      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d047      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464a:	d030      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004650:	d82a      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004656:	d02a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465c:	d824      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800465e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004662:	d008      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004668:	d81e      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d010      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004674:	e018      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004676:	4b62      	ldr	r3, [pc, #392]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4a61      	ldr	r2, [pc, #388]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004680:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fab4 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3320      	adds	r3, #32
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fb9f 	bl	8004de0 <RCCEx_PLLSAI2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	74fb      	strb	r3, [r7, #19]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80046ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b6:	4b52      	ldr	r3, [pc, #328]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	494e      	ldr	r1, [pc, #312]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80046cc:	e001      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 809f 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046e4:	4b46      	ldr	r3, [pc, #280]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	4b41      	ldr	r3, [pc, #260]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	4a40      	ldr	r2, [pc, #256]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	6593      	str	r3, [r2, #88]	@ 0x58
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004712:	2301      	movs	r3, #1
 8004714:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004716:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3a      	ldr	r2, [pc, #232]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004722:	f7fd fbab 	bl	8001e7c <HAL_GetTick>
 8004726:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004728:	e009      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd fba7 	bl	8001e7c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d902      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	74fb      	strb	r3, [r7, #19]
        break;
 800473c:	e005      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800473e:	4b31      	ldr	r3, [pc, #196]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ef      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d15b      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004750:	4b2b      	ldr	r3, [pc, #172]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01f      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	429a      	cmp	r2, r3
 800476c:	d019      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800476e:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004778:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800477a:	4b21      	ldr	r3, [pc, #132]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004780:	4a1f      	ldr	r2, [pc, #124]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800478a:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	4a1b      	ldr	r2, [pc, #108]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800479a:	4a19      	ldr	r2, [pc, #100]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fb66 	bl	8001e7c <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b2:	e00b      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd fb62 	bl	8001e7c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d902      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	74fb      	strb	r3, [r7, #19]
            break;
 80047ca:	e006      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ec      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10c      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e0:	4b07      	ldr	r3, [pc, #28]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	4903      	ldr	r1, [pc, #12]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047f8:	e008      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	74bb      	strb	r3, [r7, #18]
 80047fe:	e005      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480c:	7c7b      	ldrb	r3, [r7, #17]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4ba0      	ldr	r3, [pc, #640]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	4a9f      	ldr	r2, [pc, #636]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482a:	4b9a      	ldr	r3, [pc, #616]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	f023 0203 	bic.w	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	4996      	ldr	r1, [pc, #600]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800484c:	4b91      	ldr	r3, [pc, #580]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f023 020c 	bic.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	498e      	ldr	r1, [pc, #568]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800486e:	4b89      	ldr	r3, [pc, #548]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	4985      	ldr	r1, [pc, #532]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004890:	4b80      	ldr	r3, [pc, #512]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004896:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489e:	497d      	ldr	r1, [pc, #500]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b2:	4b78      	ldr	r3, [pc, #480]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c0:	4974      	ldr	r1, [pc, #464]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e2:	496c      	ldr	r1, [pc, #432]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f6:	4b67      	ldr	r3, [pc, #412]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004904:	4963      	ldr	r1, [pc, #396]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004918:	4b5e      	ldr	r3, [pc, #376]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004926:	495b      	ldr	r1, [pc, #364]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800493a:	4b56      	ldr	r3, [pc, #344]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	4952      	ldr	r1, [pc, #328]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800495c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	494a      	ldr	r1, [pc, #296]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497e:	4b45      	ldr	r3, [pc, #276]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498c:	4941      	ldr	r1, [pc, #260]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ae:	4939      	ldr	r1, [pc, #228]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d028      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c2:	4b34      	ldr	r3, [pc, #208]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d0:	4930      	ldr	r1, [pc, #192]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049e0:	d106      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ec:	60d3      	str	r3, [r2, #12]
 80049ee:	e011      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2101      	movs	r1, #1
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f8f9 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d04d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a28:	d108      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a30:	4a18      	ldr	r2, [pc, #96]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a3a:	e012      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a3c:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a42:	4a14      	ldr	r2, [pc, #80]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a5a:	490e      	ldr	r1, [pc, #56]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6c:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a76:	60d3      	str	r3, [r2, #12]
 8004a78:	e020      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a84:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a02      	ldr	r2, [pc, #8]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8e:	60d3      	str	r3, [r2, #12]
 8004a90:	e014      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f8a5 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d028      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ad6:	4947      	ldr	r1, [pc, #284]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b42      	ldr	r3, [pc, #264]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a41      	ldr	r2, [pc, #260]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
 8004af4:	e011      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f876 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b26:	4b33      	ldr	r3, [pc, #204]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b36:	492f      	ldr	r1, [pc, #188]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f851 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b70:	4b20      	ldr	r3, [pc, #128]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b76:	f023 0204 	bic.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b80:	491c      	ldr	r1, [pc, #112]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b94:	4b17      	ldr	r3, [pc, #92]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b9a:	f023 0218 	bic.w	r2, r3, #24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	4913      	ldr	r1, [pc, #76]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d017      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bc8:	490a      	ldr	r1, [pc, #40]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a04      	ldr	r2, [pc, #16]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c06:	4b72      	ldr	r3, [pc, #456]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00e      	beq.n	8004c30 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c12:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d103      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
       ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d142      	bne.n	8004cb0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e03f      	b.n	8004cb0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d018      	beq.n	8004c6a <RCCEx_PLLSAI1_Config+0x72>
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d825      	bhi.n	8004c88 <RCCEx_PLLSAI1_Config+0x90>
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d002      	beq.n	8004c46 <RCCEx_PLLSAI1_Config+0x4e>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d009      	beq.n	8004c58 <RCCEx_PLLSAI1_Config+0x60>
 8004c44:	e020      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c46:	4b62      	ldr	r3, [pc, #392]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11d      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c56:	e01a      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c58:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c68:	e013      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c6a:	4b59      	ldr	r3, [pc, #356]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c76:	4b56      	ldr	r3, [pc, #344]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c86:	e006      	b.n	8004c96 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e004      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d108      	bne.n	8004cb0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f023 0203 	bic.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4949      	ldr	r1, [pc, #292]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 8086 	bne.w	8004dc4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cb8:	4b45      	ldr	r3, [pc, #276]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a44      	ldr	r2, [pc, #272]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc4:	f7fd f8da 	bl	8001e7c <HAL_GetTick>
 8004cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cca:	e009      	b.n	8004ce0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ccc:	f7fd f8d6 	bl	8001e7c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d902      	bls.n	8004ce0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cde:	e005      	b.n	8004cec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1ef      	bne.n	8004ccc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d168      	bne.n	8004dc4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d113      	bne.n	8004d20 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf8:	4b35      	ldr	r3, [pc, #212]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	06d2      	lsls	r2, r2, #27
 8004d0c:	4311      	orrs	r1, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6852      	ldr	r2, [r2, #4]
 8004d12:	3a01      	subs	r2, #1
 8004d14:	0112      	lsls	r2, r2, #4
 8004d16:	430a      	orrs	r2, r1
 8004d18:	492d      	ldr	r1, [pc, #180]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]
 8004d1e:	e02d      	b.n	8004d7c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d115      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d26:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6892      	ldr	r2, [r2, #8]
 8004d32:	0211      	lsls	r1, r2, #8
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6912      	ldr	r2, [r2, #16]
 8004d38:	0852      	lsrs	r2, r2, #1
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	0552      	lsls	r2, r2, #21
 8004d3e:	4311      	orrs	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6852      	ldr	r2, [r2, #4]
 8004d44:	3a01      	subs	r2, #1
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	4921      	ldr	r1, [pc, #132]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
 8004d50:	e014      	b.n	8004d7c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d52:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	4b21      	ldr	r3, [pc, #132]	@ (8004ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6892      	ldr	r2, [r2, #8]
 8004d5e:	0211      	lsls	r1, r2, #8
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6952      	ldr	r2, [r2, #20]
 8004d64:	0852      	lsrs	r2, r2, #1
 8004d66:	3a01      	subs	r2, #1
 8004d68:	0652      	lsls	r2, r2, #25
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6852      	ldr	r2, [r2, #4]
 8004d70:	3a01      	subs	r2, #1
 8004d72:	0112      	lsls	r2, r2, #4
 8004d74:	430a      	orrs	r2, r1
 8004d76:	4916      	ldr	r1, [pc, #88]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d7c:	4b14      	ldr	r3, [pc, #80]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a13      	ldr	r2, [pc, #76]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fd f878 	bl	8001e7c <HAL_GetTick>
 8004d8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d8e:	e009      	b.n	8004da4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d90:	f7fd f874 	bl	8001e7c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d902      	bls.n	8004da4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	73fb      	strb	r3, [r7, #15]
          break;
 8004da2:	e005      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da4:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ef      	beq.n	8004d90 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	4904      	ldr	r1, [pc, #16]	@ (8004dd0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	07ff800f 	.word	0x07ff800f
 8004dd8:	ff9f800f 	.word	0xff9f800f
 8004ddc:	f9ff800f 	.word	0xf9ff800f

08004de0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dee:	4b72      	ldr	r3, [pc, #456]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00e      	beq.n	8004e18 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0203 	and.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d103      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d142      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e03f      	b.n	8004e98 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d018      	beq.n	8004e52 <RCCEx_PLLSAI2_Config+0x72>
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d825      	bhi.n	8004e70 <RCCEx_PLLSAI2_Config+0x90>
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d002      	beq.n	8004e2e <RCCEx_PLLSAI2_Config+0x4e>
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d009      	beq.n	8004e40 <RCCEx_PLLSAI2_Config+0x60>
 8004e2c:	e020      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2e:	4b62      	ldr	r3, [pc, #392]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11d      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3e:	e01a      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e40:	4b5d      	ldr	r3, [pc, #372]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e50:	e013      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e52:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5e:	4b56      	ldr	r3, [pc, #344]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6e:	e006      	b.n	8004e7e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e004      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d108      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e86:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 0203 	bic.w	r2, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4949      	ldr	r1, [pc, #292]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 8086 	bne.w	8004fac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ea0:	4b45      	ldr	r3, [pc, #276]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a44      	ldr	r2, [pc, #272]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fc ffe6 	bl	8001e7c <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb2:	e009      	b.n	8004ec8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eb4:	f7fc ffe2 	bl	8001e7c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec6:	e005      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ef      	bne.n	8004eb4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d168      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d113      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee0:	4b35      	ldr	r3, [pc, #212]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	4b35      	ldr	r3, [pc, #212]	@ (8004fbc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	0211      	lsls	r1, r2, #8
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68d2      	ldr	r2, [r2, #12]
 8004ef2:	06d2      	lsls	r2, r2, #27
 8004ef4:	4311      	orrs	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6852      	ldr	r2, [r2, #4]
 8004efa:	3a01      	subs	r2, #1
 8004efc:	0112      	lsls	r2, r2, #4
 8004efe:	430a      	orrs	r2, r1
 8004f00:	492d      	ldr	r1, [pc, #180]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	614b      	str	r3, [r1, #20]
 8004f06:	e02d      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d115      	bne.n	8004f3a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6892      	ldr	r2, [r2, #8]
 8004f1a:	0211      	lsls	r1, r2, #8
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6912      	ldr	r2, [r2, #16]
 8004f20:	0852      	lsrs	r2, r2, #1
 8004f22:	3a01      	subs	r2, #1
 8004f24:	0552      	lsls	r2, r2, #21
 8004f26:	4311      	orrs	r1, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6852      	ldr	r2, [r2, #4]
 8004f2c:	3a01      	subs	r2, #1
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	430a      	orrs	r2, r1
 8004f32:	4921      	ldr	r1, [pc, #132]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	614b      	str	r3, [r1, #20]
 8004f38:	e014      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	4b21      	ldr	r3, [pc, #132]	@ (8004fc4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6892      	ldr	r2, [r2, #8]
 8004f46:	0211      	lsls	r1, r2, #8
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6952      	ldr	r2, [r2, #20]
 8004f4c:	0852      	lsrs	r2, r2, #1
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	0652      	lsls	r2, r2, #25
 8004f52:	4311      	orrs	r1, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6852      	ldr	r2, [r2, #4]
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f64:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a13      	ldr	r2, [pc, #76]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fc ff84 	bl	8001e7c <HAL_GetTick>
 8004f74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f76:	e009      	b.n	8004f8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f78:	f7fc ff80 	bl	8001e7c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	73fb      	strb	r3, [r7, #15]
          break;
 8004f8a:	e005      	b.n	8004f98 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	4904      	ldr	r1, [pc, #16]	@ (8004fb8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	07ff800f 	.word	0x07ff800f
 8004fc0:	ff9f800f 	.word	0xff9f800f
 8004fc4:	f9ff800f 	.word	0xf9ff800f

08004fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e049      	b.n	800506e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fe14 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 fb38 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e047      	b.n	8005120 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a23      	ldr	r2, [pc, #140]	@ (800512c <HAL_TIM_Base_Start+0xb4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <HAL_TIM_Base_Start+0x66>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d018      	beq.n	80050de <HAL_TIM_Base_Start+0x66>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005130 <HAL_TIM_Base_Start+0xb8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_TIM_Base_Start+0x66>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005134 <HAL_TIM_Base_Start+0xbc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_TIM_Base_Start+0x66>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005138 <HAL_TIM_Base_Start+0xc0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIM_Base_Start+0x66>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	@ (800513c <HAL_TIM_Base_Start+0xc4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIM_Base_Start+0x66>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <HAL_TIM_Base_Start+0xc8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d115      	bne.n	800510a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	4b17      	ldr	r3, [pc, #92]	@ (8005144 <HAL_TIM_Base_Start+0xcc>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	d015      	beq.n	800511c <HAL_TIM_Base_Start+0xa4>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f6:	d011      	beq.n	800511c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	e008      	b.n	800511c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e000      	b.n	800511e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40013400 	.word	0x40013400
 8005140:	40014000 	.word	0x40014000
 8005144:	00010007 	.word	0x00010007

08005148 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	f241 1311 	movw	r3, #4369	@ 0x1111
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10f      	bne.n	8005180 <HAL_TIM_Base_Stop+0x38>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6a1a      	ldr	r2, [r3, #32]
 8005166:	f240 4344 	movw	r3, #1092	@ 0x444
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d107      	bne.n	8005180 <HAL_TIM_Base_Stop+0x38>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e04f      	b.n	8005250 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a23      	ldr	r2, [pc, #140]	@ (800525c <HAL_TIM_Base_Start_IT+0xc4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01d      	beq.n	800520e <HAL_TIM_Base_Start_IT+0x76>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d018      	beq.n	800520e <HAL_TIM_Base_Start_IT+0x76>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005260 <HAL_TIM_Base_Start_IT+0xc8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_TIM_Base_Start_IT+0x76>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005264 <HAL_TIM_Base_Start_IT+0xcc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_TIM_Base_Start_IT+0x76>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <HAL_TIM_Base_Start_IT+0xd0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_TIM_Base_Start_IT+0x76>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1b      	ldr	r2, [pc, #108]	@ (800526c <HAL_TIM_Base_Start_IT+0xd4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_TIM_Base_Start_IT+0x76>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <HAL_TIM_Base_Start_IT+0xd8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d115      	bne.n	800523a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <HAL_TIM_Base_Start_IT+0xdc>)
 8005216:	4013      	ands	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b06      	cmp	r3, #6
 800521e:	d015      	beq.n	800524c <HAL_TIM_Base_Start_IT+0xb4>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005226:	d011      	beq.n	800524c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	e008      	b.n	800524c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e000      	b.n	800524e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40014000 	.word	0x40014000
 8005274:	00010007 	.word	0x00010007

08005278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f9bc 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9ae 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f9bf 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0204 	mvn.w	r2, #4
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f996 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f988 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f999 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f970 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f962 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f973 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d020      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2208      	movs	r2, #8
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f94a 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f93c 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f94d 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0201 	mvn.w	r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f91a 	bl	8005618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fb07 	bl	8005a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00c      	beq.n	8005436 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800542e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 faff 	bl	8005a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f907 	bl	8005668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0220 	mvn.w	r2, #32
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fac7 	bl	8005a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_ConfigClockSource+0x1c>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0b6      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x18a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054de:	d03e      	beq.n	800555e <HAL_TIM_ConfigClockSource+0xd8>
 80054e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e4:	f200 8087 	bhi.w	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 80054e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ec:	f000 8086 	beq.w	80055fc <HAL_TIM_ConfigClockSource+0x176>
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f4:	d87f      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 80054f6:	2b70      	cmp	r3, #112	@ 0x70
 80054f8:	d01a      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0xaa>
 80054fa:	2b70      	cmp	r3, #112	@ 0x70
 80054fc:	d87b      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 80054fe:	2b60      	cmp	r3, #96	@ 0x60
 8005500:	d050      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x11e>
 8005502:	2b60      	cmp	r3, #96	@ 0x60
 8005504:	d877      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 8005506:	2b50      	cmp	r3, #80	@ 0x50
 8005508:	d03c      	beq.n	8005584 <HAL_TIM_ConfigClockSource+0xfe>
 800550a:	2b50      	cmp	r3, #80	@ 0x50
 800550c:	d873      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d058      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0x13e>
 8005512:	2b40      	cmp	r3, #64	@ 0x40
 8005514:	d86f      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 8005516:	2b30      	cmp	r3, #48	@ 0x30
 8005518:	d064      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0x15e>
 800551a:	2b30      	cmp	r3, #48	@ 0x30
 800551c:	d86b      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 800551e:	2b20      	cmp	r3, #32
 8005520:	d060      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0x15e>
 8005522:	2b20      	cmp	r3, #32
 8005524:	d867      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d05c      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0x15e>
 800552a:	2b10      	cmp	r3, #16
 800552c:	d05a      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0x15e>
 800552e:	e062      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005540:	f000 f9bc 	bl	80058bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005552:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
      break;
 800555c:	e04f      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556e:	f000 f9a5 	bl	80058bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005580:	609a      	str	r2, [r3, #8]
      break;
 8005582:	e03c      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005590:	461a      	mov	r2, r3
 8005592:	f000 f919 	bl	80057c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2150      	movs	r1, #80	@ 0x50
 800559c:	4618      	mov	r0, r3
 800559e:	f000 f972 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80055a2:	e02c      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b0:	461a      	mov	r2, r3
 80055b2:	f000 f938 	bl	8005826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2160      	movs	r1, #96	@ 0x60
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f962 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80055c2:	e01c      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d0:	461a      	mov	r2, r3
 80055d2:	f000 f8f9 	bl	80057c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2140      	movs	r1, #64	@ 0x40
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f952 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80055e2:	e00c      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f000 f949 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80055f4:	e003      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
      break;
 80055fa:	e000      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a46      	ldr	r2, [pc, #280]	@ (80057a8 <TIM_Base_SetConfig+0x12c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a43      	ldr	r2, [pc, #268]	@ (80057ac <TIM_Base_SetConfig+0x130>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a42      	ldr	r2, [pc, #264]	@ (80057b0 <TIM_Base_SetConfig+0x134>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a41      	ldr	r2, [pc, #260]	@ (80057b4 <TIM_Base_SetConfig+0x138>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a40      	ldr	r2, [pc, #256]	@ (80057b8 <TIM_Base_SetConfig+0x13c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a35      	ldr	r2, [pc, #212]	@ (80057a8 <TIM_Base_SetConfig+0x12c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056dc:	d01b      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a32      	ldr	r2, [pc, #200]	@ (80057ac <TIM_Base_SetConfig+0x130>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d017      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a31      	ldr	r2, [pc, #196]	@ (80057b0 <TIM_Base_SetConfig+0x134>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a30      	ldr	r2, [pc, #192]	@ (80057b4 <TIM_Base_SetConfig+0x138>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2f      	ldr	r2, [pc, #188]	@ (80057b8 <TIM_Base_SetConfig+0x13c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2e      	ldr	r2, [pc, #184]	@ (80057bc <TIM_Base_SetConfig+0x140>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2d      	ldr	r2, [pc, #180]	@ (80057c0 <TIM_Base_SetConfig+0x144>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2c      	ldr	r2, [pc, #176]	@ (80057c4 <TIM_Base_SetConfig+0x148>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a16      	ldr	r2, [pc, #88]	@ (80057a8 <TIM_Base_SetConfig+0x12c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00f      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a18      	ldr	r2, [pc, #96]	@ (80057b8 <TIM_Base_SetConfig+0x13c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a17      	ldr	r2, [pc, #92]	@ (80057bc <TIM_Base_SetConfig+0x140>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a16      	ldr	r2, [pc, #88]	@ (80057c0 <TIM_Base_SetConfig+0x144>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a15      	ldr	r2, [pc, #84]	@ (80057c4 <TIM_Base_SetConfig+0x148>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]
  }
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40000c00 	.word	0x40000c00
 80057b8:	40013400 	.word	0x40013400
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400
 80057c4:	40014800 	.word	0x40014800

080057c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 030a 	bic.w	r3, r3, #10
 8005804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005826:	b480      	push	{r7}
 8005828:	b087      	sub	sp, #28
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f043 0307 	orr.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e068      	b.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2e      	ldr	r2, [pc, #184]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2d      	ldr	r2, [pc, #180]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800594e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d018      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1a      	ldr	r2, [pc, #104]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a14      	ldr	r2, [pc, #80]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10c      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40014000 	.word	0x40014000

08005a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e042      	b.n	8005ae0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fc f875 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2224      	movs	r2, #36	@ 0x24
 8005a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fb24 	bl	80060e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f825 	bl	8005ae8 <UART_SetConfig>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e01b      	b.n	8005ae0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fba3 	bl	8006224 <UART_CheckIdleState>
 8005ade:	4603      	mov	r3, r0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aec:	b08c      	sub	sp, #48	@ 0x30
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4baa      	ldr	r3, [pc, #680]	@ (8005dc0 <UART_SetConfig+0x2d8>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a9f      	ldr	r2, [pc, #636]	@ (8005dc4 <UART_SetConfig+0x2dc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b50:	4313      	orrs	r3, r2
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b5e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	f023 010f 	bic.w	r1, r3, #15
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a90      	ldr	r2, [pc, #576]	@ (8005dc8 <UART_SetConfig+0x2e0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d125      	bne.n	8005bd8 <UART_SetConfig+0xf0>
 8005b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8005dcc <UART_SetConfig+0x2e4>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d81a      	bhi.n	8005bd0 <UART_SetConfig+0xe8>
 8005b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba0 <UART_SetConfig+0xb8>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bb1 	.word	0x08005bb1
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bc9 	.word	0x08005bc9
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bb6:	e116      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bbe:	e112      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bc6:	e10e      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e10a      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e106      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a7c      	ldr	r2, [pc, #496]	@ (8005dd0 <UART_SetConfig+0x2e8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d138      	bne.n	8005c54 <UART_SetConfig+0x16c>
 8005be2:	4b7a      	ldr	r3, [pc, #488]	@ (8005dcc <UART_SetConfig+0x2e4>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	f003 030c 	and.w	r3, r3, #12
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d82d      	bhi.n	8005c4c <UART_SetConfig+0x164>
 8005bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0x110>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c4d 	.word	0x08005c4d
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c4d 	.word	0x08005c4d
 8005c08:	08005c3d 	.word	0x08005c3d
 8005c0c:	08005c4d 	.word	0x08005c4d
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c4d 	.word	0x08005c4d
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	08005c4d 	.word	0x08005c4d
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c32:	e0d8      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3a:	e0d4      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c42:	e0d0      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4a:	e0cc      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	e0c8      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5e      	ldr	r2, [pc, #376]	@ (8005dd4 <UART_SetConfig+0x2ec>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d125      	bne.n	8005caa <UART_SetConfig+0x1c2>
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dcc <UART_SetConfig+0x2e4>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c68:	2b30      	cmp	r3, #48	@ 0x30
 8005c6a:	d016      	beq.n	8005c9a <UART_SetConfig+0x1b2>
 8005c6c:	2b30      	cmp	r3, #48	@ 0x30
 8005c6e:	d818      	bhi.n	8005ca2 <UART_SetConfig+0x1ba>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d00a      	beq.n	8005c8a <UART_SetConfig+0x1a2>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d814      	bhi.n	8005ca2 <UART_SetConfig+0x1ba>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <UART_SetConfig+0x19a>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d008      	beq.n	8005c92 <UART_SetConfig+0x1aa>
 8005c80:	e00f      	b.n	8005ca2 <UART_SetConfig+0x1ba>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c88:	e0ad      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c90:	e0a9      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c92:	2304      	movs	r3, #4
 8005c94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c98:	e0a5      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca0:	e0a1      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005ca2:	2310      	movs	r3, #16
 8005ca4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca8:	e09d      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a4a      	ldr	r2, [pc, #296]	@ (8005dd8 <UART_SetConfig+0x2f0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d125      	bne.n	8005d00 <UART_SetConfig+0x218>
 8005cb4:	4b45      	ldr	r3, [pc, #276]	@ (8005dcc <UART_SetConfig+0x2e4>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cc0:	d016      	beq.n	8005cf0 <UART_SetConfig+0x208>
 8005cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cc4:	d818      	bhi.n	8005cf8 <UART_SetConfig+0x210>
 8005cc6:	2b80      	cmp	r3, #128	@ 0x80
 8005cc8:	d00a      	beq.n	8005ce0 <UART_SetConfig+0x1f8>
 8005cca:	2b80      	cmp	r3, #128	@ 0x80
 8005ccc:	d814      	bhi.n	8005cf8 <UART_SetConfig+0x210>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <UART_SetConfig+0x1f0>
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d008      	beq.n	8005ce8 <UART_SetConfig+0x200>
 8005cd6:	e00f      	b.n	8005cf8 <UART_SetConfig+0x210>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cde:	e082      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	e07e      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e07a      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	e076      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfe:	e072      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a35      	ldr	r2, [pc, #212]	@ (8005ddc <UART_SetConfig+0x2f4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d12a      	bne.n	8005d60 <UART_SetConfig+0x278>
 8005d0a:	4b30      	ldr	r3, [pc, #192]	@ (8005dcc <UART_SetConfig+0x2e4>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d18:	d01a      	beq.n	8005d50 <UART_SetConfig+0x268>
 8005d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d1e:	d81b      	bhi.n	8005d58 <UART_SetConfig+0x270>
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d24:	d00c      	beq.n	8005d40 <UART_SetConfig+0x258>
 8005d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d2a:	d815      	bhi.n	8005d58 <UART_SetConfig+0x270>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <UART_SetConfig+0x250>
 8005d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d34:	d008      	beq.n	8005d48 <UART_SetConfig+0x260>
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x270>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	e052      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005d40:	2302      	movs	r3, #2
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	e04e      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e04a      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e046      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5e:	e042      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a17      	ldr	r2, [pc, #92]	@ (8005dc4 <UART_SetConfig+0x2dc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d13a      	bne.n	8005de0 <UART_SetConfig+0x2f8>
 8005d6a:	4b18      	ldr	r3, [pc, #96]	@ (8005dcc <UART_SetConfig+0x2e4>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d78:	d01a      	beq.n	8005db0 <UART_SetConfig+0x2c8>
 8005d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d7e:	d81b      	bhi.n	8005db8 <UART_SetConfig+0x2d0>
 8005d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d84:	d00c      	beq.n	8005da0 <UART_SetConfig+0x2b8>
 8005d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d8a:	d815      	bhi.n	8005db8 <UART_SetConfig+0x2d0>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <UART_SetConfig+0x2b0>
 8005d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d94:	d008      	beq.n	8005da8 <UART_SetConfig+0x2c0>
 8005d96:	e00f      	b.n	8005db8 <UART_SetConfig+0x2d0>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9e:	e022      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005da0:	2302      	movs	r3, #2
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da6:	e01e      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005da8:	2304      	movs	r3, #4
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dae:	e01a      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db6:	e016      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dbe:	e012      	b.n	8005de6 <UART_SetConfig+0x2fe>
 8005dc0:	cfff69f3 	.word	0xcfff69f3
 8005dc4:	40008000 	.word	0x40008000
 8005dc8:	40013800 	.word	0x40013800
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	40004400 	.word	0x40004400
 8005dd4:	40004800 	.word	0x40004800
 8005dd8:	40004c00 	.word	0x40004c00
 8005ddc:	40005000 	.word	0x40005000
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4aae      	ldr	r2, [pc, #696]	@ (80060a4 <UART_SetConfig+0x5bc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	f040 8097 	bne.w	8005f20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005df2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d823      	bhi.n	8005e42 <UART_SetConfig+0x35a>
 8005dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <UART_SetConfig+0x318>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e43 	.word	0x08005e43
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e43 	.word	0x08005e43
 8005e10:	08005e33 	.word	0x08005e33
 8005e14:	08005e43 	.word	0x08005e43
 8005e18:	08005e43 	.word	0x08005e43
 8005e1c:	08005e43 	.word	0x08005e43
 8005e20:	08005e3b 	.word	0x08005e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e24:	f7fe facc 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e2a:	e010      	b.n	8005e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e2c:	4b9e      	ldr	r3, [pc, #632]	@ (80060a8 <UART_SetConfig+0x5c0>)
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e30:	e00d      	b.n	8005e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e32:	f7fe fa2d 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005e36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e38:	e009      	b.n	8005e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e40:	e005      	b.n	8005e4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8130 	beq.w	80060b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	4a94      	ldr	r2, [pc, #592]	@ (80060ac <UART_SetConfig+0x5c4>)
 8005e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d305      	bcc.n	8005e86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d903      	bls.n	8005e8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e8c:	e113      	b.n	80060b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	2200      	movs	r2, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	60fa      	str	r2, [r7, #12]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	4a84      	ldr	r2, [pc, #528]	@ (80060ac <UART_SetConfig+0x5c4>)
 8005e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eb0:	f7fa fe44 	bl	8000b3c <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	020b      	lsls	r3, r1, #8
 8005ec6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005eca:	0202      	lsls	r2, r0, #8
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	6849      	ldr	r1, [r1, #4]
 8005ed0:	0849      	lsrs	r1, r1, #1
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	eb12 0804 	adds.w	r8, r2, r4
 8005edc:	eb43 0905 	adc.w	r9, r3, r5
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	469a      	mov	sl, r3
 8005ee8:	4693      	mov	fp, r2
 8005eea:	4652      	mov	r2, sl
 8005eec:	465b      	mov	r3, fp
 8005eee:	4640      	mov	r0, r8
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	f7fa fe23 	bl	8000b3c <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4613      	mov	r3, r2
 8005efc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f04:	d308      	bcc.n	8005f18 <UART_SetConfig+0x430>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0c:	d204      	bcs.n	8005f18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	e0ce      	b.n	80060b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f1e:	e0ca      	b.n	80060b6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f28:	d166      	bne.n	8005ff8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d827      	bhi.n	8005f82 <UART_SetConfig+0x49a>
 8005f32:	a201      	add	r2, pc, #4	@ (adr r2, 8005f38 <UART_SetConfig+0x450>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	08005f83 	.word	0x08005f83
 8005f48:	08005f73 	.word	0x08005f73
 8005f4c:	08005f83 	.word	0x08005f83
 8005f50:	08005f83 	.word	0x08005f83
 8005f54:	08005f83 	.word	0x08005f83
 8005f58:	08005f7b 	.word	0x08005f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7fe fa30 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f62:	e014      	b.n	8005f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f64:	f7fe fa42 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8005f68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f6a:	e010      	b.n	8005f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80060a8 <UART_SetConfig+0x5c0>)
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f70:	e00d      	b.n	8005f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f72:	f7fe f98d 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005f76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f78:	e009      	b.n	8005f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f80:	e005      	b.n	8005f8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8090 	beq.w	80060b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	4a44      	ldr	r2, [pc, #272]	@ (80060ac <UART_SetConfig+0x5c4>)
 8005f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa8:	005a      	lsls	r2, r3, #1
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	441a      	add	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	d916      	bls.n	8005ff0 <UART_SetConfig+0x508>
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc8:	d212      	bcs.n	8005ff0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f023 030f 	bic.w	r3, r3, #15
 8005fd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	8bfb      	ldrh	r3, [r7, #30]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	8bfa      	ldrh	r2, [r7, #30]
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	e062      	b.n	80060b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ff6:	e05e      	b.n	80060b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d828      	bhi.n	8006052 <UART_SetConfig+0x56a>
 8006000:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x520>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fe f9c8 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8006030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006032:	e014      	b.n	800605e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fe f9da 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8006038:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800603a:	e010      	b.n	800605e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <UART_SetConfig+0x5c0>)
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006040:	e00d      	b.n	800605e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fe f925 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8006046:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006048:	e009      	b.n	800605e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006050:	e005      	b.n	800605e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800605c:	bf00      	nop
    }

    if (pclk != 0U)
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d028      	beq.n	80060b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	4a10      	ldr	r2, [pc, #64]	@ (80060ac <UART_SetConfig+0x5c4>)
 800606a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606e:	461a      	mov	r2, r3
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	fbb3 f2f2 	udiv	r2, r3, r2
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	441a      	add	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	d910      	bls.n	80060b0 <UART_SetConfig+0x5c8>
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006094:	d20c      	bcs.n	80060b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	b29a      	uxth	r2, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
 80060a0:	e009      	b.n	80060b6 <UART_SetConfig+0x5ce>
 80060a2:	bf00      	nop
 80060a4:	40008000 	.word	0x40008000
 80060a8:	00f42400 	.word	0x00f42400
 80060ac:	08007828 	.word	0x08007828
      }
      else
      {
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2200      	movs	r2, #0
 80060ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3730      	adds	r7, #48	@ 0x30
 80060da:	46bd      	mov	sp, r7
 80060dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01a      	beq.n	80061f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061de:	d10a      	bne.n	80061f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	605a      	str	r2, [r3, #4]
  }
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b098      	sub	sp, #96	@ 0x60
 8006228:	af02      	add	r7, sp, #8
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006234:	f7fb fe22 	bl	8001e7c <HAL_GetTick>
 8006238:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d12f      	bne.n	80062a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006250:	2200      	movs	r2, #0
 8006252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f88e 	bl	8006378 <UART_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d022      	beq.n	80062a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006276:	653b      	str	r3, [r7, #80]	@ 0x50
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006280:	647b      	str	r3, [r7, #68]	@ 0x44
 8006282:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800628e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e063      	b.n	8006370 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d149      	bne.n	800634a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062be:	2200      	movs	r2, #0
 80062c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f857 	bl	8006378 <UART_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d03c      	beq.n	800634a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	623b      	str	r3, [r7, #32]
   return(result);
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80062f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e6      	bne.n	80062d0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	60fb      	str	r3, [r7, #12]
   return(result);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 0301 	bic.w	r3, r3, #1
 8006318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006322:	61fa      	str	r2, [r7, #28]
 8006324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	69b9      	ldr	r1, [r7, #24]
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	617b      	str	r3, [r7, #20]
   return(result);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e5      	bne.n	8006302 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e012      	b.n	8006370 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3758      	adds	r7, #88	@ 0x58
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006388:	e04f      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d04b      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fb fd73 	bl	8001e7c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e04e      	b.n	800644a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d037      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b80      	cmp	r3, #128	@ 0x80
 80063be:	d034      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b40      	cmp	r3, #64	@ 0x40
 80063c4:	d031      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d110      	bne.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2208      	movs	r2, #8
 80063da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f838 	bl	8006452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2208      	movs	r2, #8
 80063e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e029      	b.n	800644a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006404:	d111      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800640e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f81e 	bl	8006452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e00f      	b.n	800644a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4013      	ands	r3, r2
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	429a      	cmp	r2, r3
 8006438:	bf0c      	ite	eq
 800643a:	2301      	moveq	r3, #1
 800643c:	2300      	movne	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	429a      	cmp	r2, r3
 8006446:	d0a0      	beq.n	800638a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006452:	b480      	push	{r7}
 8006454:	b095      	sub	sp, #84	@ 0x54
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800646e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006478:	643b      	str	r3, [r7, #64]	@ 0x40
 800647a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800647e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e6      	bne.n	800645a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	61fb      	str	r3, [r7, #28]
   return(result);
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e3      	bne.n	800648c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d118      	bne.n	80064fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	613b      	str	r3, [r7, #16]
   return(result);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006512:	bf00      	nop
 8006514:	3754      	adds	r7, #84	@ 0x54
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_UARTEx_DisableFifoMode+0x16>
 8006530:	2302      	movs	r3, #2
 8006532:	e027      	b.n	8006584 <HAL_UARTEx_DisableFifoMode+0x66>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	@ 0x24
 8006540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0201 	bic.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006562:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e02d      	b.n	8006604 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	@ 0x24
 80065b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f84f 	bl	8006688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006620:	2302      	movs	r3, #2
 8006622:	e02d      	b.n	8006680 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2224      	movs	r2, #36	@ 0x24
 8006630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f811 	bl	8006688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066a8:	e031      	b.n	800670e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066aa:	2308      	movs	r3, #8
 80066ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066ae:	2308      	movs	r3, #8
 80066b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	0e5b      	lsrs	r3, r3, #25
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	0f5b      	lsrs	r3, r3, #29
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	7b3a      	ldrb	r2, [r7, #12]
 80066d6:	4911      	ldr	r1, [pc, #68]	@ (800671c <UARTEx_SetNbDataToProcess+0x94>)
 80066d8:	5c8a      	ldrb	r2, [r1, r2]
 80066da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066de:	7b3a      	ldrb	r2, [r7, #12]
 80066e0:	490f      	ldr	r1, [pc, #60]	@ (8006720 <UARTEx_SetNbDataToProcess+0x98>)
 80066e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	7b7a      	ldrb	r2, [r7, #13]
 80066f4:	4909      	ldr	r1, [pc, #36]	@ (800671c <UARTEx_SetNbDataToProcess+0x94>)
 80066f6:	5c8a      	ldrb	r2, [r1, r2]
 80066f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066fc:	7b7a      	ldrb	r2, [r7, #13]
 80066fe:	4908      	ldr	r1, [pc, #32]	@ (8006720 <UARTEx_SetNbDataToProcess+0x98>)
 8006700:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006702:	fb93 f3f2 	sdiv	r3, r3, r2
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	08007840 	.word	0x08007840
 8006720:	08007848 	.word	0x08007848

08006724 <memset>:
 8006724:	4402      	add	r2, r0
 8006726:	4603      	mov	r3, r0
 8006728:	4293      	cmp	r3, r2
 800672a:	d100      	bne.n	800672e <memset+0xa>
 800672c:	4770      	bx	lr
 800672e:	f803 1b01 	strb.w	r1, [r3], #1
 8006732:	e7f9      	b.n	8006728 <memset+0x4>

08006734 <__libc_init_array>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	4d0d      	ldr	r5, [pc, #52]	@ (800676c <__libc_init_array+0x38>)
 8006738:	4c0d      	ldr	r4, [pc, #52]	@ (8006770 <__libc_init_array+0x3c>)
 800673a:	1b64      	subs	r4, r4, r5
 800673c:	10a4      	asrs	r4, r4, #2
 800673e:	2600      	movs	r6, #0
 8006740:	42a6      	cmp	r6, r4
 8006742:	d109      	bne.n	8006758 <__libc_init_array+0x24>
 8006744:	4d0b      	ldr	r5, [pc, #44]	@ (8006774 <__libc_init_array+0x40>)
 8006746:	4c0c      	ldr	r4, [pc, #48]	@ (8006778 <__libc_init_array+0x44>)
 8006748:	f001 f83e 	bl	80077c8 <_init>
 800674c:	1b64      	subs	r4, r4, r5
 800674e:	10a4      	asrs	r4, r4, #2
 8006750:	2600      	movs	r6, #0
 8006752:	42a6      	cmp	r6, r4
 8006754:	d105      	bne.n	8006762 <__libc_init_array+0x2e>
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	f855 3b04 	ldr.w	r3, [r5], #4
 800675c:	4798      	blx	r3
 800675e:	3601      	adds	r6, #1
 8006760:	e7ee      	b.n	8006740 <__libc_init_array+0xc>
 8006762:	f855 3b04 	ldr.w	r3, [r5], #4
 8006766:	4798      	blx	r3
 8006768:	3601      	adds	r6, #1
 800676a:	e7f2      	b.n	8006752 <__libc_init_array+0x1e>
 800676c:	08007a30 	.word	0x08007a30
 8006770:	08007a30 	.word	0x08007a30
 8006774:	08007a30 	.word	0x08007a30
 8006778:	08007a34 	.word	0x08007a34
 800677c:	00000000 	.word	0x00000000

08006780 <sin>:
 8006780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006782:	ec53 2b10 	vmov	r2, r3, d0
 8006786:	4826      	ldr	r0, [pc, #152]	@ (8006820 <sin+0xa0>)
 8006788:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800678c:	4281      	cmp	r1, r0
 800678e:	d807      	bhi.n	80067a0 <sin+0x20>
 8006790:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006818 <sin+0x98>
 8006794:	2000      	movs	r0, #0
 8006796:	b005      	add	sp, #20
 8006798:	f85d eb04 	ldr.w	lr, [sp], #4
 800679c:	f000 b90c 	b.w	80069b8 <__kernel_sin>
 80067a0:	4820      	ldr	r0, [pc, #128]	@ (8006824 <sin+0xa4>)
 80067a2:	4281      	cmp	r1, r0
 80067a4:	d908      	bls.n	80067b8 <sin+0x38>
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	f7f9 fd2d 	bl	8000208 <__aeabi_dsub>
 80067ae:	ec41 0b10 	vmov	d0, r0, r1
 80067b2:	b005      	add	sp, #20
 80067b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80067b8:	4668      	mov	r0, sp
 80067ba:	f000 f9b9 	bl	8006b30 <__ieee754_rem_pio2>
 80067be:	f000 0003 	and.w	r0, r0, #3
 80067c2:	2801      	cmp	r0, #1
 80067c4:	d00c      	beq.n	80067e0 <sin+0x60>
 80067c6:	2802      	cmp	r0, #2
 80067c8:	d011      	beq.n	80067ee <sin+0x6e>
 80067ca:	b9e8      	cbnz	r0, 8006808 <sin+0x88>
 80067cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067d0:	ed9d 0b00 	vldr	d0, [sp]
 80067d4:	2001      	movs	r0, #1
 80067d6:	f000 f8ef 	bl	80069b8 <__kernel_sin>
 80067da:	ec51 0b10 	vmov	r0, r1, d0
 80067de:	e7e6      	b.n	80067ae <sin+0x2e>
 80067e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067e4:	ed9d 0b00 	vldr	d0, [sp]
 80067e8:	f000 f81e 	bl	8006828 <__kernel_cos>
 80067ec:	e7f5      	b.n	80067da <sin+0x5a>
 80067ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067f2:	ed9d 0b00 	vldr	d0, [sp]
 80067f6:	2001      	movs	r0, #1
 80067f8:	f000 f8de 	bl	80069b8 <__kernel_sin>
 80067fc:	ec53 2b10 	vmov	r2, r3, d0
 8006800:	4610      	mov	r0, r2
 8006802:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006806:	e7d2      	b.n	80067ae <sin+0x2e>
 8006808:	ed9d 1b02 	vldr	d1, [sp, #8]
 800680c:	ed9d 0b00 	vldr	d0, [sp]
 8006810:	f000 f80a 	bl	8006828 <__kernel_cos>
 8006814:	e7f2      	b.n	80067fc <sin+0x7c>
 8006816:	bf00      	nop
	...
 8006820:	3fe921fb 	.word	0x3fe921fb
 8006824:	7fefffff 	.word	0x7fefffff

08006828 <__kernel_cos>:
 8006828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	ec57 6b10 	vmov	r6, r7, d0
 8006830:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006834:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006838:	ed8d 1b00 	vstr	d1, [sp]
 800683c:	d206      	bcs.n	800684c <__kernel_cos+0x24>
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7fa f933 	bl	8000aac <__aeabi_d2iz>
 8006846:	2800      	cmp	r0, #0
 8006848:	f000 8088 	beq.w	800695c <__kernel_cos+0x134>
 800684c:	4632      	mov	r2, r6
 800684e:	463b      	mov	r3, r7
 8006850:	4630      	mov	r0, r6
 8006852:	4639      	mov	r1, r7
 8006854:	f7f9 fe90 	bl	8000578 <__aeabi_dmul>
 8006858:	4b51      	ldr	r3, [pc, #324]	@ (80069a0 <__kernel_cos+0x178>)
 800685a:	2200      	movs	r2, #0
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	f7f9 fe8a 	bl	8000578 <__aeabi_dmul>
 8006864:	a340      	add	r3, pc, #256	@ (adr r3, 8006968 <__kernel_cos+0x140>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	4682      	mov	sl, r0
 800686c:	468b      	mov	fp, r1
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	f7f9 fe81 	bl	8000578 <__aeabi_dmul>
 8006876:	a33e      	add	r3, pc, #248	@ (adr r3, 8006970 <__kernel_cos+0x148>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7f9 fcc6 	bl	800020c <__adddf3>
 8006880:	4622      	mov	r2, r4
 8006882:	462b      	mov	r3, r5
 8006884:	f7f9 fe78 	bl	8000578 <__aeabi_dmul>
 8006888:	a33b      	add	r3, pc, #236	@ (adr r3, 8006978 <__kernel_cos+0x150>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fcbb 	bl	8000208 <__aeabi_dsub>
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f7f9 fe6f 	bl	8000578 <__aeabi_dmul>
 800689a:	a339      	add	r3, pc, #228	@ (adr r3, 8006980 <__kernel_cos+0x158>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 fcb4 	bl	800020c <__adddf3>
 80068a4:	4622      	mov	r2, r4
 80068a6:	462b      	mov	r3, r5
 80068a8:	f7f9 fe66 	bl	8000578 <__aeabi_dmul>
 80068ac:	a336      	add	r3, pc, #216	@ (adr r3, 8006988 <__kernel_cos+0x160>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7f9 fca9 	bl	8000208 <__aeabi_dsub>
 80068b6:	4622      	mov	r2, r4
 80068b8:	462b      	mov	r3, r5
 80068ba:	f7f9 fe5d 	bl	8000578 <__aeabi_dmul>
 80068be:	a334      	add	r3, pc, #208	@ (adr r3, 8006990 <__kernel_cos+0x168>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fca2 	bl	800020c <__adddf3>
 80068c8:	4622      	mov	r2, r4
 80068ca:	462b      	mov	r3, r5
 80068cc:	f7f9 fe54 	bl	8000578 <__aeabi_dmul>
 80068d0:	4622      	mov	r2, r4
 80068d2:	462b      	mov	r3, r5
 80068d4:	f7f9 fe50 	bl	8000578 <__aeabi_dmul>
 80068d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068dc:	4604      	mov	r4, r0
 80068de:	460d      	mov	r5, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7f9 fe48 	bl	8000578 <__aeabi_dmul>
 80068e8:	460b      	mov	r3, r1
 80068ea:	4602      	mov	r2, r0
 80068ec:	4629      	mov	r1, r5
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7f9 fc8a 	bl	8000208 <__aeabi_dsub>
 80068f4:	4b2b      	ldr	r3, [pc, #172]	@ (80069a4 <__kernel_cos+0x17c>)
 80068f6:	4598      	cmp	r8, r3
 80068f8:	4606      	mov	r6, r0
 80068fa:	460f      	mov	r7, r1
 80068fc:	d810      	bhi.n	8006920 <__kernel_cos+0xf8>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4650      	mov	r0, sl
 8006904:	4659      	mov	r1, fp
 8006906:	f7f9 fc7f 	bl	8000208 <__aeabi_dsub>
 800690a:	460b      	mov	r3, r1
 800690c:	4926      	ldr	r1, [pc, #152]	@ (80069a8 <__kernel_cos+0x180>)
 800690e:	4602      	mov	r2, r0
 8006910:	2000      	movs	r0, #0
 8006912:	f7f9 fc79 	bl	8000208 <__aeabi_dsub>
 8006916:	ec41 0b10 	vmov	d0, r0, r1
 800691a:	b003      	add	sp, #12
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	4b22      	ldr	r3, [pc, #136]	@ (80069ac <__kernel_cos+0x184>)
 8006922:	4921      	ldr	r1, [pc, #132]	@ (80069a8 <__kernel_cos+0x180>)
 8006924:	4598      	cmp	r8, r3
 8006926:	bf8c      	ite	hi
 8006928:	4d21      	ldrhi	r5, [pc, #132]	@ (80069b0 <__kernel_cos+0x188>)
 800692a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800692e:	2400      	movs	r4, #0
 8006930:	4622      	mov	r2, r4
 8006932:	462b      	mov	r3, r5
 8006934:	2000      	movs	r0, #0
 8006936:	f7f9 fc67 	bl	8000208 <__aeabi_dsub>
 800693a:	4622      	mov	r2, r4
 800693c:	4680      	mov	r8, r0
 800693e:	4689      	mov	r9, r1
 8006940:	462b      	mov	r3, r5
 8006942:	4650      	mov	r0, sl
 8006944:	4659      	mov	r1, fp
 8006946:	f7f9 fc5f 	bl	8000208 <__aeabi_dsub>
 800694a:	4632      	mov	r2, r6
 800694c:	463b      	mov	r3, r7
 800694e:	f7f9 fc5b 	bl	8000208 <__aeabi_dsub>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	e7da      	b.n	8006912 <__kernel_cos+0xea>
 800695c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006998 <__kernel_cos+0x170>
 8006960:	e7db      	b.n	800691a <__kernel_cos+0xf2>
 8006962:	bf00      	nop
 8006964:	f3af 8000 	nop.w
 8006968:	be8838d4 	.word	0xbe8838d4
 800696c:	bda8fae9 	.word	0xbda8fae9
 8006970:	bdb4b1c4 	.word	0xbdb4b1c4
 8006974:	3e21ee9e 	.word	0x3e21ee9e
 8006978:	809c52ad 	.word	0x809c52ad
 800697c:	3e927e4f 	.word	0x3e927e4f
 8006980:	19cb1590 	.word	0x19cb1590
 8006984:	3efa01a0 	.word	0x3efa01a0
 8006988:	16c15177 	.word	0x16c15177
 800698c:	3f56c16c 	.word	0x3f56c16c
 8006990:	5555554c 	.word	0x5555554c
 8006994:	3fa55555 	.word	0x3fa55555
 8006998:	00000000 	.word	0x00000000
 800699c:	3ff00000 	.word	0x3ff00000
 80069a0:	3fe00000 	.word	0x3fe00000
 80069a4:	3fd33332 	.word	0x3fd33332
 80069a8:	3ff00000 	.word	0x3ff00000
 80069ac:	3fe90000 	.word	0x3fe90000
 80069b0:	3fd20000 	.word	0x3fd20000
 80069b4:	00000000 	.word	0x00000000

080069b8 <__kernel_sin>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	ec55 4b10 	vmov	r4, r5, d0
 80069c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80069c4:	b085      	sub	sp, #20
 80069c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80069ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 80069ce:	4680      	mov	r8, r0
 80069d0:	d205      	bcs.n	80069de <__kernel_sin+0x26>
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7fa f869 	bl	8000aac <__aeabi_d2iz>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d052      	beq.n	8006a84 <__kernel_sin+0xcc>
 80069de:	4622      	mov	r2, r4
 80069e0:	462b      	mov	r3, r5
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7f9 fdc7 	bl	8000578 <__aeabi_dmul>
 80069ea:	4682      	mov	sl, r0
 80069ec:	468b      	mov	fp, r1
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7f9 fdbf 	bl	8000578 <__aeabi_dmul>
 80069fa:	a342      	add	r3, pc, #264	@ (adr r3, 8006b04 <__kernel_sin+0x14c>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	e9cd 0100 	strd	r0, r1, [sp]
 8006a04:	4650      	mov	r0, sl
 8006a06:	4659      	mov	r1, fp
 8006a08:	f7f9 fdb6 	bl	8000578 <__aeabi_dmul>
 8006a0c:	a33f      	add	r3, pc, #252	@ (adr r3, 8006b0c <__kernel_sin+0x154>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fbf9 	bl	8000208 <__aeabi_dsub>
 8006a16:	4652      	mov	r2, sl
 8006a18:	465b      	mov	r3, fp
 8006a1a:	f7f9 fdad 	bl	8000578 <__aeabi_dmul>
 8006a1e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006b14 <__kernel_sin+0x15c>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fbf2 	bl	800020c <__adddf3>
 8006a28:	4652      	mov	r2, sl
 8006a2a:	465b      	mov	r3, fp
 8006a2c:	f7f9 fda4 	bl	8000578 <__aeabi_dmul>
 8006a30:	a33a      	add	r3, pc, #232	@ (adr r3, 8006b1c <__kernel_sin+0x164>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fbe7 	bl	8000208 <__aeabi_dsub>
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	f7f9 fd9b 	bl	8000578 <__aeabi_dmul>
 8006a42:	a338      	add	r3, pc, #224	@ (adr r3, 8006b24 <__kernel_sin+0x16c>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fbe0 	bl	800020c <__adddf3>
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460f      	mov	r7, r1
 8006a50:	f1b8 0f00 	cmp.w	r8, #0
 8006a54:	d11b      	bne.n	8006a8e <__kernel_sin+0xd6>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	f7f9 fd8b 	bl	8000578 <__aeabi_dmul>
 8006a62:	a325      	add	r3, pc, #148	@ (adr r3, 8006af8 <__kernel_sin+0x140>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 fbce 	bl	8000208 <__aeabi_dsub>
 8006a6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a70:	f7f9 fd82 	bl	8000578 <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fbc6 	bl	800020c <__adddf3>
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	ec45 4b10 	vmov	d0, r4, r5
 8006a88:	b005      	add	sp, #20
 8006a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a92:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <__kernel_sin+0x148>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	f7f9 fd6f 	bl	8000578 <__aeabi_dmul>
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	4689      	mov	r9, r1
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aa6:	f7f9 fd67 	bl	8000578 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	f7f9 fba9 	bl	8000208 <__aeabi_dsub>
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	465b      	mov	r3, fp
 8006aba:	f7f9 fd5d 	bl	8000578 <__aeabi_dmul>
 8006abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac2:	f7f9 fba1 	bl	8000208 <__aeabi_dsub>
 8006ac6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006af8 <__kernel_sin+0x140>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ad4:	f7f9 fd50 	bl	8000578 <__aeabi_dmul>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 fb94 	bl	800020c <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	f7f9 fb8c 	bl	8000208 <__aeabi_dsub>
 8006af0:	e7c6      	b.n	8006a80 <__kernel_sin+0xc8>
 8006af2:	bf00      	nop
 8006af4:	f3af 8000 	nop.w
 8006af8:	55555549 	.word	0x55555549
 8006afc:	3fc55555 	.word	0x3fc55555
 8006b00:	3fe00000 	.word	0x3fe00000
 8006b04:	5acfd57c 	.word	0x5acfd57c
 8006b08:	3de5d93a 	.word	0x3de5d93a
 8006b0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006b10:	3e5ae5e6 	.word	0x3e5ae5e6
 8006b14:	57b1fe7d 	.word	0x57b1fe7d
 8006b18:	3ec71de3 	.word	0x3ec71de3
 8006b1c:	19c161d5 	.word	0x19c161d5
 8006b20:	3f2a01a0 	.word	0x3f2a01a0
 8006b24:	1110f8a6 	.word	0x1110f8a6
 8006b28:	3f811111 	.word	0x3f811111
 8006b2c:	00000000 	.word	0x00000000

08006b30 <__ieee754_rem_pio2>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	ec57 6b10 	vmov	r6, r7, d0
 8006b38:	4bc5      	ldr	r3, [pc, #788]	@ (8006e50 <__ieee754_rem_pio2+0x320>)
 8006b3a:	b08d      	sub	sp, #52	@ 0x34
 8006b3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006b40:	4598      	cmp	r8, r3
 8006b42:	4604      	mov	r4, r0
 8006b44:	9704      	str	r7, [sp, #16]
 8006b46:	d807      	bhi.n	8006b58 <__ieee754_rem_pio2+0x28>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	ed80 0b00 	vstr	d0, [r0]
 8006b50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006b54:	2500      	movs	r5, #0
 8006b56:	e028      	b.n	8006baa <__ieee754_rem_pio2+0x7a>
 8006b58:	4bbe      	ldr	r3, [pc, #760]	@ (8006e54 <__ieee754_rem_pio2+0x324>)
 8006b5a:	4598      	cmp	r8, r3
 8006b5c:	d878      	bhi.n	8006c50 <__ieee754_rem_pio2+0x120>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	4dbd      	ldr	r5, [pc, #756]	@ (8006e58 <__ieee754_rem_pio2+0x328>)
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	4630      	mov	r0, r6
 8006b66:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006e18 <__ieee754_rem_pio2+0x2e8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	dd38      	ble.n	8006be2 <__ieee754_rem_pio2+0xb2>
 8006b70:	f7f9 fb4a 	bl	8000208 <__aeabi_dsub>
 8006b74:	45a8      	cmp	r8, r5
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	d01a      	beq.n	8006bb2 <__ieee754_rem_pio2+0x82>
 8006b7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006e20 <__ieee754_rem_pio2+0x2f0>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fb41 	bl	8000208 <__aeabi_dsub>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4639      	mov	r1, r7
 8006b92:	f7f9 fb39 	bl	8000208 <__aeabi_dsub>
 8006b96:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006e20 <__ieee754_rem_pio2+0x2f0>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fb34 	bl	8000208 <__aeabi_dsub>
 8006ba0:	e9c4 8900 	strd	r8, r9, [r4]
 8006ba4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ba8:	2501      	movs	r5, #1
 8006baa:	4628      	mov	r0, r5
 8006bac:	b00d      	add	sp, #52	@ 0x34
 8006bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006e28 <__ieee754_rem_pio2+0x2f8>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f7f9 fb26 	bl	8000208 <__aeabi_dsub>
 8006bbc:	a39c      	add	r3, pc, #624	@ (adr r3, 8006e30 <__ieee754_rem_pio2+0x300>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460f      	mov	r7, r1
 8006bc6:	f7f9 fb1f 	bl	8000208 <__aeabi_dsub>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7f9 fb17 	bl	8000208 <__aeabi_dsub>
 8006bda:	a395      	add	r3, pc, #596	@ (adr r3, 8006e30 <__ieee754_rem_pio2+0x300>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	e7dc      	b.n	8006b9c <__ieee754_rem_pio2+0x6c>
 8006be2:	f7f9 fb13 	bl	800020c <__adddf3>
 8006be6:	45a8      	cmp	r8, r5
 8006be8:	4606      	mov	r6, r0
 8006bea:	460f      	mov	r7, r1
 8006bec:	d018      	beq.n	8006c20 <__ieee754_rem_pio2+0xf0>
 8006bee:	a38c      	add	r3, pc, #560	@ (adr r3, 8006e20 <__ieee754_rem_pio2+0x2f0>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f7f9 fb0a 	bl	800020c <__adddf3>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	4689      	mov	r9, r1
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 fb00 	bl	8000208 <__aeabi_dsub>
 8006c08:	a385      	add	r3, pc, #532	@ (adr r3, 8006e20 <__ieee754_rem_pio2+0x2f0>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fafd 	bl	800020c <__adddf3>
 8006c12:	f04f 35ff 	mov.w	r5, #4294967295
 8006c16:	e9c4 8900 	strd	r8, r9, [r4]
 8006c1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c1e:	e7c4      	b.n	8006baa <__ieee754_rem_pio2+0x7a>
 8006c20:	a381      	add	r3, pc, #516	@ (adr r3, 8006e28 <__ieee754_rem_pio2+0x2f8>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f7f9 faf1 	bl	800020c <__adddf3>
 8006c2a:	a381      	add	r3, pc, #516	@ (adr r3, 8006e30 <__ieee754_rem_pio2+0x300>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	f7f9 faea 	bl	800020c <__adddf3>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4689      	mov	r9, r1
 8006c40:	4630      	mov	r0, r6
 8006c42:	4639      	mov	r1, r7
 8006c44:	f7f9 fae0 	bl	8000208 <__aeabi_dsub>
 8006c48:	a379      	add	r3, pc, #484	@ (adr r3, 8006e30 <__ieee754_rem_pio2+0x300>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	e7de      	b.n	8006c0e <__ieee754_rem_pio2+0xde>
 8006c50:	4b82      	ldr	r3, [pc, #520]	@ (8006e5c <__ieee754_rem_pio2+0x32c>)
 8006c52:	4598      	cmp	r8, r3
 8006c54:	f200 80d1 	bhi.w	8006dfa <__ieee754_rem_pio2+0x2ca>
 8006c58:	f000 f966 	bl	8006f28 <fabs>
 8006c5c:	ec57 6b10 	vmov	r6, r7, d0
 8006c60:	a375      	add	r3, pc, #468	@ (adr r3, 8006e38 <__ieee754_rem_pio2+0x308>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	4630      	mov	r0, r6
 8006c68:	4639      	mov	r1, r7
 8006c6a:	f7f9 fc85 	bl	8000578 <__aeabi_dmul>
 8006c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e60 <__ieee754_rem_pio2+0x330>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7f9 facb 	bl	800020c <__adddf3>
 8006c76:	f7f9 ff19 	bl	8000aac <__aeabi_d2iz>
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	f7f9 fc12 	bl	80004a4 <__aeabi_i2d>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c88:	a363      	add	r3, pc, #396	@ (adr r3, 8006e18 <__ieee754_rem_pio2+0x2e8>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 fc73 	bl	8000578 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4630      	mov	r0, r6
 8006c98:	4639      	mov	r1, r7
 8006c9a:	f7f9 fab5 	bl	8000208 <__aeabi_dsub>
 8006c9e:	a360      	add	r3, pc, #384	@ (adr r3, 8006e20 <__ieee754_rem_pio2+0x2f0>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	468b      	mov	fp, r1
 8006ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cac:	f7f9 fc64 	bl	8000578 <__aeabi_dmul>
 8006cb0:	2d1f      	cmp	r5, #31
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460f      	mov	r7, r1
 8006cb6:	dc0c      	bgt.n	8006cd2 <__ieee754_rem_pio2+0x1a2>
 8006cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8006e64 <__ieee754_rem_pio2+0x334>)
 8006cba:	1e6a      	subs	r2, r5, #1
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	4543      	cmp	r3, r8
 8006cc2:	d006      	beq.n	8006cd2 <__ieee754_rem_pio2+0x1a2>
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	4650      	mov	r0, sl
 8006cca:	4659      	mov	r1, fp
 8006ccc:	f7f9 fa9c 	bl	8000208 <__aeabi_dsub>
 8006cd0:	e00e      	b.n	8006cf0 <__ieee754_rem_pio2+0x1c0>
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	4659      	mov	r1, fp
 8006cda:	f7f9 fa95 	bl	8000208 <__aeabi_dsub>
 8006cde:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ce8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	dc02      	bgt.n	8006cf6 <__ieee754_rem_pio2+0x1c6>
 8006cf0:	e9c4 0100 	strd	r0, r1, [r4]
 8006cf4:	e039      	b.n	8006d6a <__ieee754_rem_pio2+0x23a>
 8006cf6:	a34c      	add	r3, pc, #304	@ (adr r3, 8006e28 <__ieee754_rem_pio2+0x2f8>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d00:	f7f9 fc3a 	bl	8000578 <__aeabi_dmul>
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	4659      	mov	r1, fp
 8006d10:	f7f9 fa7a 	bl	8000208 <__aeabi_dsub>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4680      	mov	r8, r0
 8006d1a:	4689      	mov	r9, r1
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	4659      	mov	r1, fp
 8006d20:	f7f9 fa72 	bl	8000208 <__aeabi_dsub>
 8006d24:	4632      	mov	r2, r6
 8006d26:	463b      	mov	r3, r7
 8006d28:	f7f9 fa6e 	bl	8000208 <__aeabi_dsub>
 8006d2c:	a340      	add	r3, pc, #256	@ (adr r3, 8006e30 <__ieee754_rem_pio2+0x300>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3a:	f7f9 fc1d 	bl	8000578 <__aeabi_dmul>
 8006d3e:	4632      	mov	r2, r6
 8006d40:	463b      	mov	r3, r7
 8006d42:	f7f9 fa61 	bl	8000208 <__aeabi_dsub>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460f      	mov	r7, r1
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fa59 	bl	8000208 <__aeabi_dsub>
 8006d56:	9a05      	ldr	r2, [sp, #20]
 8006d58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b31      	cmp	r3, #49	@ 0x31
 8006d60:	dc20      	bgt.n	8006da4 <__ieee754_rem_pio2+0x274>
 8006d62:	e9c4 0100 	strd	r0, r1, [r4]
 8006d66:	46c2      	mov	sl, r8
 8006d68:	46cb      	mov	fp, r9
 8006d6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006d6e:	4650      	mov	r0, sl
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	4659      	mov	r1, fp
 8006d76:	f7f9 fa47 	bl	8000208 <__aeabi_dsub>
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	f7f9 fa43 	bl	8000208 <__aeabi_dsub>
 8006d82:	9b04      	ldr	r3, [sp, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d8a:	f6bf af0e 	bge.w	8006baa <__ieee754_rem_pio2+0x7a>
 8006d8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d98:	f8c4 8000 	str.w	r8, [r4]
 8006d9c:	60a0      	str	r0, [r4, #8]
 8006d9e:	60e3      	str	r3, [r4, #12]
 8006da0:	426d      	negs	r5, r5
 8006da2:	e702      	b.n	8006baa <__ieee754_rem_pio2+0x7a>
 8006da4:	a326      	add	r3, pc, #152	@ (adr r3, 8006e40 <__ieee754_rem_pio2+0x310>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dae:	f7f9 fbe3 	bl	8000578 <__aeabi_dmul>
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4640      	mov	r0, r8
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	f7f9 fa23 	bl	8000208 <__aeabi_dsub>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4649      	mov	r1, r9
 8006dce:	f7f9 fa1b 	bl	8000208 <__aeabi_dsub>
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	f7f9 fa17 	bl	8000208 <__aeabi_dsub>
 8006dda:	a31b      	add	r3, pc, #108	@ (adr r3, 8006e48 <__ieee754_rem_pio2+0x318>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de8:	f7f9 fbc6 	bl	8000578 <__aeabi_dmul>
 8006dec:	4632      	mov	r2, r6
 8006dee:	463b      	mov	r3, r7
 8006df0:	f7f9 fa0a 	bl	8000208 <__aeabi_dsub>
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	e764      	b.n	8006cc4 <__ieee754_rem_pio2+0x194>
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <__ieee754_rem_pio2+0x338>)
 8006dfc:	4598      	cmp	r8, r3
 8006dfe:	d935      	bls.n	8006e6c <__ieee754_rem_pio2+0x33c>
 8006e00:	4632      	mov	r2, r6
 8006e02:	463b      	mov	r3, r7
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7f9 f9fe 	bl	8000208 <__aeabi_dsub>
 8006e0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e10:	e9c4 0100 	strd	r0, r1, [r4]
 8006e14:	e69e      	b.n	8006b54 <__ieee754_rem_pio2+0x24>
 8006e16:	bf00      	nop
 8006e18:	54400000 	.word	0x54400000
 8006e1c:	3ff921fb 	.word	0x3ff921fb
 8006e20:	1a626331 	.word	0x1a626331
 8006e24:	3dd0b461 	.word	0x3dd0b461
 8006e28:	1a600000 	.word	0x1a600000
 8006e2c:	3dd0b461 	.word	0x3dd0b461
 8006e30:	2e037073 	.word	0x2e037073
 8006e34:	3ba3198a 	.word	0x3ba3198a
 8006e38:	6dc9c883 	.word	0x6dc9c883
 8006e3c:	3fe45f30 	.word	0x3fe45f30
 8006e40:	2e000000 	.word	0x2e000000
 8006e44:	3ba3198a 	.word	0x3ba3198a
 8006e48:	252049c1 	.word	0x252049c1
 8006e4c:	397b839a 	.word	0x397b839a
 8006e50:	3fe921fb 	.word	0x3fe921fb
 8006e54:	4002d97b 	.word	0x4002d97b
 8006e58:	3ff921fb 	.word	0x3ff921fb
 8006e5c:	413921fb 	.word	0x413921fb
 8006e60:	3fe00000 	.word	0x3fe00000
 8006e64:	08007850 	.word	0x08007850
 8006e68:	7fefffff 	.word	0x7fefffff
 8006e6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006e70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006e74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006e78:	4630      	mov	r0, r6
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	f7f9 fe16 	bl	8000aac <__aeabi_d2iz>
 8006e80:	f7f9 fb10 	bl	80004a4 <__aeabi_i2d>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e90:	f7f9 f9ba 	bl	8000208 <__aeabi_dsub>
 8006e94:	4b22      	ldr	r3, [pc, #136]	@ (8006f20 <__ieee754_rem_pio2+0x3f0>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	f7f9 fb6e 	bl	8000578 <__aeabi_dmul>
 8006e9c:	460f      	mov	r7, r1
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	f7f9 fe04 	bl	8000aac <__aeabi_d2iz>
 8006ea4:	f7f9 fafe 	bl	80004a4 <__aeabi_i2d>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006eb4:	f7f9 f9a8 	bl	8000208 <__aeabi_dsub>
 8006eb8:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <__ieee754_rem_pio2+0x3f0>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f7f9 fb5c 	bl	8000578 <__aeabi_dmul>
 8006ec0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006ec4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006ec8:	f04f 0803 	mov.w	r8, #3
 8006ecc:	2600      	movs	r6, #0
 8006ece:	2700      	movs	r7, #0
 8006ed0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	46c2      	mov	sl, r8
 8006eda:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ede:	f7f9 fdb3 	bl	8000a48 <__aeabi_dcmpeq>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d1f4      	bne.n	8006ed0 <__ieee754_rem_pio2+0x3a0>
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <__ieee754_rem_pio2+0x3f4>)
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2302      	movs	r3, #2
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	462a      	mov	r2, r5
 8006ef0:	4653      	mov	r3, sl
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	a806      	add	r0, sp, #24
 8006ef6:	f000 f81f 	bl	8006f38 <__kernel_rem_pio2>
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	4605      	mov	r5, r0
 8006f00:	f6bf ae53 	bge.w	8006baa <__ieee754_rem_pio2+0x7a>
 8006f04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006f08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f0c:	e9c4 2300 	strd	r2, r3, [r4]
 8006f10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006f1c:	e740      	b.n	8006da0 <__ieee754_rem_pio2+0x270>
 8006f1e:	bf00      	nop
 8006f20:	41700000 	.word	0x41700000
 8006f24:	080078d0 	.word	0x080078d0

08006f28 <fabs>:
 8006f28:	ec51 0b10 	vmov	r0, r1, d0
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006f32:	ec43 2b10 	vmov	d0, r2, r3
 8006f36:	4770      	bx	lr

08006f38 <__kernel_rem_pio2>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	ed2d 8b02 	vpush	{d8}
 8006f40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006f44:	f112 0f14 	cmn.w	r2, #20
 8006f48:	9306      	str	r3, [sp, #24]
 8006f4a:	9104      	str	r1, [sp, #16]
 8006f4c:	4bc2      	ldr	r3, [pc, #776]	@ (8007258 <__kernel_rem_pio2+0x320>)
 8006f4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006f50:	9008      	str	r0, [sp, #32]
 8006f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	9b06      	ldr	r3, [sp, #24]
 8006f5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f5e:	bfa8      	it	ge
 8006f60:	1ed4      	subge	r4, r2, #3
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	bfb2      	itee	lt
 8006f66:	2400      	movlt	r4, #0
 8006f68:	2318      	movge	r3, #24
 8006f6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006f6e:	f06f 0317 	mvn.w	r3, #23
 8006f72:	fb04 3303 	mla	r3, r4, r3, r3
 8006f76:	eb03 0b02 	add.w	fp, r3, r2
 8006f7a:	9b00      	ldr	r3, [sp, #0]
 8006f7c:	9a05      	ldr	r2, [sp, #20]
 8006f7e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8007248 <__kernel_rem_pio2+0x310>
 8006f82:	eb03 0802 	add.w	r8, r3, r2
 8006f86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006f88:	1aa7      	subs	r7, r4, r2
 8006f8a:	ae20      	add	r6, sp, #128	@ 0x80
 8006f8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006f90:	2500      	movs	r5, #0
 8006f92:	4545      	cmp	r5, r8
 8006f94:	dd12      	ble.n	8006fbc <__kernel_rem_pio2+0x84>
 8006f96:	9b06      	ldr	r3, [sp, #24]
 8006f98:	aa20      	add	r2, sp, #128	@ 0x80
 8006f9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006f9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006fa2:	2700      	movs	r7, #0
 8006fa4:	9b00      	ldr	r3, [sp, #0]
 8006fa6:	429f      	cmp	r7, r3
 8006fa8:	dc2e      	bgt.n	8007008 <__kernel_rem_pio2+0xd0>
 8006faa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8007248 <__kernel_rem_pio2+0x310>
 8006fae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fb6:	46a8      	mov	r8, r5
 8006fb8:	2600      	movs	r6, #0
 8006fba:	e01b      	b.n	8006ff4 <__kernel_rem_pio2+0xbc>
 8006fbc:	42ef      	cmn	r7, r5
 8006fbe:	d407      	bmi.n	8006fd0 <__kernel_rem_pio2+0x98>
 8006fc0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006fc4:	f7f9 fa6e 	bl	80004a4 <__aeabi_i2d>
 8006fc8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7e0      	b.n	8006f92 <__kernel_rem_pio2+0x5a>
 8006fd0:	ec51 0b18 	vmov	r0, r1, d8
 8006fd4:	e7f8      	b.n	8006fc8 <__kernel_rem_pio2+0x90>
 8006fd6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006fda:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006fde:	f7f9 facb 	bl	8000578 <__aeabi_dmul>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fea:	f7f9 f90f 	bl	800020c <__adddf3>
 8006fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	9b05      	ldr	r3, [sp, #20]
 8006ff6:	429e      	cmp	r6, r3
 8006ff8:	dded      	ble.n	8006fd6 <__kernel_rem_pio2+0x9e>
 8006ffa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ffe:	3701      	adds	r7, #1
 8007000:	ecaa 7b02 	vstmia	sl!, {d7}
 8007004:	3508      	adds	r5, #8
 8007006:	e7cd      	b.n	8006fa4 <__kernel_rem_pio2+0x6c>
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	f8dd 8000 	ldr.w	r8, [sp]
 800700e:	aa0c      	add	r2, sp, #48	@ 0x30
 8007010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007014:	930a      	str	r3, [sp, #40]	@ 0x28
 8007016:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007018:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800701c:	9309      	str	r3, [sp, #36]	@ 0x24
 800701e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007024:	ab98      	add	r3, sp, #608	@ 0x260
 8007026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800702a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800702e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007032:	ac0c      	add	r4, sp, #48	@ 0x30
 8007034:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007036:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800703a:	46a1      	mov	r9, r4
 800703c:	46c2      	mov	sl, r8
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	dc77      	bgt.n	8007134 <__kernel_rem_pio2+0x1fc>
 8007044:	4658      	mov	r0, fp
 8007046:	ed9d 0b02 	vldr	d0, [sp, #8]
 800704a:	f000 fac5 	bl	80075d8 <scalbn>
 800704e:	ec57 6b10 	vmov	r6, r7, d0
 8007052:	2200      	movs	r2, #0
 8007054:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fa8c 	bl	8000578 <__aeabi_dmul>
 8007060:	ec41 0b10 	vmov	d0, r0, r1
 8007064:	f000 fb34 	bl	80076d0 <floor>
 8007068:	4b7c      	ldr	r3, [pc, #496]	@ (800725c <__kernel_rem_pio2+0x324>)
 800706a:	ec51 0b10 	vmov	r0, r1, d0
 800706e:	2200      	movs	r2, #0
 8007070:	f7f9 fa82 	bl	8000578 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 f8c4 	bl	8000208 <__aeabi_dsub>
 8007080:	460f      	mov	r7, r1
 8007082:	4606      	mov	r6, r0
 8007084:	f7f9 fd12 	bl	8000aac <__aeabi_d2iz>
 8007088:	9002      	str	r0, [sp, #8]
 800708a:	f7f9 fa0b 	bl	80004a4 <__aeabi_i2d>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4630      	mov	r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	f7f9 f8b7 	bl	8000208 <__aeabi_dsub>
 800709a:	f1bb 0f00 	cmp.w	fp, #0
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	dd6c      	ble.n	800717e <__kernel_rem_pio2+0x246>
 80070a4:	f108 31ff 	add.w	r1, r8, #4294967295
 80070a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80070aa:	9d02      	ldr	r5, [sp, #8]
 80070ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070b0:	f1cb 0018 	rsb	r0, fp, #24
 80070b4:	fa43 f200 	asr.w	r2, r3, r0
 80070b8:	4415      	add	r5, r2
 80070ba:	4082      	lsls	r2, r0
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	aa0c      	add	r2, sp, #48	@ 0x30
 80070c0:	9502      	str	r5, [sp, #8]
 80070c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80070c6:	f1cb 0217 	rsb	r2, fp, #23
 80070ca:	fa43 f902 	asr.w	r9, r3, r2
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	dd64      	ble.n	800719e <__kernel_rem_pio2+0x266>
 80070d4:	9b02      	ldr	r3, [sp, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	3301      	adds	r3, #1
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	4615      	mov	r5, r2
 80070de:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80070e2:	4590      	cmp	r8, r2
 80070e4:	f300 80a1 	bgt.w	800722a <__kernel_rem_pio2+0x2f2>
 80070e8:	f1bb 0f00 	cmp.w	fp, #0
 80070ec:	dd07      	ble.n	80070fe <__kernel_rem_pio2+0x1c6>
 80070ee:	f1bb 0f01 	cmp.w	fp, #1
 80070f2:	f000 80c1 	beq.w	8007278 <__kernel_rem_pio2+0x340>
 80070f6:	f1bb 0f02 	cmp.w	fp, #2
 80070fa:	f000 80c8 	beq.w	800728e <__kernel_rem_pio2+0x356>
 80070fe:	f1b9 0f02 	cmp.w	r9, #2
 8007102:	d14c      	bne.n	800719e <__kernel_rem_pio2+0x266>
 8007104:	4632      	mov	r2, r6
 8007106:	463b      	mov	r3, r7
 8007108:	4955      	ldr	r1, [pc, #340]	@ (8007260 <__kernel_rem_pio2+0x328>)
 800710a:	2000      	movs	r0, #0
 800710c:	f7f9 f87c 	bl	8000208 <__aeabi_dsub>
 8007110:	4606      	mov	r6, r0
 8007112:	460f      	mov	r7, r1
 8007114:	2d00      	cmp	r5, #0
 8007116:	d042      	beq.n	800719e <__kernel_rem_pio2+0x266>
 8007118:	4658      	mov	r0, fp
 800711a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8007250 <__kernel_rem_pio2+0x318>
 800711e:	f000 fa5b 	bl	80075d8 <scalbn>
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	ec53 2b10 	vmov	r2, r3, d0
 800712a:	f7f9 f86d 	bl	8000208 <__aeabi_dsub>
 800712e:	4606      	mov	r6, r0
 8007130:	460f      	mov	r7, r1
 8007132:	e034      	b.n	800719e <__kernel_rem_pio2+0x266>
 8007134:	4b4b      	ldr	r3, [pc, #300]	@ (8007264 <__kernel_rem_pio2+0x32c>)
 8007136:	2200      	movs	r2, #0
 8007138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800713c:	f7f9 fa1c 	bl	8000578 <__aeabi_dmul>
 8007140:	f7f9 fcb4 	bl	8000aac <__aeabi_d2iz>
 8007144:	f7f9 f9ae 	bl	80004a4 <__aeabi_i2d>
 8007148:	4b47      	ldr	r3, [pc, #284]	@ (8007268 <__kernel_rem_pio2+0x330>)
 800714a:	2200      	movs	r2, #0
 800714c:	4606      	mov	r6, r0
 800714e:	460f      	mov	r7, r1
 8007150:	f7f9 fa12 	bl	8000578 <__aeabi_dmul>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800715c:	f7f9 f854 	bl	8000208 <__aeabi_dsub>
 8007160:	f7f9 fca4 	bl	8000aac <__aeabi_d2iz>
 8007164:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007168:	f849 0b04 	str.w	r0, [r9], #4
 800716c:	4639      	mov	r1, r7
 800716e:	4630      	mov	r0, r6
 8007170:	f7f9 f84c 	bl	800020c <__adddf3>
 8007174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800717c:	e75f      	b.n	800703e <__kernel_rem_pio2+0x106>
 800717e:	d107      	bne.n	8007190 <__kernel_rem_pio2+0x258>
 8007180:	f108 33ff 	add.w	r3, r8, #4294967295
 8007184:	aa0c      	add	r2, sp, #48	@ 0x30
 8007186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800718e:	e79e      	b.n	80070ce <__kernel_rem_pio2+0x196>
 8007190:	4b36      	ldr	r3, [pc, #216]	@ (800726c <__kernel_rem_pio2+0x334>)
 8007192:	2200      	movs	r2, #0
 8007194:	f7f9 fc76 	bl	8000a84 <__aeabi_dcmpge>
 8007198:	2800      	cmp	r0, #0
 800719a:	d143      	bne.n	8007224 <__kernel_rem_pio2+0x2ec>
 800719c:	4681      	mov	r9, r0
 800719e:	2200      	movs	r2, #0
 80071a0:	2300      	movs	r3, #0
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 fc4f 	bl	8000a48 <__aeabi_dcmpeq>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	f000 80c1 	beq.w	8007332 <__kernel_rem_pio2+0x3fa>
 80071b0:	f108 33ff 	add.w	r3, r8, #4294967295
 80071b4:	2200      	movs	r2, #0
 80071b6:	9900      	ldr	r1, [sp, #0]
 80071b8:	428b      	cmp	r3, r1
 80071ba:	da70      	bge.n	800729e <__kernel_rem_pio2+0x366>
 80071bc:	2a00      	cmp	r2, #0
 80071be:	f000 808b 	beq.w	80072d8 <__kernel_rem_pio2+0x3a0>
 80071c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80071c8:	f1ab 0b18 	sub.w	fp, fp, #24
 80071cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f6      	beq.n	80071c2 <__kernel_rem_pio2+0x28a>
 80071d4:	4658      	mov	r0, fp
 80071d6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8007250 <__kernel_rem_pio2+0x318>
 80071da:	f000 f9fd 	bl	80075d8 <scalbn>
 80071de:	f108 0301 	add.w	r3, r8, #1
 80071e2:	00da      	lsls	r2, r3, #3
 80071e4:	9205      	str	r2, [sp, #20]
 80071e6:	ec55 4b10 	vmov	r4, r5, d0
 80071ea:	aa70      	add	r2, sp, #448	@ 0x1c0
 80071ec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8007264 <__kernel_rem_pio2+0x32c>
 80071f0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80071f4:	4646      	mov	r6, r8
 80071f6:	f04f 0a00 	mov.w	sl, #0
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	f280 80d1 	bge.w	80073a2 <__kernel_rem_pio2+0x46a>
 8007200:	4644      	mov	r4, r8
 8007202:	2c00      	cmp	r4, #0
 8007204:	f2c0 80ff 	blt.w	8007406 <__kernel_rem_pio2+0x4ce>
 8007208:	4b19      	ldr	r3, [pc, #100]	@ (8007270 <__kernel_rem_pio2+0x338>)
 800720a:	461f      	mov	r7, r3
 800720c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800720e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007212:	9306      	str	r3, [sp, #24]
 8007214:	f04f 0a00 	mov.w	sl, #0
 8007218:	f04f 0b00 	mov.w	fp, #0
 800721c:	2600      	movs	r6, #0
 800721e:	eba8 0504 	sub.w	r5, r8, r4
 8007222:	e0e4      	b.n	80073ee <__kernel_rem_pio2+0x4b6>
 8007224:	f04f 0902 	mov.w	r9, #2
 8007228:	e754      	b.n	80070d4 <__kernel_rem_pio2+0x19c>
 800722a:	f854 3b04 	ldr.w	r3, [r4], #4
 800722e:	bb0d      	cbnz	r5, 8007274 <__kernel_rem_pio2+0x33c>
 8007230:	b123      	cbz	r3, 800723c <__kernel_rem_pio2+0x304>
 8007232:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007236:	f844 3c04 	str.w	r3, [r4, #-4]
 800723a:	2301      	movs	r3, #1
 800723c:	3201      	adds	r2, #1
 800723e:	461d      	mov	r5, r3
 8007240:	e74f      	b.n	80070e2 <__kernel_rem_pio2+0x1aa>
 8007242:	bf00      	nop
 8007244:	f3af 8000 	nop.w
	...
 8007254:	3ff00000 	.word	0x3ff00000
 8007258:	08007a18 	.word	0x08007a18
 800725c:	40200000 	.word	0x40200000
 8007260:	3ff00000 	.word	0x3ff00000
 8007264:	3e700000 	.word	0x3e700000
 8007268:	41700000 	.word	0x41700000
 800726c:	3fe00000 	.word	0x3fe00000
 8007270:	080079d8 	.word	0x080079d8
 8007274:	1acb      	subs	r3, r1, r3
 8007276:	e7de      	b.n	8007236 <__kernel_rem_pio2+0x2fe>
 8007278:	f108 32ff 	add.w	r2, r8, #4294967295
 800727c:	ab0c      	add	r3, sp, #48	@ 0x30
 800727e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007282:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007286:	a90c      	add	r1, sp, #48	@ 0x30
 8007288:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800728c:	e737      	b.n	80070fe <__kernel_rem_pio2+0x1c6>
 800728e:	f108 32ff 	add.w	r2, r8, #4294967295
 8007292:	ab0c      	add	r3, sp, #48	@ 0x30
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800729c:	e7f3      	b.n	8007286 <__kernel_rem_pio2+0x34e>
 800729e:	a90c      	add	r1, sp, #48	@ 0x30
 80072a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	430a      	orrs	r2, r1
 80072a8:	e785      	b.n	80071b6 <__kernel_rem_pio2+0x27e>
 80072aa:	3401      	adds	r4, #1
 80072ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d0fa      	beq.n	80072aa <__kernel_rem_pio2+0x372>
 80072b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80072ba:	eb0d 0503 	add.w	r5, sp, r3
 80072be:	9b06      	ldr	r3, [sp, #24]
 80072c0:	aa20      	add	r2, sp, #128	@ 0x80
 80072c2:	4443      	add	r3, r8
 80072c4:	f108 0701 	add.w	r7, r8, #1
 80072c8:	3d98      	subs	r5, #152	@ 0x98
 80072ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80072ce:	4444      	add	r4, r8
 80072d0:	42bc      	cmp	r4, r7
 80072d2:	da04      	bge.n	80072de <__kernel_rem_pio2+0x3a6>
 80072d4:	46a0      	mov	r8, r4
 80072d6:	e6a2      	b.n	800701e <__kernel_rem_pio2+0xe6>
 80072d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072da:	2401      	movs	r4, #1
 80072dc:	e7e6      	b.n	80072ac <__kernel_rem_pio2+0x374>
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80072e4:	f7f9 f8de 	bl	80004a4 <__aeabi_i2d>
 80072e8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80075a8 <__kernel_rem_pio2+0x670>
 80072ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072f8:	46b2      	mov	sl, r6
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	9b05      	ldr	r3, [sp, #20]
 8007300:	4598      	cmp	r8, r3
 8007302:	dd05      	ble.n	8007310 <__kernel_rem_pio2+0x3d8>
 8007304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007308:	3701      	adds	r7, #1
 800730a:	eca5 7b02 	vstmia	r5!, {d7}
 800730e:	e7df      	b.n	80072d0 <__kernel_rem_pio2+0x398>
 8007310:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007314:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007318:	f7f9 f92e 	bl	8000578 <__aeabi_dmul>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007324:	f7f8 ff72 	bl	800020c <__adddf3>
 8007328:	f108 0801 	add.w	r8, r8, #1
 800732c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007330:	e7e5      	b.n	80072fe <__kernel_rem_pio2+0x3c6>
 8007332:	f1cb 0000 	rsb	r0, fp, #0
 8007336:	ec47 6b10 	vmov	d0, r6, r7
 800733a:	f000 f94d 	bl	80075d8 <scalbn>
 800733e:	ec55 4b10 	vmov	r4, r5, d0
 8007342:	4b9b      	ldr	r3, [pc, #620]	@ (80075b0 <__kernel_rem_pio2+0x678>)
 8007344:	2200      	movs	r2, #0
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fb9b 	bl	8000a84 <__aeabi_dcmpge>
 800734e:	b300      	cbz	r0, 8007392 <__kernel_rem_pio2+0x45a>
 8007350:	4b98      	ldr	r3, [pc, #608]	@ (80075b4 <__kernel_rem_pio2+0x67c>)
 8007352:	2200      	movs	r2, #0
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f9 f90e 	bl	8000578 <__aeabi_dmul>
 800735c:	f7f9 fba6 	bl	8000aac <__aeabi_d2iz>
 8007360:	4606      	mov	r6, r0
 8007362:	f7f9 f89f 	bl	80004a4 <__aeabi_i2d>
 8007366:	4b92      	ldr	r3, [pc, #584]	@ (80075b0 <__kernel_rem_pio2+0x678>)
 8007368:	2200      	movs	r2, #0
 800736a:	f7f9 f905 	bl	8000578 <__aeabi_dmul>
 800736e:	460b      	mov	r3, r1
 8007370:	4602      	mov	r2, r0
 8007372:	4629      	mov	r1, r5
 8007374:	4620      	mov	r0, r4
 8007376:	f7f8 ff47 	bl	8000208 <__aeabi_dsub>
 800737a:	f7f9 fb97 	bl	8000aac <__aeabi_d2iz>
 800737e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007380:	f10b 0b18 	add.w	fp, fp, #24
 8007384:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007388:	f108 0801 	add.w	r8, r8, #1
 800738c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007390:	e720      	b.n	80071d4 <__kernel_rem_pio2+0x29c>
 8007392:	4620      	mov	r0, r4
 8007394:	4629      	mov	r1, r5
 8007396:	f7f9 fb89 	bl	8000aac <__aeabi_d2iz>
 800739a:	ab0c      	add	r3, sp, #48	@ 0x30
 800739c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80073a0:	e718      	b.n	80071d4 <__kernel_rem_pio2+0x29c>
 80073a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80073a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80073a8:	f7f9 f87c 	bl	80004a4 <__aeabi_i2d>
 80073ac:	4622      	mov	r2, r4
 80073ae:	462b      	mov	r3, r5
 80073b0:	f7f9 f8e2 	bl	8000578 <__aeabi_dmul>
 80073b4:	4652      	mov	r2, sl
 80073b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80073ba:	465b      	mov	r3, fp
 80073bc:	4620      	mov	r0, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	f7f9 f8da 	bl	8000578 <__aeabi_dmul>
 80073c4:	3e01      	subs	r6, #1
 80073c6:	4604      	mov	r4, r0
 80073c8:	460d      	mov	r5, r1
 80073ca:	e716      	b.n	80071fa <__kernel_rem_pio2+0x2c2>
 80073cc:	9906      	ldr	r1, [sp, #24]
 80073ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80073d2:	9106      	str	r1, [sp, #24]
 80073d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80073d8:	f7f9 f8ce 	bl	8000578 <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4650      	mov	r0, sl
 80073e2:	4659      	mov	r1, fp
 80073e4:	f7f8 ff12 	bl	800020c <__adddf3>
 80073e8:	3601      	adds	r6, #1
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	9b00      	ldr	r3, [sp, #0]
 80073f0:	429e      	cmp	r6, r3
 80073f2:	dc01      	bgt.n	80073f8 <__kernel_rem_pio2+0x4c0>
 80073f4:	42ae      	cmp	r6, r5
 80073f6:	dde9      	ble.n	80073cc <__kernel_rem_pio2+0x494>
 80073f8:	ab48      	add	r3, sp, #288	@ 0x120
 80073fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80073fe:	e9c5 ab00 	strd	sl, fp, [r5]
 8007402:	3c01      	subs	r4, #1
 8007404:	e6fd      	b.n	8007202 <__kernel_rem_pio2+0x2ca>
 8007406:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007408:	2b02      	cmp	r3, #2
 800740a:	dc0b      	bgt.n	8007424 <__kernel_rem_pio2+0x4ec>
 800740c:	2b00      	cmp	r3, #0
 800740e:	dc35      	bgt.n	800747c <__kernel_rem_pio2+0x544>
 8007410:	d059      	beq.n	80074c6 <__kernel_rem_pio2+0x58e>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	f003 0007 	and.w	r0, r3, #7
 8007418:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800741c:	ecbd 8b02 	vpop	{d8}
 8007420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007424:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007426:	2b03      	cmp	r3, #3
 8007428:	d1f3      	bne.n	8007412 <__kernel_rem_pio2+0x4da>
 800742a:	9b05      	ldr	r3, [sp, #20]
 800742c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007430:	eb0d 0403 	add.w	r4, sp, r3
 8007434:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007438:	4625      	mov	r5, r4
 800743a:	46c2      	mov	sl, r8
 800743c:	f1ba 0f00 	cmp.w	sl, #0
 8007440:	dc69      	bgt.n	8007516 <__kernel_rem_pio2+0x5de>
 8007442:	4645      	mov	r5, r8
 8007444:	2d01      	cmp	r5, #1
 8007446:	f300 8087 	bgt.w	8007558 <__kernel_rem_pio2+0x620>
 800744a:	9c05      	ldr	r4, [sp, #20]
 800744c:	ab48      	add	r3, sp, #288	@ 0x120
 800744e:	441c      	add	r4, r3
 8007450:	2000      	movs	r0, #0
 8007452:	2100      	movs	r1, #0
 8007454:	f1b8 0f01 	cmp.w	r8, #1
 8007458:	f300 809c 	bgt.w	8007594 <__kernel_rem_pio2+0x65c>
 800745c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8007460:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	f040 80a6 	bne.w	80075b8 <__kernel_rem_pio2+0x680>
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	e9c3 5600 	strd	r5, r6, [r3]
 8007472:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007476:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800747a:	e7ca      	b.n	8007412 <__kernel_rem_pio2+0x4da>
 800747c:	9d05      	ldr	r5, [sp, #20]
 800747e:	ab48      	add	r3, sp, #288	@ 0x120
 8007480:	441d      	add	r5, r3
 8007482:	4644      	mov	r4, r8
 8007484:	2000      	movs	r0, #0
 8007486:	2100      	movs	r1, #0
 8007488:	2c00      	cmp	r4, #0
 800748a:	da35      	bge.n	80074f8 <__kernel_rem_pio2+0x5c0>
 800748c:	f1b9 0f00 	cmp.w	r9, #0
 8007490:	d038      	beq.n	8007504 <__kernel_rem_pio2+0x5cc>
 8007492:	4602      	mov	r2, r0
 8007494:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007498:	9c04      	ldr	r4, [sp, #16]
 800749a:	e9c4 2300 	strd	r2, r3, [r4]
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80074a6:	f7f8 feaf 	bl	8000208 <__aeabi_dsub>
 80074aa:	ad4a      	add	r5, sp, #296	@ 0x128
 80074ac:	2401      	movs	r4, #1
 80074ae:	45a0      	cmp	r8, r4
 80074b0:	da2b      	bge.n	800750a <__kernel_rem_pio2+0x5d2>
 80074b2:	f1b9 0f00 	cmp.w	r9, #0
 80074b6:	d002      	beq.n	80074be <__kernel_rem_pio2+0x586>
 80074b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074bc:	4619      	mov	r1, r3
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80074c4:	e7a5      	b.n	8007412 <__kernel_rem_pio2+0x4da>
 80074c6:	9c05      	ldr	r4, [sp, #20]
 80074c8:	ab48      	add	r3, sp, #288	@ 0x120
 80074ca:	441c      	add	r4, r3
 80074cc:	2000      	movs	r0, #0
 80074ce:	2100      	movs	r1, #0
 80074d0:	f1b8 0f00 	cmp.w	r8, #0
 80074d4:	da09      	bge.n	80074ea <__kernel_rem_pio2+0x5b2>
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	d002      	beq.n	80074e2 <__kernel_rem_pio2+0x5aa>
 80074dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074e0:	4619      	mov	r1, r3
 80074e2:	9b04      	ldr	r3, [sp, #16]
 80074e4:	e9c3 0100 	strd	r0, r1, [r3]
 80074e8:	e793      	b.n	8007412 <__kernel_rem_pio2+0x4da>
 80074ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80074ee:	f7f8 fe8d 	bl	800020c <__adddf3>
 80074f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80074f6:	e7eb      	b.n	80074d0 <__kernel_rem_pio2+0x598>
 80074f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80074fc:	f7f8 fe86 	bl	800020c <__adddf3>
 8007500:	3c01      	subs	r4, #1
 8007502:	e7c1      	b.n	8007488 <__kernel_rem_pio2+0x550>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	e7c6      	b.n	8007498 <__kernel_rem_pio2+0x560>
 800750a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800750e:	f7f8 fe7d 	bl	800020c <__adddf3>
 8007512:	3401      	adds	r4, #1
 8007514:	e7cb      	b.n	80074ae <__kernel_rem_pio2+0x576>
 8007516:	ed35 7b02 	vldmdb	r5!, {d7}
 800751a:	ed8d 7b00 	vstr	d7, [sp]
 800751e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007526:	ec53 2b17 	vmov	r2, r3, d7
 800752a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800752e:	f7f8 fe6d 	bl	800020c <__adddf3>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4606      	mov	r6, r0
 8007538:	460f      	mov	r7, r1
 800753a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800753e:	f7f8 fe63 	bl	8000208 <__aeabi_dsub>
 8007542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007546:	f7f8 fe61 	bl	800020c <__adddf3>
 800754a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800754e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007552:	e9c5 6700 	strd	r6, r7, [r5]
 8007556:	e771      	b.n	800743c <__kernel_rem_pio2+0x504>
 8007558:	ed34 7b02 	vldmdb	r4!, {d7}
 800755c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007560:	ec51 0b17 	vmov	r0, r1, d7
 8007564:	4652      	mov	r2, sl
 8007566:	465b      	mov	r3, fp
 8007568:	ed8d 7b00 	vstr	d7, [sp]
 800756c:	f7f8 fe4e 	bl	800020c <__adddf3>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4606      	mov	r6, r0
 8007576:	460f      	mov	r7, r1
 8007578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800757c:	f7f8 fe44 	bl	8000208 <__aeabi_dsub>
 8007580:	4652      	mov	r2, sl
 8007582:	465b      	mov	r3, fp
 8007584:	f7f8 fe42 	bl	800020c <__adddf3>
 8007588:	3d01      	subs	r5, #1
 800758a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800758e:	e9c4 6700 	strd	r6, r7, [r4]
 8007592:	e757      	b.n	8007444 <__kernel_rem_pio2+0x50c>
 8007594:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007598:	f7f8 fe38 	bl	800020c <__adddf3>
 800759c:	f108 38ff 	add.w	r8, r8, #4294967295
 80075a0:	e758      	b.n	8007454 <__kernel_rem_pio2+0x51c>
 80075a2:	bf00      	nop
 80075a4:	f3af 8000 	nop.w
	...
 80075b0:	41700000 	.word	0x41700000
 80075b4:	3e700000 	.word	0x3e700000
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	9a04      	ldr	r2, [sp, #16]
 80075bc:	601d      	str	r5, [r3, #0]
 80075be:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80075c2:	605c      	str	r4, [r3, #4]
 80075c4:	609f      	str	r7, [r3, #8]
 80075c6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80075ca:	60d3      	str	r3, [r2, #12]
 80075cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80075d0:	6110      	str	r0, [r2, #16]
 80075d2:	6153      	str	r3, [r2, #20]
 80075d4:	e71d      	b.n	8007412 <__kernel_rem_pio2+0x4da>
 80075d6:	bf00      	nop

080075d8 <scalbn>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	ec55 4b10 	vmov	r4, r5, d0
 80075de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80075e2:	4606      	mov	r6, r0
 80075e4:	462b      	mov	r3, r5
 80075e6:	b991      	cbnz	r1, 800760e <scalbn+0x36>
 80075e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80075ec:	4323      	orrs	r3, r4
 80075ee:	d03b      	beq.n	8007668 <scalbn+0x90>
 80075f0:	4b33      	ldr	r3, [pc, #204]	@ (80076c0 <scalbn+0xe8>)
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	2200      	movs	r2, #0
 80075f8:	f7f8 ffbe 	bl	8000578 <__aeabi_dmul>
 80075fc:	4b31      	ldr	r3, [pc, #196]	@ (80076c4 <scalbn+0xec>)
 80075fe:	429e      	cmp	r6, r3
 8007600:	4604      	mov	r4, r0
 8007602:	460d      	mov	r5, r1
 8007604:	da0f      	bge.n	8007626 <scalbn+0x4e>
 8007606:	a326      	add	r3, pc, #152	@ (adr r3, 80076a0 <scalbn+0xc8>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	e01e      	b.n	800764c <scalbn+0x74>
 800760e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007612:	4291      	cmp	r1, r2
 8007614:	d10b      	bne.n	800762e <scalbn+0x56>
 8007616:	4622      	mov	r2, r4
 8007618:	4620      	mov	r0, r4
 800761a:	4629      	mov	r1, r5
 800761c:	f7f8 fdf6 	bl	800020c <__adddf3>
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	e020      	b.n	8007668 <scalbn+0x90>
 8007626:	460b      	mov	r3, r1
 8007628:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800762c:	3936      	subs	r1, #54	@ 0x36
 800762e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007632:	4296      	cmp	r6, r2
 8007634:	dd0d      	ble.n	8007652 <scalbn+0x7a>
 8007636:	2d00      	cmp	r5, #0
 8007638:	a11b      	add	r1, pc, #108	@ (adr r1, 80076a8 <scalbn+0xd0>)
 800763a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800763e:	da02      	bge.n	8007646 <scalbn+0x6e>
 8007640:	a11b      	add	r1, pc, #108	@ (adr r1, 80076b0 <scalbn+0xd8>)
 8007642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007646:	a318      	add	r3, pc, #96	@ (adr r3, 80076a8 <scalbn+0xd0>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 ff94 	bl	8000578 <__aeabi_dmul>
 8007650:	e7e6      	b.n	8007620 <scalbn+0x48>
 8007652:	1872      	adds	r2, r6, r1
 8007654:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007658:	428a      	cmp	r2, r1
 800765a:	dcec      	bgt.n	8007636 <scalbn+0x5e>
 800765c:	2a00      	cmp	r2, #0
 800765e:	dd06      	ble.n	800766e <scalbn+0x96>
 8007660:	f36f 531e 	bfc	r3, #20, #11
 8007664:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007668:	ec45 4b10 	vmov	d0, r4, r5
 800766c:	bd70      	pop	{r4, r5, r6, pc}
 800766e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007672:	da08      	bge.n	8007686 <scalbn+0xae>
 8007674:	2d00      	cmp	r5, #0
 8007676:	a10a      	add	r1, pc, #40	@ (adr r1, 80076a0 <scalbn+0xc8>)
 8007678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800767c:	dac3      	bge.n	8007606 <scalbn+0x2e>
 800767e:	a10e      	add	r1, pc, #56	@ (adr r1, 80076b8 <scalbn+0xe0>)
 8007680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007684:	e7bf      	b.n	8007606 <scalbn+0x2e>
 8007686:	3236      	adds	r2, #54	@ 0x36
 8007688:	f36f 531e 	bfc	r3, #20, #11
 800768c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007690:	4620      	mov	r0, r4
 8007692:	4b0d      	ldr	r3, [pc, #52]	@ (80076c8 <scalbn+0xf0>)
 8007694:	4629      	mov	r1, r5
 8007696:	2200      	movs	r2, #0
 8007698:	e7d8      	b.n	800764c <scalbn+0x74>
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w
 80076a0:	c2f8f359 	.word	0xc2f8f359
 80076a4:	01a56e1f 	.word	0x01a56e1f
 80076a8:	8800759c 	.word	0x8800759c
 80076ac:	7e37e43c 	.word	0x7e37e43c
 80076b0:	8800759c 	.word	0x8800759c
 80076b4:	fe37e43c 	.word	0xfe37e43c
 80076b8:	c2f8f359 	.word	0xc2f8f359
 80076bc:	81a56e1f 	.word	0x81a56e1f
 80076c0:	43500000 	.word	0x43500000
 80076c4:	ffff3cb0 	.word	0xffff3cb0
 80076c8:	3c900000 	.word	0x3c900000
 80076cc:	00000000 	.word	0x00000000

080076d0 <floor>:
 80076d0:	ec51 0b10 	vmov	r0, r1, d0
 80076d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80076e0:	2e13      	cmp	r6, #19
 80076e2:	460c      	mov	r4, r1
 80076e4:	4605      	mov	r5, r0
 80076e6:	4680      	mov	r8, r0
 80076e8:	dc34      	bgt.n	8007754 <floor+0x84>
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	da17      	bge.n	800771e <floor+0x4e>
 80076ee:	a332      	add	r3, pc, #200	@ (adr r3, 80077b8 <floor+0xe8>)
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f7f8 fd8a 	bl	800020c <__adddf3>
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	f7f9 f9cc 	bl	8000a98 <__aeabi_dcmpgt>
 8007700:	b150      	cbz	r0, 8007718 <floor+0x48>
 8007702:	2c00      	cmp	r4, #0
 8007704:	da55      	bge.n	80077b2 <floor+0xe2>
 8007706:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800770a:	432c      	orrs	r4, r5
 800770c:	2500      	movs	r5, #0
 800770e:	42ac      	cmp	r4, r5
 8007710:	4c2b      	ldr	r4, [pc, #172]	@ (80077c0 <floor+0xf0>)
 8007712:	bf08      	it	eq
 8007714:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007718:	4621      	mov	r1, r4
 800771a:	4628      	mov	r0, r5
 800771c:	e023      	b.n	8007766 <floor+0x96>
 800771e:	4f29      	ldr	r7, [pc, #164]	@ (80077c4 <floor+0xf4>)
 8007720:	4137      	asrs	r7, r6
 8007722:	ea01 0307 	and.w	r3, r1, r7
 8007726:	4303      	orrs	r3, r0
 8007728:	d01d      	beq.n	8007766 <floor+0x96>
 800772a:	a323      	add	r3, pc, #140	@ (adr r3, 80077b8 <floor+0xe8>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 fd6c 	bl	800020c <__adddf3>
 8007734:	2200      	movs	r2, #0
 8007736:	2300      	movs	r3, #0
 8007738:	f7f9 f9ae 	bl	8000a98 <__aeabi_dcmpgt>
 800773c:	2800      	cmp	r0, #0
 800773e:	d0eb      	beq.n	8007718 <floor+0x48>
 8007740:	2c00      	cmp	r4, #0
 8007742:	bfbe      	ittt	lt
 8007744:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007748:	4133      	asrlt	r3, r6
 800774a:	18e4      	addlt	r4, r4, r3
 800774c:	ea24 0407 	bic.w	r4, r4, r7
 8007750:	2500      	movs	r5, #0
 8007752:	e7e1      	b.n	8007718 <floor+0x48>
 8007754:	2e33      	cmp	r6, #51	@ 0x33
 8007756:	dd0a      	ble.n	800776e <floor+0x9e>
 8007758:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800775c:	d103      	bne.n	8007766 <floor+0x96>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	f7f8 fd53 	bl	800020c <__adddf3>
 8007766:	ec41 0b10 	vmov	d0, r0, r1
 800776a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007772:	f04f 37ff 	mov.w	r7, #4294967295
 8007776:	40df      	lsrs	r7, r3
 8007778:	4207      	tst	r7, r0
 800777a:	d0f4      	beq.n	8007766 <floor+0x96>
 800777c:	a30e      	add	r3, pc, #56	@ (adr r3, 80077b8 <floor+0xe8>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f7f8 fd43 	bl	800020c <__adddf3>
 8007786:	2200      	movs	r2, #0
 8007788:	2300      	movs	r3, #0
 800778a:	f7f9 f985 	bl	8000a98 <__aeabi_dcmpgt>
 800778e:	2800      	cmp	r0, #0
 8007790:	d0c2      	beq.n	8007718 <floor+0x48>
 8007792:	2c00      	cmp	r4, #0
 8007794:	da0a      	bge.n	80077ac <floor+0xdc>
 8007796:	2e14      	cmp	r6, #20
 8007798:	d101      	bne.n	800779e <floor+0xce>
 800779a:	3401      	adds	r4, #1
 800779c:	e006      	b.n	80077ac <floor+0xdc>
 800779e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80077a2:	2301      	movs	r3, #1
 80077a4:	40b3      	lsls	r3, r6
 80077a6:	441d      	add	r5, r3
 80077a8:	4545      	cmp	r5, r8
 80077aa:	d3f6      	bcc.n	800779a <floor+0xca>
 80077ac:	ea25 0507 	bic.w	r5, r5, r7
 80077b0:	e7b2      	b.n	8007718 <floor+0x48>
 80077b2:	2500      	movs	r5, #0
 80077b4:	462c      	mov	r4, r5
 80077b6:	e7af      	b.n	8007718 <floor+0x48>
 80077b8:	8800759c 	.word	0x8800759c
 80077bc:	7e37e43c 	.word	0x7e37e43c
 80077c0:	bff00000 	.word	0xbff00000
 80077c4:	000fffff 	.word	0x000fffff

080077c8 <_init>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr

080077d4 <_fini>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr
