
Chansey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012310  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c9cc  080124d0  080124d0  000134d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee9c  0801ee9c  000204c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ee9c  0801ee9c  0001fe9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eea4  0801eea4  000204c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eea4  0801eea4  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801eea8  0801eea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c8  20040000  0801eeac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  200404c8  0801f374  000204c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040cf0  0801f374  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002835a  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004acf  00000000  00000000  00048852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0004d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001886  00000000  00000000  0004f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fb01  00000000  00000000  00050b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f8b  00000000  00000000  00080617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117bc4  00000000  00000000  000a75a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009804  00000000  00000000  001bf1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001c89b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200404c8 	.word	0x200404c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080124b8 	.word	0x080124b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200404cc 	.word	0x200404cc
 80001fc:	080124b8 	.word	0x080124b8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	0000      	movs	r0, r0
	...

08000fa8 <getBodyTemp>:
#include "bodytemp.h"

float getBodyTemp(I2C_HandleTypeDef *hi2c1){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	6078      	str	r0, [r7, #4]
	char buffer[2] = {0};
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	81bb      	strh	r3, [r7, #12]
	float temperature = 0.0;
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
	float total = 0.0;
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
	int i = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
	while(i < 30){
 8000fc4:	e050      	b.n	8001068 <getBodyTemp+0xc0>
		HAL_I2C_Mem_Read(hi2c1, 0xB4, 0x07, 1, (uint8_t*)buffer, 2, 100);
 8000fc6:	2364      	movs	r3, #100	@ 0x64
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	21b4      	movs	r1, #180	@ 0xb4
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f005 fa8c 	bl	80064f8 <HAL_I2C_Mem_Read>
		int raw = (((buffer[1] << 8) | buffer[0]));
 8000fe0:	7b7b      	ldrb	r3, [r7, #13]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	7b3a      	ldrb	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
		temperature = (raw*0.02 - 273.15)*(9.0/5.0) + 32.0 + 2.2; //conversion
 8000fea:	6938      	ldr	r0, [r7, #16]
 8000fec:	f7ff fab2 	bl	8000554 <__aeabi_i2d>
 8000ff0:	a328      	add	r3, pc, #160	@ (adr r3, 8001094 <getBodyTemp+0xec>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff fb17 	bl	8000628 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	a326      	add	r3, pc, #152	@ (adr r3, 800109c <getBodyTemp+0xf4>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff f956 	bl	80002b8 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	a323      	add	r3, pc, #140	@ (adr r3, 80010a4 <getBodyTemp+0xfc>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fb05 	bl	8000628 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <getBodyTemp+0xe8>)
 800102c:	f7ff f946 	bl	80002bc <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	a313      	add	r3, pc, #76	@ (adr r3, 8001088 <getBodyTemp+0xe0>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff f93d 	bl	80002bc <__adddf3>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fdc5 	bl	8000bd8 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	617b      	str	r3, [r7, #20]
		//if(temperature >= 80){
			i++;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3301      	adds	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
			total += temperature;
 8001058:	ed97 7a07 	vldr	s14, [r7, #28]
 800105c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	edc7 7a07 	vstr	s15, [r7, #28]
	while(i < 30){
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b1d      	cmp	r3, #29
 800106c:	ddab      	ble.n	8000fc6 <getBodyTemp+0x1e>
		//}
		//temperature may need some calibration
	}

	  return total/30;
 800106e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001072:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001076:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800107a:	eef0 7a66 	vmov.f32	s15, s13
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	9999999a 	.word	0x9999999a
 800108c:	40019999 	.word	0x40019999
 8001090:	40400000 	.word	0x40400000
 8001094:	47ae147b 	.word	0x47ae147b
 8001098:	3f947ae1 	.word	0x3f947ae1
 800109c:	66666666 	.word	0x66666666
 80010a0:	40711266 	.word	0x40711266
 80010a4:	cccccccd 	.word	0xcccccccd
 80010a8:	3ffccccc 	.word	0x3ffccccc

080010ac <temp_ready>:

uint8_t temp_ready(I2C_HandleTypeDef *hi2c1){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_IsDeviceReady(hi2c1, 0xB5, 1, 100) == HAL_OK){
 80010b4:	2364      	movs	r3, #100	@ 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	21b5      	movs	r1, #181	@ 0xb5
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f005 fb36 	bl	800672c <HAL_I2C_IsDeviceReady>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <temp_ready+0x1e>
		 return 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <temp_ready+0x20>
	}
	return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <sendToApp>:
#include "communicate.h"

void sendToApp(UART_HandleTypeDef *huart1, float *user_stats){
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	uint8_t buffer[sizeof(float)*4];
	memcpy(buffer, user_stats, sizeof(buffer));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f107 0408 	add.w	r4, r7, #8
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	HAL_UART_Transmit(huart1, buffer, sizeof(buffer), 100);
 80010ee:	f107 0108 	add.w	r1, r7, #8
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	2210      	movs	r2, #16
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f008 feec 	bl	8009ed4 <HAL_UART_Transmit>
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <SendCommand>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
};


void SendCommand(uint8_t reg){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	4810      	ldr	r0, [pc, #64]	@ (8001154 <SendCommand+0x50>)
 8001114:	f004 ff16 	bl	8005f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); // DC low (command)
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	480d      	ldr	r0, [pc, #52]	@ (8001154 <SendCommand+0x50>)
 800111e:	f004 ff11 	bl	8005f44 <HAL_GPIO_WritePin>
	  TX_Buffer[0] = reg;
 8001122:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <SendCommand+0x54>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	7013      	strb	r3, [r2, #0]
	  HAL_SPI_Transmit(&hspi3, &TX_Buffer[0], 1, 1000);
 8001128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112c:	2201      	movs	r2, #1
 800112e:	490a      	ldr	r1, [pc, #40]	@ (8001158 <SendCommand+0x54>)
 8001130:	480a      	ldr	r0, [pc, #40]	@ (800115c <SendCommand+0x58>)
 8001132:	f007 fce0 	bl	8008af6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET); // DC high
 8001136:	2201      	movs	r2, #1
 8001138:	2120      	movs	r1, #32
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <SendCommand+0x50>)
 800113c:	f004 ff02 	bl	8005f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // CS high (start)
 8001140:	2201      	movs	r2, #1
 8001142:	2110      	movs	r1, #16
 8001144:	4803      	ldr	r0, [pc, #12]	@ (8001154 <SendCommand+0x50>)
 8001146:	f004 fefd 	bl	8005f44 <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	48001400 	.word	0x48001400
 8001158:	200404e4 	.word	0x200404e4
 800115c:	200408cc 	.word	0x200408cc

08001160 <SendParameter>:

void SendParameter(uint8_t data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 800116a:	2200      	movs	r2, #0
 800116c:	2110      	movs	r1, #16
 800116e:	480b      	ldr	r0, [pc, #44]	@ (800119c <SendParameter+0x3c>)
 8001170:	f004 fee8 	bl	8005f44 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET); // DC high (parameter)
	  TX_Buffer[0] = data;
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <SendParameter+0x40>)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	7013      	strb	r3, [r2, #0]
	  HAL_SPI_Transmit(&hspi3, &TX_Buffer[0], 1, 1000);
 800117a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117e:	2201      	movs	r2, #1
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <SendParameter+0x40>)
 8001182:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <SendParameter+0x44>)
 8001184:	f007 fcb7 	bl	8008af6 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // cs high
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <SendParameter+0x3c>)
 800118e:	f004 fed9 	bl	8005f44 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	48001400 	.word	0x48001400
 80011a0:	200404e4 	.word	0x200404e4
 80011a4:	200408cc 	.word	0x200408cc

080011a8 <DisplayBegin>:
void DisplayBegin() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	// init sequence from Adafruit
	SendCommand(HX8357_SWRESET);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff ffa9 	bl	8001104 <SendCommand>
	HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	@ 0x64
 80011b4:	f004 fbfe 	bl	80059b4 <HAL_Delay>

	SendCommand(HX8357D_SETC);
 80011b8:	20b9      	movs	r0, #185	@ 0xb9
 80011ba:	f7ff ffa3 	bl	8001104 <SendCommand>
	SendParameter(0xFF);
 80011be:	20ff      	movs	r0, #255	@ 0xff
 80011c0:	f7ff ffce 	bl	8001160 <SendParameter>
	SendParameter(0x83);
 80011c4:	2083      	movs	r0, #131	@ 0x83
 80011c6:	f7ff ffcb 	bl	8001160 <SendParameter>
	SendParameter(0x57);
 80011ca:	2057      	movs	r0, #87	@ 0x57
 80011cc:	f7ff ffc8 	bl	8001160 <SendParameter>

	HAL_Delay(300);
 80011d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011d4:	f004 fbee 	bl	80059b4 <HAL_Delay>

	SendCommand(HX8357_SETRGB); // 4
 80011d8:	20b3      	movs	r0, #179	@ 0xb3
 80011da:	f7ff ff93 	bl	8001104 <SendCommand>
	SendParameter(0x80);
 80011de:	2080      	movs	r0, #128	@ 0x80
 80011e0:	f7ff ffbe 	bl	8001160 <SendParameter>
	SendParameter(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff ffbb 	bl	8001160 <SendParameter>
	SendParameter(0x06);
 80011ea:	2006      	movs	r0, #6
 80011ec:	f7ff ffb8 	bl	8001160 <SendParameter>
	SendParameter(0x06);
 80011f0:	2006      	movs	r0, #6
 80011f2:	f7ff ffb5 	bl	8001160 <SendParameter>

	SendCommand(HX8357D_SETCOM); // 1
 80011f6:	20b6      	movs	r0, #182	@ 0xb6
 80011f8:	f7ff ff84 	bl	8001104 <SendCommand>
	SendParameter(0x25);
 80011fc:	2025      	movs	r0, #37	@ 0x25
 80011fe:	f7ff ffaf 	bl	8001160 <SendParameter>

	SendCommand(HX8357_SETOSC); // 1
 8001202:	20b0      	movs	r0, #176	@ 0xb0
 8001204:	f7ff ff7e 	bl	8001104 <SendCommand>
	SendParameter(0x68);
 8001208:	2068      	movs	r0, #104	@ 0x68
 800120a:	f7ff ffa9 	bl	8001160 <SendParameter>

	SendCommand(HX8357_SETPANEL);
 800120e:	20cc      	movs	r0, #204	@ 0xcc
 8001210:	f7ff ff78 	bl	8001104 <SendCommand>
	SendParameter(0x05);
 8001214:	2005      	movs	r0, #5
 8001216:	f7ff ffa3 	bl	8001160 <SendParameter>

	SendCommand(HX8357_SETPWR1); // 6
 800121a:	20b1      	movs	r0, #177	@ 0xb1
 800121c:	f7ff ff72 	bl	8001104 <SendCommand>
	SendParameter(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff9d 	bl	8001160 <SendParameter>
	SendParameter(0x15);
 8001226:	2015      	movs	r0, #21
 8001228:	f7ff ff9a 	bl	8001160 <SendParameter>
	SendParameter(0x1C);
 800122c:	201c      	movs	r0, #28
 800122e:	f7ff ff97 	bl	8001160 <SendParameter>
	SendParameter(0x1C);
 8001232:	201c      	movs	r0, #28
 8001234:	f7ff ff94 	bl	8001160 <SendParameter>
	SendParameter(0x83);
 8001238:	2083      	movs	r0, #131	@ 0x83
 800123a:	f7ff ff91 	bl	8001160 <SendParameter>
	SendParameter(0xAA);
 800123e:	20aa      	movs	r0, #170	@ 0xaa
 8001240:	f7ff ff8e 	bl	8001160 <SendParameter>

	SendCommand(HX8357D_SETSTBA); // 6
 8001244:	20c0      	movs	r0, #192	@ 0xc0
 8001246:	f7ff ff5d 	bl	8001104 <SendCommand>
	SendParameter(0x50);
 800124a:	2050      	movs	r0, #80	@ 0x50
 800124c:	f7ff ff88 	bl	8001160 <SendParameter>
	SendParameter(0x50);
 8001250:	2050      	movs	r0, #80	@ 0x50
 8001252:	f7ff ff85 	bl	8001160 <SendParameter>
	SendParameter(0x01);
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff ff82 	bl	8001160 <SendParameter>
	SendParameter(0x3C);
 800125c:	203c      	movs	r0, #60	@ 0x3c
 800125e:	f7ff ff7f 	bl	8001160 <SendParameter>
	SendParameter(0x1E);
 8001262:	201e      	movs	r0, #30
 8001264:	f7ff ff7c 	bl	8001160 <SendParameter>
	SendParameter(0x08);
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff ff79 	bl	8001160 <SendParameter>

	SendCommand(HX8357D_SETCYC); // 7
 800126e:	20b4      	movs	r0, #180	@ 0xb4
 8001270:	f7ff ff48 	bl	8001104 <SendCommand>
	SendParameter(0x02);
 8001274:	2002      	movs	r0, #2
 8001276:	f7ff ff73 	bl	8001160 <SendParameter>
	SendParameter(0x40);
 800127a:	2040      	movs	r0, #64	@ 0x40
 800127c:	f7ff ff70 	bl	8001160 <SendParameter>
	SendParameter(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff6d 	bl	8001160 <SendParameter>
	SendParameter(0x2A);
 8001286:	202a      	movs	r0, #42	@ 0x2a
 8001288:	f7ff ff6a 	bl	8001160 <SendParameter>
	SendParameter(0x2A);
 800128c:	202a      	movs	r0, #42	@ 0x2a
 800128e:	f7ff ff67 	bl	8001160 <SendParameter>
	SendParameter(0x0D);
 8001292:	200d      	movs	r0, #13
 8001294:	f7ff ff64 	bl	8001160 <SendParameter>
	SendParameter(0x78);
 8001298:	2078      	movs	r0, #120	@ 0x78
 800129a:	f7ff ff61 	bl	8001160 <SendParameter>

	SendCommand(HX8357D_SETGAMMA); // 34
 800129e:	20e0      	movs	r0, #224	@ 0xe0
 80012a0:	f7ff ff30 	bl	8001104 <SendCommand>
	SendParameter(0x02);
 80012a4:	2002      	movs	r0, #2
 80012a6:	f7ff ff5b 	bl	8001160 <SendParameter>
	SendParameter(0x0A);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff ff58 	bl	8001160 <SendParameter>
	SendParameter(0x11);
 80012b0:	2011      	movs	r0, #17
 80012b2:	f7ff ff55 	bl	8001160 <SendParameter>
	SendParameter(0x1d);
 80012b6:	201d      	movs	r0, #29
 80012b8:	f7ff ff52 	bl	8001160 <SendParameter>
	SendParameter(0x23);
 80012bc:	2023      	movs	r0, #35	@ 0x23
 80012be:	f7ff ff4f 	bl	8001160 <SendParameter>
	SendParameter(0x35);
 80012c2:	2035      	movs	r0, #53	@ 0x35
 80012c4:	f7ff ff4c 	bl	8001160 <SendParameter>
	SendParameter(0x41);
 80012c8:	2041      	movs	r0, #65	@ 0x41
 80012ca:	f7ff ff49 	bl	8001160 <SendParameter>
	SendParameter(0x4b);
 80012ce:	204b      	movs	r0, #75	@ 0x4b
 80012d0:	f7ff ff46 	bl	8001160 <SendParameter>
	SendParameter(0x4b);
 80012d4:	204b      	movs	r0, #75	@ 0x4b
 80012d6:	f7ff ff43 	bl	8001160 <SendParameter>
	SendParameter(0x42);
 80012da:	2042      	movs	r0, #66	@ 0x42
 80012dc:	f7ff ff40 	bl	8001160 <SendParameter>
	SendParameter(0x3A);
 80012e0:	203a      	movs	r0, #58	@ 0x3a
 80012e2:	f7ff ff3d 	bl	8001160 <SendParameter>
	SendParameter(0x27);
 80012e6:	2027      	movs	r0, #39	@ 0x27
 80012e8:	f7ff ff3a 	bl	8001160 <SendParameter>
	SendParameter(0x1B);
 80012ec:	201b      	movs	r0, #27
 80012ee:	f7ff ff37 	bl	8001160 <SendParameter>
	SendParameter(0x08);
 80012f2:	2008      	movs	r0, #8
 80012f4:	f7ff ff34 	bl	8001160 <SendParameter>
	SendParameter(0x09);
 80012f8:	2009      	movs	r0, #9
 80012fa:	f7ff ff31 	bl	8001160 <SendParameter>
	SendParameter(0x03);
 80012fe:	2003      	movs	r0, #3
 8001300:	f7ff ff2e 	bl	8001160 <SendParameter>
	SendParameter(0x02);
 8001304:	2002      	movs	r0, #2
 8001306:	f7ff ff2b 	bl	8001160 <SendParameter>
	SendParameter(0x0A);
 800130a:	200a      	movs	r0, #10
 800130c:	f7ff ff28 	bl	8001160 <SendParameter>
	SendParameter(0x11);
 8001310:	2011      	movs	r0, #17
 8001312:	f7ff ff25 	bl	8001160 <SendParameter>
	SendParameter(0x1d);
 8001316:	201d      	movs	r0, #29
 8001318:	f7ff ff22 	bl	8001160 <SendParameter>
	SendParameter(0x23);
 800131c:	2023      	movs	r0, #35	@ 0x23
 800131e:	f7ff ff1f 	bl	8001160 <SendParameter>
	SendParameter(0x35);
 8001322:	2035      	movs	r0, #53	@ 0x35
 8001324:	f7ff ff1c 	bl	8001160 <SendParameter>
	SendParameter(0x41);
 8001328:	2041      	movs	r0, #65	@ 0x41
 800132a:	f7ff ff19 	bl	8001160 <SendParameter>
	SendParameter(0x4b);
 800132e:	204b      	movs	r0, #75	@ 0x4b
 8001330:	f7ff ff16 	bl	8001160 <SendParameter>
	SendParameter(0x4b);
 8001334:	204b      	movs	r0, #75	@ 0x4b
 8001336:	f7ff ff13 	bl	8001160 <SendParameter>
	SendParameter(0x42);
 800133a:	2042      	movs	r0, #66	@ 0x42
 800133c:	f7ff ff10 	bl	8001160 <SendParameter>
	SendParameter(0x3A);
 8001340:	203a      	movs	r0, #58	@ 0x3a
 8001342:	f7ff ff0d 	bl	8001160 <SendParameter>
	SendParameter(0x27);
 8001346:	2027      	movs	r0, #39	@ 0x27
 8001348:	f7ff ff0a 	bl	8001160 <SendParameter>
	SendParameter(0x1B);
 800134c:	201b      	movs	r0, #27
 800134e:	f7ff ff07 	bl	8001160 <SendParameter>
	SendParameter(0x08);
 8001352:	2008      	movs	r0, #8
 8001354:	f7ff ff04 	bl	8001160 <SendParameter>
	SendParameter(0x09);
 8001358:	2009      	movs	r0, #9
 800135a:	f7ff ff01 	bl	8001160 <SendParameter>
	SendParameter(0x03);
 800135e:	2003      	movs	r0, #3
 8001360:	f7ff fefe 	bl	8001160 <SendParameter>
	SendParameter(0x00);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fefb 	bl	8001160 <SendParameter>
	SendParameter(0x01);
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fef8 	bl	8001160 <SendParameter>

	SendCommand(HX8357_COLMOD);
 8001370:	203a      	movs	r0, #58	@ 0x3a
 8001372:	f7ff fec7 	bl	8001104 <SendCommand>
	SendParameter(0x55);
 8001376:	2055      	movs	r0, #85	@ 0x55
 8001378:	f7ff fef2 	bl	8001160 <SendParameter>

	SendCommand(HX8357_MADCTL);
 800137c:	2036      	movs	r0, #54	@ 0x36
 800137e:	f7ff fec1 	bl	8001104 <SendCommand>
	SendParameter(0xC0);
 8001382:	20c0      	movs	r0, #192	@ 0xc0
 8001384:	f7ff feec 	bl	8001160 <SendParameter>

	SendCommand(HX8357_TEON);
 8001388:	2035      	movs	r0, #53	@ 0x35
 800138a:	f7ff febb 	bl	8001104 <SendCommand>
	SendParameter(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fee6 	bl	8001160 <SendParameter>

	SendCommand(HX8357_TEARLINE);
 8001394:	2044      	movs	r0, #68	@ 0x44
 8001396:	f7ff feb5 	bl	8001104 <SendCommand>
	SendParameter(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fee0 	bl	8001160 <SendParameter>
	SendParameter(0x02);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f7ff fedd 	bl	8001160 <SendParameter>

	SendCommand(HX8357_SLPOUT);
 80013a6:	2011      	movs	r0, #17
 80013a8:	f7ff feac 	bl	8001104 <SendCommand>
	HAL_Delay(150);
 80013ac:	2096      	movs	r0, #150	@ 0x96
 80013ae:	f004 fb01 	bl	80059b4 <HAL_Delay>

	SendCommand(HX8357_DISPON);
 80013b2:	2029      	movs	r0, #41	@ 0x29
 80013b4:	f7ff fea6 	bl	8001104 <SendCommand>
	HAL_Delay(50);
 80013b8:	2032      	movs	r0, #50	@ 0x32
 80013ba:	f004 fafb 	bl	80059b4 <HAL_Delay>

	  SendCommand(0x3A); // setting color format
 80013be:	203a      	movs	r0, #58	@ 0x3a
 80013c0:	f7ff fea0 	bl	8001104 <SendCommand>
	  SendParameter(0b101);
 80013c4:	2005      	movs	r0, #5
 80013c6:	f7ff fecb 	bl	8001160 <SendParameter>

	  SendCommand(0x36);     // MADCTL // set orientation to be landscape
 80013ca:	2036      	movs	r0, #54	@ 0x36
 80013cc:	f7ff fe9a 	bl	8001104 <SendCommand>
	  SendParameter(0xA0);
 80013d0:	20a0      	movs	r0, #160	@ 0xa0
 80013d2:	f7ff fec5 	bl	8001160 <SendParameter>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}

080013da <SetAddressWindow>:

void SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4604      	mov	r4, r0
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	80fb      	strh	r3, [r7, #6]
 80013ec:	4603      	mov	r3, r0
 80013ee:	80bb      	strh	r3, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	803b      	strh	r3, [r7, #0]
	//adafruit has CS_ACTIVE specified here
	SendCommand(HX8357_CASET);
 80013f8:	202a      	movs	r0, #42	@ 0x2a
 80013fa:	f7ff fe83 	bl	8001104 <SendCommand>
	SendParameter((x0>>8) & 0xFF);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff feaa 	bl	8001160 <SendParameter>
	SendParameter(x0 & 0xFF);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fea5 	bl	8001160 <SendParameter>
	SendParameter((x1>>8) & 0xFF);
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe9e 	bl	8001160 <SendParameter>
	SendParameter(x1 & 0xFF);
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe99 	bl	8001160 <SendParameter>

	SendCommand(HX8357_PASET);
 800142e:	202b      	movs	r0, #43	@ 0x2b
 8001430:	f7ff fe68 	bl	8001104 <SendCommand>
	SendParameter((y0>>8) & 0xFF);
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe8f 	bl	8001160 <SendParameter>
	SendParameter(y0 & 0xFF);
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe8a 	bl	8001160 <SendParameter>
	SendParameter((y1>>8) & 0xFF);
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe83 	bl	8001160 <SendParameter>
	SendParameter(y1 & 0xFF);
 800145a:	883b      	ldrh	r3, [r7, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe7e 	bl	8001160 <SendParameter>
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <WriteColor>:

void WriteColor(uint16_t color) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	SendParameter (color >> 8);
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	b29b      	uxth	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe6e 	bl	8001160 <SendParameter>
	SendParameter (color& 0xFF);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe69 	bl	8001160 <SendParameter>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	460b      	mov	r3, r1
 80014a2:	80bb      	strh	r3, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	807b      	strh	r3, [r7, #2]
//	if ((x < 0) || (x>= TFT_WIDTH) || (y<0) || y >= TFT_HEIGHT) {
//		printf("DrawPixel inputs not valid");
//		return;
//	}

	SetAddressWindow(x, y, x+1, y+1);
 80014a8:	88f8      	ldrh	r0, [r7, #6]
 80014aa:	88b9      	ldrh	r1, [r7, #4]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	3301      	adds	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f7ff ff8f 	bl	80013da <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 80014bc:	202c      	movs	r0, #44	@ 0x2c
 80014be:	f7ff fe21 	bl	8001104 <SendCommand>
	WriteColor(color);
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffd1 	bl	800146c <WriteColor>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <DrawHLine>:

void DrawHLine(int16_t x, int16_t y0, int16_t y1, uint16_t color) {
 80014d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014d8:	b087      	sub	sp, #28
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4606      	mov	r6, r0
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4633      	mov	r3, r6
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4603      	mov	r3, r0
 80014ea:	80bb      	strh	r3, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	803b      	strh	r3, [r7, #0]
 80014f4:	466b      	mov	r3, sp
 80014f6:	461e      	mov	r6, r3
	// y0 must be less than y1
	SetAddressWindow(x, y0, x, y1);
 80014f8:	88f8      	ldrh	r0, [r7, #6]
 80014fa:	88b9      	ldrh	r1, [r7, #4]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	f7ff ff6b 	bl	80013da <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 8001504:	202c      	movs	r0, #44	@ 0x2c
 8001506:	f7ff fdfd 	bl	8001104 <SendCommand>
	int ind = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
	uint8_t TX_Buffer [2*y1-2*y0 + 2];
 800150e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001512:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	3301      	adds	r3, #1
 800151a:	0059      	lsls	r1, r3, #1
 800151c:	1e4b      	subs	r3, r1, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	460a      	mov	r2, r1
 8001522:	2300      	movs	r3, #0
 8001524:	4690      	mov	r8, r2
 8001526:	4699      	mov	r9, r3
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800153c:	460a      	mov	r2, r1
 800153e:	2300      	movs	r3, #0
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	00eb      	lsls	r3, r5, #3
 800154e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001552:	00e2      	lsls	r2, r4, #3
 8001554:	460b      	mov	r3, r1
 8001556:	3307      	adds	r3, #7
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	ebad 0d03 	sub.w	sp, sp, r3
 8001560:	466b      	mov	r3, sp
 8001562:	3300      	adds	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
	for (int i = y0; i <= y1; i++) {
 8001566:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	e012      	b.n	8001594 <DrawHLine+0xc0>
		TX_Buffer[ind++] = color >> 8;
 800156e:	883b      	ldrh	r3, [r7, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b299      	uxth	r1, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	617a      	str	r2, [r7, #20]
 800157a:	b2c9      	uxtb	r1, r1
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	54d1      	strb	r1, [r2, r3]
		TX_Buffer[ind++] = color & 0xFF;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	617a      	str	r2, [r7, #20]
 8001586:	883a      	ldrh	r2, [r7, #0]
 8001588:	b2d1      	uxtb	r1, r2
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	54d1      	strb	r1, [r2, r3]
	for (int i = y0; i <= y1; i++) {
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	429a      	cmp	r2, r3
 800159c:	dde7      	ble.n	800156e <DrawHLine+0x9a>
	}

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 800159e:	2200      	movs	r2, #0
 80015a0:	2110      	movs	r1, #16
 80015a2:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <DrawHLine+0xfc>)
 80015a4:	f004 fcce 	bl	8005f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &TX_Buffer, ind, 1000);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <DrawHLine+0x100>)
 80015b4:	f007 fa9f 	bl	8008af6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // cs high
 80015b8:	2201      	movs	r2, #1
 80015ba:	2110      	movs	r1, #16
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <DrawHLine+0xfc>)
 80015be:	f004 fcc1 	bl	8005f44 <HAL_GPIO_WritePin>
 80015c2:	46b5      	mov	sp, r6
}
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015ce:	bf00      	nop
 80015d0:	48001400 	.word	0x48001400
 80015d4:	200408cc 	.word	0x200408cc

080015d8 <DrawVLine>:

void DrawVLine(int16_t x0, int16_t x1, int16_t y, uint16_t color) {
 80015d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015dc:	b087      	sub	sp, #28
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4606      	mov	r6, r0
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	4633      	mov	r3, r6
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	4603      	mov	r3, r0
 80015ee:	80bb      	strh	r3, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	803b      	strh	r3, [r7, #0]
 80015f8:	466b      	mov	r3, sp
 80015fa:	461e      	mov	r6, r3
	SetAddressWindow(x0, y, x1, y);
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	8879      	ldrh	r1, [r7, #2]
 8001600:	88ba      	ldrh	r2, [r7, #4]
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	f7ff fee9 	bl	80013da <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 8001608:	202c      	movs	r0, #44	@ 0x2c
 800160a:	f7ff fd7b 	bl	8001104 <SendCommand>
	int ind = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
	uint8_t TX_Buffer [2*x1-2*x0 + 2];
 8001612:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	3301      	adds	r3, #1
 800161e:	0059      	lsls	r1, r3, #1
 8001620:	1e4b      	subs	r3, r1, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	460a      	mov	r2, r1
 8001626:	2300      	movs	r3, #0
 8001628:	4690      	mov	r8, r2
 800162a:	4699      	mov	r9, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800163c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001640:	460a      	mov	r2, r1
 8001642:	2300      	movs	r3, #0
 8001644:	4614      	mov	r4, r2
 8001646:	461d      	mov	r5, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	00eb      	lsls	r3, r5, #3
 8001652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001656:	00e2      	lsls	r2, r4, #3
 8001658:	460b      	mov	r3, r1
 800165a:	3307      	adds	r3, #7
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	ebad 0d03 	sub.w	sp, sp, r3
 8001664:	466b      	mov	r3, sp
 8001666:	3300      	adds	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
	for (int i = x0; i <= x1; i++) {
 800166a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	e012      	b.n	8001698 <DrawVLine+0xc0>
		TX_Buffer[ind++] = color >> 8;
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b299      	uxth	r1, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	617a      	str	r2, [r7, #20]
 800167e:	b2c9      	uxtb	r1, r1
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	54d1      	strb	r1, [r2, r3]
		TX_Buffer[ind++] = color & 0xFF;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	617a      	str	r2, [r7, #20]
 800168a:	883a      	ldrh	r2, [r7, #0]
 800168c:	b2d1      	uxtb	r1, r2
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	54d1      	strb	r1, [r2, r3]
	for (int i = x0; i <= x1; i++) {
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	3301      	adds	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dde7      	ble.n	8001672 <DrawVLine+0x9a>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); // CS low
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <DrawVLine+0xfc>)
 80016a8:	f004 fc4c 	bl	8005f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &TX_Buffer, ind, 1000);
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <DrawVLine+0x100>)
 80016b8:	f007 fa1d 	bl	8008af6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // cs high
 80016bc:	2201      	movs	r2, #1
 80016be:	2110      	movs	r1, #16
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <DrawVLine+0xfc>)
 80016c2:	f004 fc3f 	bl	8005f44 <HAL_GPIO_WritePin>
 80016c6:	46b5      	mov	sp, r6
}
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016d2:	bf00      	nop
 80016d4:	48001400 	.word	0x48001400
 80016d8:	200408cc 	.word	0x200408cc

080016dc <FillScreen>:


void FillScreen(uint16_t color) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 480; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e00a      	b.n	8001702 <FillScreen+0x26>
		DrawHLine(i, 0, 319, color);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	b218      	sxth	r0, r3
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	f240 123f 	movw	r2, #319	@ 0x13f
 80016f6:	2100      	movs	r1, #0
 80016f8:	f7ff feec 	bl	80014d4 <DrawHLine>
	for (int i = 0; i < 480; i++) {
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001708:	dbf0      	blt.n	80016ec <FillScreen+0x10>
	}
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <FillRect>:


void FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]
	SetAddressWindow(x,y, x+w, y+h);
 8001732:	88f8      	ldrh	r0, [r7, #6]
 8001734:	88b9      	ldrh	r1, [r7, #4]
 8001736:	88fa      	ldrh	r2, [r7, #6]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4413      	add	r3, r2
 800173c:	b29c      	uxth	r4, r3
 800173e:	88ba      	ldrh	r2, [r7, #4]
 8001740:	883b      	ldrh	r3, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	4622      	mov	r2, r4
 8001748:	f7ff fe47 	bl	80013da <SetAddressWindow>
	SendCommand(HX8357_RAMWR);
 800174c:	202c      	movs	r0, #44	@ 0x2c
 800174e:	f7ff fcd9 	bl	8001104 <SendCommand>
	for (int16_t i=x; i<x+w; i++) {
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	81fb      	strh	r3, [r7, #14]
 8001756:	e011      	b.n	800177c <FillRect+0x68>
	        DrawHLine(i, y, y+h, color);
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4413      	add	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	b21a      	sxth	r2, r3
 8001762:	8c3b      	ldrh	r3, [r7, #32]
 8001764:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001768:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800176c:	f7ff feb2 	bl	80014d4 <DrawHLine>
	for (int16_t i=x; i<x+w; i++) {
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	b29b      	uxth	r3, r3
 8001776:	3301      	adds	r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	81fb      	strh	r3, [r7, #14]
 800177c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001780:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001788:	440b      	add	r3, r1
 800178a:	429a      	cmp	r2, r3
 800178c:	dbe4      	blt.n	8001758 <FillRect+0x44>
	    }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <DrawChar>:


void DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b087      	sub	sp, #28
 800179c:	af02      	add	r7, sp, #8
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	4603      	mov	r3, r0
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
 80017b2:	4613      	mov	r3, r2
 80017b4:	803b      	strh	r3, [r7, #0]

       // if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e0a2      	b.n	8001902 <DrawChar+0x16a>
            uint8_t line = font[c * 5 + i];
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	441a      	add	r2, r3
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a69      	ldr	r2, [pc, #420]	@ (8001970 <DrawChar+0x1d8>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	73bb      	strb	r3, [r7, #14]

            for(int8_t j=0; j<8; j++, line >>= 1) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	737b      	strb	r3, [r7, #13]
 80017d4:	e08a      	b.n	80018ec <DrawChar+0x154>
                if(line & 1) {
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03c      	beq.n	800185a <DrawChar+0xc2>
                    if(size == 1)
 80017e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d112      	bne.n	800180e <DrawChar+0x76>
                        DrawPixel(x+i, y+j, color);
 80017e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b218      	sxth	r0, r3
 80017f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21b      	sxth	r3, r3
 8001804:	883a      	ldrh	r2, [r7, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff fe45 	bl	8001496 <DrawPixel>
 800180c:	e065      	b.n	80018da <DrawChar+0x142>
                    else
                        FillRect(x+i*size, y+j*size, size, size, color);
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	b29a      	uxth	r2, r3
 8001814:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001818:	b29b      	uxth	r3, r3
 800181a:	fb12 f303 	smulbb	r3, r2, r3
 800181e:	b29a      	uxth	r2, r3
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	4413      	add	r3, r2
 8001824:	b29b      	uxth	r3, r3
 8001826:	b218      	sxth	r0, r3
 8001828:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001832:	b29b      	uxth	r3, r3
 8001834:	fb12 f303 	smulbb	r3, r2, r3
 8001838:	b29a      	uxth	r2, r3
 800183a:	88bb      	ldrh	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	b29b      	uxth	r3, r3
 8001840:	b219      	sxth	r1, r3
 8001842:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001846:	b21a      	sxth	r2, r3
 8001848:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800184c:	b21c      	sxth	r4, r3
 800184e:	883b      	ldrh	r3, [r7, #0]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	4623      	mov	r3, r4
 8001854:	f7ff ff5e 	bl	8001714 <FillRect>
 8001858:	e03f      	b.n	80018da <DrawChar+0x142>
                } else if(bg != color) {
 800185a:	8c3a      	ldrh	r2, [r7, #32]
 800185c:	883b      	ldrh	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d03b      	beq.n	80018da <DrawChar+0x142>
                    if(size == 1)
 8001862:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001866:	2b01      	cmp	r3, #1
 8001868:	d112      	bne.n	8001890 <DrawChar+0xf8>
                        DrawPixel(x+i, y+j, bg);
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	b29a      	uxth	r2, r3
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800187c:	b29a      	uxth	r2, r3
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	b21b      	sxth	r3, r3
 8001886:	8c3a      	ldrh	r2, [r7, #32]
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff fe04 	bl	8001496 <DrawPixel>
 800188e:	e024      	b.n	80018da <DrawChar+0x142>
                    else
                        FillRect(x+i*size, y+j*size, size, size, bg);
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	b29a      	uxth	r2, r3
 8001896:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800189a:	b29b      	uxth	r3, r3
 800189c:	fb12 f303 	smulbb	r3, r2, r3
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b218      	sxth	r0, r3
 80018aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b219      	sxth	r1, r3
 80018c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018ce:	b21c      	sxth	r4, r3
 80018d0:	8c3b      	ldrh	r3, [r7, #32]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4623      	mov	r3, r4
 80018d6:	f7ff ff1d 	bl	8001714 <FillRect>
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80018da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	737b      	strb	r3, [r7, #13]
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	73bb      	strb	r3, [r7, #14]
 80018ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	f77f af70 	ble.w	80017d6 <DrawChar+0x3e>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	2b04      	cmp	r3, #4
 8001908:	f77f af58 	ble.w	80017bc <DrawChar+0x24>
                }
            }
        }
        if(bg != color) {
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	883b      	ldrh	r3, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d029      	beq.n	8001968 <DrawChar+0x1d0>
            if(size == 1) DrawVLine(x+5, y, 8, bg);
 8001914:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10a      	bne.n	8001932 <DrawChar+0x19a>
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	3305      	adds	r3, #5
 8001920:	b29b      	uxth	r3, r3
 8001922:	b218      	sxth	r0, r3
 8001924:	8c3b      	ldrh	r3, [r7, #32]
 8001926:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800192a:	2208      	movs	r2, #8
 800192c:	f7ff fe54 	bl	80015d8 <DrawVLine>
            else          FillRect(x+5*size, y, size, 8*size, bg);
        }


}
 8001930:	e01a      	b.n	8001968 <DrawChar+0x1d0>
            else          FillRect(x+5*size, y, size, 8*size, bg);
 8001932:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4413      	add	r3, r2
 800193e:	b29a      	uxth	r2, r3
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	4413      	add	r3, r2
 8001944:	b29b      	uxth	r3, r3
 8001946:	b218      	sxth	r0, r3
 8001948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800194c:	b21a      	sxth	r2, r3
 800194e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001952:	b29b      	uxth	r3, r3
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	b29b      	uxth	r3, r3
 8001958:	b21c      	sxth	r4, r3
 800195a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800195e:	8c3b      	ldrh	r3, [r7, #32]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4623      	mov	r3, r4
 8001964:	f7ff fed6 	bl	8001714 <FillRect>
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	0801e59c 	.word	0x0801e59c

08001974 <DrawText>:

void DrawText(int16_t x, int16_t y, char* text, uint16_t color, uint16_t bg, uint8_t size) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af02      	add	r7, sp, #8
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	460b      	mov	r3, r1
 8001984:	81bb      	strh	r3, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
	   while (*text) {
 800198a:	e01d      	b.n	80019c8 <DrawText+0x54>
	        DrawChar(x, y, *text, color, bg, size);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	88fc      	ldrh	r4, [r7, #6]
 8001992:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001996:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800199a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4623      	mov	r3, r4
 80019a6:	f7ff fef7 	bl	8001798 <DrawChar>
	        x += 6 * size;  // Move cursor forward; 6 = character width incl. spacing
 80019aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	81fb      	strh	r3, [r7, #14]
	        text++;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
	   while (*text) {
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1dd      	bne.n	800198c <DrawText+0x18>
	    }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
	...

080019dc <ScanText>:

void ScanText () {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af02      	add	r7, sp, #8

	DrawText(50, 100, "Scan your card to", DARKPINK, WHITE, 3);
 80019e2:	2303      	movs	r3, #3
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 80019f0:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <ScanText+0x3c>)
 80019f2:	2164      	movs	r1, #100	@ 0x64
 80019f4:	2032      	movs	r0, #50	@ 0x32
 80019f6:	f7ff ffbd 	bl	8001974 <DrawText>
	DrawText(50, 140, "begin your health scan!", DARKPINK, WHITE, 3);
 80019fa:	2303      	movs	r3, #3
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <ScanText+0x40>)
 8001a0a:	218c      	movs	r1, #140	@ 0x8c
 8001a0c:	2032      	movs	r0, #50	@ 0x32
 8001a0e:	f7ff ffb1 	bl	8001974 <DrawText>
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	080124d0 	.word	0x080124d0
 8001a1c:	080124e4 	.word	0x080124e4

08001a20 <HeartTempText>:

// Put your thumb on

void HeartTempText(char * name) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b092      	sub	sp, #72	@ 0x48
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
	char temp[50];
	strcpy(temp, "Welcome ");
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001aec <HeartTempText+0xcc>)
 8001a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a30:	c303      	stmia	r3!, {r0, r1}
 8001a32:	701a      	strb	r2, [r3, #0]
	strcat(temp, name);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00e fcbc 	bl	80103b8 <strcat>
	strcat(temp, "!");
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fc2b 	bl	80002a0 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4413      	add	r3, r2
 8001a54:	4926      	ldr	r1, [pc, #152]	@ (8001af0 <HeartTempText+0xd0>)
 8001a56:	461a      	mov	r2, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	8013      	strh	r3, [r2, #0]
// Keep your left thumb on Chansey's right hand until heart rate displays.
	printf("%s\r\n", temp);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4823      	ldr	r0, [pc, #140]	@ (8001af4 <HeartTempText+0xd4>)
 8001a66:	f00e fb2d 	bl	80100c4 <iprintf>
	DrawText(50, 50, temp, DARKPINK, WHITE, 3);
 8001a6a:	f107 020c 	add.w	r2, r7, #12
 8001a6e:	2303      	movs	r3, #3
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a7c:	2132      	movs	r1, #50	@ 0x32
 8001a7e:	2032      	movs	r0, #50	@ 0x32
 8001a80:	f7ff ff78 	bl	8001974 <DrawText>
	DrawText(50, 90, "Keep your left thumb", DARKPINK, WHITE, 3);
 8001a84:	2303      	movs	r3, #3
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001a92:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HeartTempText+0xd8>)
 8001a94:	215a      	movs	r1, #90	@ 0x5a
 8001a96:	2032      	movs	r0, #50	@ 0x32
 8001a98:	f7ff ff6c 	bl	8001974 <DrawText>
	DrawText(50, 130, "on Chansey's right", DARKPINK, WHITE, 3);
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <HeartTempText+0xdc>)
 8001aac:	2182      	movs	r1, #130	@ 0x82
 8001aae:	2032      	movs	r0, #50	@ 0x32
 8001ab0:	f7ff ff60 	bl	8001974 <DrawText>
	DrawText(170, 170, "hand until heart ", DARKPINK, WHITE, 3);
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b00 <HeartTempText+0xe0>)
 8001ac4:	21aa      	movs	r1, #170	@ 0xaa
 8001ac6:	20aa      	movs	r0, #170	@ 0xaa
 8001ac8:	f7ff ff54 	bl	8001974 <DrawText>
	DrawText(170, 210, "rate displays!", DARKPINK, WHITE, 3);
 8001acc:	2303      	movs	r3, #3
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <HeartTempText+0xe4>)
 8001adc:	21d2      	movs	r1, #210	@ 0xd2
 8001ade:	20aa      	movs	r0, #170	@ 0xaa
 8001ae0:	f7ff ff48 	bl	8001974 <DrawText>
}
 8001ae4:	bf00      	nop
 8001ae6:	3740      	adds	r7, #64	@ 0x40
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	080124fc 	.word	0x080124fc
 8001af0:	08012508 	.word	0x08012508
 8001af4:	0801250c 	.word	0x0801250c
 8001af8:	08012514 	.word	0x08012514
 8001afc:	0801252c 	.word	0x0801252c
 8001b00:	08012540 	.word	0x08012540
 8001b04:	08012554 	.word	0x08012554

08001b08 <TimeCornerText>:
void TimeCornerText(char* time) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	6078      	str	r0, [r7, #4]
	DrawText(320, 10, time, DARKPINK, WHITE, 3);
 8001b10:	2303      	movs	r3, #3
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	210a      	movs	r1, #10
 8001b22:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001b26:	f7ff ff25 	bl	8001974 <DrawText>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <TempText>:
// Align your forehead with Chansey's left/right eye.

void TempText() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af02      	add	r7, sp, #8
	DrawText(50, 60, "Align your forehead", DARKPINK, WHITE, 3);
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <TempText+0x54>)
 8001b4a:	213c      	movs	r1, #60	@ 0x3c
 8001b4c:	2032      	movs	r0, #50	@ 0x32
 8001b4e:	f7ff ff11 	bl	8001974 <DrawText>
	DrawText(50, 100, "with Chansey's right", DARKPINK, WHITE, 3);
 8001b52:	2303      	movs	r3, #3
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <TempText+0x58>)
 8001b62:	2164      	movs	r1, #100	@ 0x64
 8001b64:	2032      	movs	r0, #50	@ 0x32
 8001b66:	f7ff ff05 	bl	8001974 <DrawText>
	DrawText(50, 140, "eye!", DARKPINK, WHITE, 3);
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001b78:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <TempText+0x5c>)
 8001b7a:	218c      	movs	r1, #140	@ 0x8c
 8001b7c:	2032      	movs	r0, #50	@ 0x32
 8001b7e:	f7ff fef9 	bl	8001974 <DrawText>
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	08012564 	.word	0x08012564
 8001b8c:	08012578 	.word	0x08012578
 8001b90:	08012590 	.word	0x08012590

08001b94 <PillsText>:
void RemoveText() {
	DrawText(50, 100, "Please remove card!", DARKPINK, WHITE, 3);

}

void PillsText(char * type) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b092      	sub	sp, #72	@ 0x48
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]

	char temp[50];
	strcpy(temp, type);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00e fc8f 	bl	80104c6 <strcpy>
	strcat(temp, " pills");
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fb77 	bl	80002a0 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <PillsText+0x88>)
 8001bbe:	6810      	ldr	r0, [r2, #0]
 8001bc0:	6018      	str	r0, [r3, #0]
 8001bc2:	8891      	ldrh	r1, [r2, #4]
 8001bc4:	7992      	ldrb	r2, [r2, #6]
 8001bc6:	8099      	strh	r1, [r3, #4]
 8001bc8:	719a      	strb	r2, [r3, #6]

	DrawText(50, 60, "Data recorded.", DARKPINK, WHITE, 3);
 8001bca:	2303      	movs	r3, #3
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001bd8:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <PillsText+0x8c>)
 8001bda:	213c      	movs	r1, #60	@ 0x3c
 8001bdc:	2032      	movs	r0, #50	@ 0x32
 8001bde:	f7ff fec9 	bl	8001974 <DrawText>
	DrawText(50, 100, temp, DARKPINK, WHITE, 3);
 8001be2:	f107 020c 	add.w	r2, r7, #12
 8001be6:	2303      	movs	r3, #3
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001bf4:	2164      	movs	r1, #100	@ 0x64
 8001bf6:	2032      	movs	r0, #50	@ 0x32
 8001bf8:	f7ff febc 	bl	8001974 <DrawText>
	DrawText(50, 140, "dispensing now!", DARKPINK, WHITE, 3);
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001c0a:	4a06      	ldr	r2, [pc, #24]	@ (8001c24 <PillsText+0x90>)
 8001c0c:	218c      	movs	r1, #140	@ 0x8c
 8001c0e:	2032      	movs	r0, #50	@ 0x32
 8001c10:	f7ff feb0 	bl	8001974 <DrawText>
}
 8001c14:	bf00      	nop
 8001c16:	3740      	adds	r7, #64	@ 0x40
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	080125ac 	.word	0x080125ac
 8001c20:	080125b4 	.word	0x080125b4
 8001c24:	080125c4 	.word	0x080125c4

08001c28 <RefillText>:

void RefillText(char *type) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b092      	sub	sp, #72	@ 0x48
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	6078      	str	r0, [r7, #4]

	char temp[50];
	strcpy(temp, type);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00e fc45 	bl	80104c6 <strcpy>
	strcat(temp, " pills.");
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb2d 	bl	80002a0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4413      	add	r3, r2
 8001c50:	4917      	ldr	r1, [pc, #92]	@ (8001cb0 <RefillText+0x88>)
 8001c52:	461a      	mov	r2, r3
 8001c54:	460b      	mov	r3, r1
 8001c56:	cb03      	ldmia	r3!, {r0, r1}
 8001c58:	6010      	str	r0, [r2, #0]
 8001c5a:	6051      	str	r1, [r2, #4]

	DrawText(50, 60, "Out of stock,", DARKPINK, WHITE, 3);
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <RefillText+0x8c>)
 8001c6c:	213c      	movs	r1, #60	@ 0x3c
 8001c6e:	2032      	movs	r0, #50	@ 0x32
 8001c70:	f7ff fe80 	bl	8001974 <DrawText>
	DrawText(50, 100, "please refill", DARKPINK, WHITE, 3);
 8001c74:	2303      	movs	r3, #3
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001c82:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <RefillText+0x90>)
 8001c84:	2164      	movs	r1, #100	@ 0x64
 8001c86:	2032      	movs	r0, #50	@ 0x32
 8001c88:	f7ff fe74 	bl	8001974 <DrawText>
	DrawText(50, 140, temp, DARKPINK, WHITE, 3);
 8001c8c:	f107 020c 	add.w	r2, r7, #12
 8001c90:	2303      	movs	r3, #3
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001c9e:	218c      	movs	r1, #140	@ 0x8c
 8001ca0:	2032      	movs	r0, #50	@ 0x32
 8001ca2:	f7ff fe67 	bl	8001974 <DrawText>

}
 8001ca6:	bf00      	nop
 8001ca8:	3740      	adds	r7, #64	@ 0x40
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	080125d4 	.word	0x080125d4
 8001cb4:	080125dc 	.word	0x080125dc
 8001cb8:	080125ec 	.word	0x080125ec

08001cbc <DoneText>:


void DoneText(char * name) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b092      	sub	sp, #72	@ 0x48
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	6078      	str	r0, [r7, #4]
	// Health scan done. Please remove card!


	char temp[50];
	strcpy(temp, "All done, ");
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <DoneText+0x80>)
 8001cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ccc:	c303      	stmia	r3!, {r0, r1}
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	0c12      	lsrs	r2, r2, #16
 8001cd4:	701a      	strb	r2, [r3, #0]
	// strcat(temp, name);
	strcpy(temp, name);
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00e fbf2 	bl	80104c6 <strcpy>
	strcat(temp, "!");
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fada 	bl	80002a0 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <DoneText+0x84>)
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	8013      	strh	r3, [r2, #0]
	DrawText(50, 100, temp, DARKPINK, WHITE, 3);
 8001d00:	f107 020c 	add.w	r2, r7, #12
 8001d04:	2303      	movs	r3, #3
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001d12:	2164      	movs	r1, #100	@ 0x64
 8001d14:	2032      	movs	r0, #50	@ 0x32
 8001d16:	f7ff fe2d 	bl	8001974 <DrawText>
	DrawText(50, 140, "Please remove card!", DARKPINK, WHITE, 3);
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001d28:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <DoneText+0x88>)
 8001d2a:	218c      	movs	r1, #140	@ 0x8c
 8001d2c:	2032      	movs	r0, #50	@ 0x32
 8001d2e:	f7ff fe21 	bl	8001974 <DrawText>
}
 8001d32:	bf00      	nop
 8001d34:	3740      	adds	r7, #64	@ 0x40
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	080125fc 	.word	0x080125fc
 8001d40:	08012508 	.word	0x08012508
 8001d44:	08012598 	.word	0x08012598

08001d48 <MeasuringText>:
void IdleTimeText(char*time) {
	DrawText(50, 60, time, DARKPINK, WHITE, 3);

}

void MeasuringText() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af02      	add	r7, sp, #8

	DrawText(50, 100, "Measuring...", DARKPINK, WHITE, 3);
 8001d4e:	2303      	movs	r3, #3
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001d5c:	4a03      	ldr	r2, [pc, #12]	@ (8001d6c <MeasuringText+0x24>)
 8001d5e:	2164      	movs	r1, #100	@ 0x64
 8001d60:	2032      	movs	r0, #50	@ 0x32
 8001d62:	f7ff fe07 	bl	8001974 <DrawText>

}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	08012608 	.word	0x08012608

08001d70 <IdleText>:
void IdleText( float rTemp, float rHumidity) {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b0a3      	sub	sp, #140	@ 0x8c
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d7a:	edc7 0a00 	vstr	s1, [r7]

	char tem[50];
	char tempFloat[10];
	char hum[50];

	sprintf(tempFloat, "%.2f", rTemp);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fbfa 	bl	8000578 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001d8c:	4933      	ldr	r1, [pc, #204]	@ (8001e5c <IdleText+0xec>)
 8001d8e:	f00e fa11 	bl	80101b4 <siprintf>
	strcpy(tem, "Room Temp: ");
 8001d92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d96:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <IdleText+0xf0>)
 8001d98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat(tem, tempFloat);
 8001d9e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001da2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00e fb05 	bl	80103b8 <strcat>
	strcat(tem, " F");
 8001dae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fa74 	bl	80002a0 <strlen>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a28      	ldr	r2, [pc, #160]	@ (8001e64 <IdleText+0xf4>)
 8001dc4:	8811      	ldrh	r1, [r2, #0]
 8001dc6:	7892      	ldrb	r2, [r2, #2]
 8001dc8:	8019      	strh	r1, [r3, #0]
 8001dca:	709a      	strb	r2, [r3, #2]

	sprintf(tempFloat, "%.2f", rHumidity);
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7fe fbd3 	bl	8000578 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001dda:	4920      	ldr	r1, [pc, #128]	@ (8001e5c <IdleText+0xec>)
 8001ddc:	f00e f9ea 	bl	80101b4 <siprintf>
	strcpy(hum, "Room Humidity: ");
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <IdleText+0xf8>)
 8001de6:	461c      	mov	r4, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	strcat(hum, tempFloat);
 8001df0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f00e fadc 	bl	80103b8 <strcat>
	strcat(hum, "%");
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fa4b 	bl	80002a0 <strlen>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4413      	add	r3, r2
 8001e14:	4915      	ldr	r1, [pc, #84]	@ (8001e6c <IdleText+0xfc>)
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	8013      	strh	r3, [r2, #0]

	DrawText(50, 100, tem, DARKPINK, WHITE, 3);
 8001e1e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001e22:	2303      	movs	r3, #3
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001e30:	2164      	movs	r1, #100	@ 0x64
 8001e32:	2032      	movs	r0, #50	@ 0x32
 8001e34:	f7ff fd9e 	bl	8001974 <DrawText>
	DrawText(50, 140, hum, DARKPINK, WHITE, 3);
 8001e38:	f107 020c 	add.w	r2, r7, #12
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001e4a:	218c      	movs	r1, #140	@ 0x8c
 8001e4c:	2032      	movs	r0, #50	@ 0x32
 8001e4e:	f7ff fd91 	bl	8001974 <DrawText>

}
 8001e52:	bf00      	nop
 8001e54:	3784      	adds	r7, #132	@ 0x84
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	08012618 	.word	0x08012618
 8001e60:	08012620 	.word	0x08012620
 8001e64:	0801262c 	.word	0x0801262c
 8001e68:	08012630 	.word	0x08012630
 8001e6c:	08012640 	.word	0x08012640

08001e70 <ResultText>:
void ResultText(float bTemp, uint8_t hRate) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b0a5      	sub	sp, #148	@ 0x94
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	70fb      	strb	r3, [r7, #3]
		char btem[50];
		char tempFloat[10];
		char hr[50];
		char temp8t[10];

		if (bTemp == 0) {
 8001e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d10b      	bne.n	8001ea4 <ResultText+0x34>
			strcpy(btem, "Body Temp: N/A");
 8001e8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e90:	4a40      	ldr	r2, [pc, #256]	@ (8001f94 <ResultText+0x124>)
 8001e92:	461c      	mov	r4, r3
 8001e94:	4613      	mov	r3, r2
 8001e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e98:	c407      	stmia	r4!, {r0, r1, r2}
 8001e9a:	8023      	strh	r3, [r4, #0]
 8001e9c:	3402      	adds	r4, #2
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	7023      	strb	r3, [r4, #0]
 8001ea2:	e026      	b.n	8001ef2 <ResultText+0x82>
		}

		else {
			sprintf(tempFloat, "%.2f", bTemp);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7fe fb67 	bl	8000578 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001eb2:	4939      	ldr	r1, [pc, #228]	@ (8001f98 <ResultText+0x128>)
 8001eb4:	f00e f97e 	bl	80101b4 <siprintf>
			strcpy(btem, "Body Temp: ");
 8001eb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ebc:	4a37      	ldr	r2, [pc, #220]	@ (8001f9c <ResultText+0x12c>)
 8001ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			strcat(btem, tempFloat);
 8001ec4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001ec8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00e fa72 	bl	80103b8 <strcat>
			strcat(btem, " F");
 8001ed4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f9e1 	bl	80002a0 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa0 <ResultText+0x130>)
 8001eea:	8811      	ldrh	r1, [r2, #0]
 8001eec:	7892      	ldrb	r2, [r2, #2]
 8001eee:	8019      	strh	r1, [r3, #0]
 8001ef0:	709a      	strb	r2, [r3, #2]
		}

		if (hRate == 0) {
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <ResultText+0x9a>
			strcpy(hr , "Heart Rate: N/A");
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4a29      	ldr	r2, [pc, #164]	@ (8001fa4 <ResultText+0x134>)
 8001efe:	461c      	mov	r4, r3
 8001f00:	4613      	mov	r3, r2
 8001f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f08:	e025      	b.n	8001f56 <ResultText+0xe6>
		}

		else {
			sprintf(temp8t, "%d", hRate);
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4925      	ldr	r1, [pc, #148]	@ (8001fa8 <ResultText+0x138>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00e f94e 	bl	80101b4 <siprintf>
					strcpy(hr , "Heart Rate: ");
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4a23      	ldr	r2, [pc, #140]	@ (8001fac <ResultText+0x13c>)
 8001f1e:	461c      	mov	r4, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f24:	c407      	stmia	r4!, {r0, r1, r2}
 8001f26:	7023      	strb	r3, [r4, #0]
					strcat(hr, temp8t);
 8001f28:	f107 0208 	add.w	r2, r7, #8
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00e fa40 	bl	80103b8 <strcat>
					strcat(hr, " bpm");
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f9af 	bl	80002a0 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <ResultText+0x140>)
 8001f4e:	6810      	ldr	r0, [r2, #0]
 8001f50:	6018      	str	r0, [r3, #0]
 8001f52:	7912      	ldrb	r2, [r2, #4]
 8001f54:	711a      	strb	r2, [r3, #4]
		}


		DrawText(50, 100, btem, DARKPINK, WHITE, 3);
 8001f56:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001f68:	2164      	movs	r1, #100	@ 0x64
 8001f6a:	2032      	movs	r0, #50	@ 0x32
 8001f6c:	f7ff fd02 	bl	8001974 <DrawText>
		DrawText(50, 140 , hr, DARKPINK, WHITE, 3);
 8001f70:	f107 0214 	add.w	r2, r7, #20
 8001f74:	2303      	movs	r3, #3
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f24d 23bb 	movw	r3, #53947	@ 0xd2bb
 8001f82:	218c      	movs	r1, #140	@ 0x8c
 8001f84:	2032      	movs	r0, #50	@ 0x32
 8001f86:	f7ff fcf5 	bl	8001974 <DrawText>

}
 8001f8a:	bf00      	nop
 8001f8c:	378c      	adds	r7, #140	@ 0x8c
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	08012644 	.word	0x08012644
 8001f98:	08012618 	.word	0x08012618
 8001f9c:	08012654 	.word	0x08012654
 8001fa0:	0801262c 	.word	0x0801262c
 8001fa4:	08012660 	.word	0x08012660
 8001fa8:	08012670 	.word	0x08012670
 8001fac:	08012674 	.word	0x08012674
 8001fb0:	08012684 	.word	0x08012684

08001fb4 <HeartErrorText>:

void HeartErrorText () { // 170, 170,
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af02      	add	r7, sp, #8
	DrawText(170, 180, "Invalid HR", RED, WHITE, 3);
 8001fba:	2303      	movs	r3, #3
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fc8:	4a03      	ldr	r2, [pc, #12]	@ (8001fd8 <HeartErrorText+0x24>)
 8001fca:	21b4      	movs	r1, #180	@ 0xb4
 8001fcc:	20aa      	movs	r0, #170	@ 0xaa
 8001fce:	f7ff fcd1 	bl	8001974 <DrawText>
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	0801268c 	.word	0x0801268c

08001fdc <TempErrorText>:

void TempErrorText() {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af02      	add	r7, sp, #8
	DrawText(50, 60, "Invalid Temp", RED, WHITE, 3);
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ff0:	4a03      	ldr	r2, [pc, #12]	@ (8002000 <TempErrorText+0x24>)
 8001ff2:	213c      	movs	r1, #60	@ 0x3c
 8001ff4:	2032      	movs	r0, #50	@ 0x32
 8001ff6:	f7ff fcbd 	bl	8001974 <DrawText>
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	08012698 	.word	0x08012698

08002004 <DrawBitmap>:


void DrawBitmap (int16_t x, int16_t y, uint16_t *bitmap, uint8_t *mask, int16_t w, int16_t h) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60ba      	str	r2, [r7, #8]
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4603      	mov	r3, r0
 8002010:	81fb      	strh	r3, [r7, #14]
 8002012:	460b      	mov	r3, r1
 8002014:	81bb      	strh	r3, [r7, #12]
    int16_t bw   = (w + 7) / 8; // Bitmask scanline pad = whole byte
 8002016:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800201a:	3307      	adds	r3, #7
 800201c:	2b00      	cmp	r3, #0
 800201e:	da00      	bge.n	8002022 <DrawBitmap+0x1e>
 8002020:	3307      	adds	r3, #7
 8002022:	10db      	asrs	r3, r3, #3
 8002024:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
    // startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 800202a:	2300      	movs	r3, #0
 800202c:	82bb      	strh	r3, [r7, #20]
 800202e:	e051      	b.n	80020d4 <DrawBitmap+0xd0>
        for(int16_t i=0; i<w; i++ ) {
 8002030:	2300      	movs	r3, #0
 8002032:	827b      	strh	r3, [r7, #18]
 8002034:	e03c      	b.n	80020b0 <DrawBitmap+0xac>
            if(i & 7) byte <<= 1;
 8002036:	8a7b      	ldrh	r3, [r7, #18]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <DrawBitmap+0x44>
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
 8002046:	e012      	b.n	800206e <DrawBitmap+0x6a>
            else byte   = mask[j * bw + i / 8];
 8002048:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800204c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002050:	fb03 f202 	mul.w	r2, r3, r2
 8002054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da00      	bge.n	800205e <DrawBitmap+0x5a>
 800205c:	3307      	adds	r3, #7
 800205e:	10db      	asrs	r3, r3, #3
 8002060:	b21b      	sxth	r3, r3
 8002062:	4413      	add	r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	75fb      	strb	r3, [r7, #23]
            if(byte & 0x80) {
 800206e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002072:	2b00      	cmp	r3, #0
 8002074:	da16      	bge.n	80020a4 <DrawBitmap+0xa0>

                DrawPixel(x+i, y, bitmap[j * w + i]);
 8002076:	89fa      	ldrh	r2, [r7, #14]
 8002078:	8a7b      	ldrh	r3, [r7, #18]
 800207a:	4413      	add	r3, r2
 800207c:	b29b      	uxth	r3, r3
 800207e:	b218      	sxth	r0, r3
 8002080:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002084:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002088:	fb03 f202 	mul.w	r2, r3, r2
 800208c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002090:	4413      	add	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	4413      	add	r3, r2
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800209e:	4619      	mov	r1, r3
 80020a0:	f7ff f9f9 	bl	8001496 <DrawPixel>
        for(int16_t i=0; i<w; i++ ) {
 80020a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	827b      	strh	r3, [r7, #18]
 80020b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbbc      	blt.n	8002036 <DrawBitmap+0x32>
    for(int16_t j=0; j<h; j++, y++) {
 80020bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	82bb      	strh	r3, [r7, #20]
 80020c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	81bb      	strh	r3, [r7, #12]
 80020d4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80020dc:	429a      	cmp	r2, r3
 80020de:	dba7      	blt.n	8002030 <DrawBitmap+0x2c>
            }
        }
    }
    // endWrite();
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <DrawChanseyCorner>:

void DrawChanseyCorner () {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af02      	add	r7, sp, #8
	  DrawBitmap (10, 170, Chansey_bitmap, Chansey_mask, 150, 150);
 80020f2:	2396      	movs	r3, #150	@ 0x96
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2396      	movs	r3, #150	@ 0x96
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4b04      	ldr	r3, [pc, #16]	@ (800210c <DrawChanseyCorner+0x20>)
 80020fc:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <DrawChanseyCorner+0x24>)
 80020fe:	21aa      	movs	r1, #170	@ 0xaa
 8002100:	200a      	movs	r0, #10
 8002102:	f7ff ff7f 	bl	8002004 <DrawBitmap>
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	0801da78 	.word	0x0801da78
 8002110:	08012ab0 	.word	0x08012ab0

08002114 <FillScreenExceptCorner>:


void FillScreenExceptCorner(uint16_t color) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af02      	add	r7, sp, #8
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
	FillRect(0, 0, 480, 170, color);
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	23aa      	movs	r3, #170	@ 0xaa
 8002124:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002128:	2100      	movs	r1, #0
 800212a:	2000      	movs	r0, #0
 800212c:	f7ff faf2 	bl	8001714 <FillRect>
	FillRect(160, 0, 480-160, 320, color);
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002138:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800213c:	2100      	movs	r1, #0
 800213e:	20a0      	movs	r0, #160	@ 0xa0
 8002140:	f7ff fae8 	bl	8001714 <FillRect>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <SensorInit>:
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_Delay(100);
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
	  HAL_Delay(100);
}
void SensorInit(  uint32_t *refSpadCount, uint8_t *isApertureSpads, uint8_t *VhvSettings, uint8_t *PhaseCal){
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
	  VL53L0X_WaitDeviceBooted(Dev);
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <SensorInit+0x5c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f009 f85c 	bl	800b21c <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit(Dev);
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <SensorInit+0x5c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f008 fd73 	bl	800ac54 <VL53L0X_DataInit>
	  VL53L0X_StaticInit(Dev);
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <SensorInit+0x5c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f008 fed2 	bl	800af1c <VL53L0X_StaticInit>
	  VL53L0X_PerformRefSpadManagement(Dev, VhvSettings, PhaseCal);
 8002178:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <SensorInit+0x5c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	f00a f9d3 	bl	800c52c <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_PerformRefCalibration(Dev, refSpadCount, isApertureSpads);
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <SensorInit+0x5c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	4618      	mov	r0, r3
 8002190:	f009 fd4a 	bl	800bc28 <VL53L0X_PerformRefCalibration>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SensorInit+0x5c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f009 f8dc 	bl	800b358 <VL53L0X_SetDeviceMode>
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20040030 	.word	0x20040030

080021ac <checkForBeat>:
 * @param sample IR sample to analyze
 * @return true if a heartbeat was detected
 * @return false if no heartbeat was detected
 */
bool checkForBeat(int32_t sample)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    bool beatDetected = false;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]

    /* Save current state */
    hrState.IR_AC_Signal_Previous = hrState.IR_AC_Signal_Current;
 80021b8:	4b47      	ldr	r3, [pc, #284]	@ (80022d8 <checkForBeat+0x12c>)
 80021ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80021be:	4b46      	ldr	r3, [pc, #280]	@ (80022d8 <checkForBeat+0x12c>)
 80021c0:	80da      	strh	r2, [r3, #6]
  
    /* Process next data sample */
    hrState.IR_Average_Estimated = averageDCEstimator(&hrState.ir_avg_reg, sample);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	4844      	ldr	r0, [pc, #272]	@ (80022dc <checkForBeat+0x130>)
 80021ca:	f000 f889 	bl	80022e0 <averageDCEstimator>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <checkForBeat+0x12c>)
 80021d4:	819a      	strh	r2, [r3, #12]
    hrState.IR_AC_Signal_Current = lowPassFIRFilter(sample - hrState.IR_Average_Estimated);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	4b3f      	ldr	r3, [pc, #252]	@ (80022d8 <checkForBeat+0x12c>)
 80021dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f895 	bl	8002318 <lowPassFIRFilter>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <checkForBeat+0x12c>)
 80021f4:	809a      	strh	r2, [r3, #4]

    /* Detect positive zero crossing (rising edge) */
    if ((hrState.IR_AC_Signal_Previous < 0) && (hrState.IR_AC_Signal_Current >= 0))
 80021f6:	4b38      	ldr	r3, [pc, #224]	@ (80022d8 <checkForBeat+0x12c>)
 80021f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	da2e      	bge.n	800225e <checkForBeat+0xb2>
 8002200:	4b35      	ldr	r3, [pc, #212]	@ (80022d8 <checkForBeat+0x12c>)
 8002202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db29      	blt.n	800225e <checkForBeat+0xb2>
    {
        hrState.IR_AC_Max = hrState.IR_AC_Signal_max; /* Adjust our AC max and min */
 800220a:	4b33      	ldr	r3, [pc, #204]	@ (80022d8 <checkForBeat+0x12c>)
 800220c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002210:	4b31      	ldr	r3, [pc, #196]	@ (80022d8 <checkForBeat+0x12c>)
 8002212:	801a      	strh	r2, [r3, #0]
        hrState.IR_AC_Min = hrState.IR_AC_Signal_min;
 8002214:	4b30      	ldr	r3, [pc, #192]	@ (80022d8 <checkForBeat+0x12c>)
 8002216:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800221a:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <checkForBeat+0x12c>)
 800221c:	805a      	strh	r2, [r3, #2]

        hrState.positiveEdge = 1;
 800221e:	4b2e      	ldr	r3, [pc, #184]	@ (80022d8 <checkForBeat+0x12c>)
 8002220:	2201      	movs	r2, #1
 8002222:	81da      	strh	r2, [r3, #14]
        hrState.negativeEdge = 0;
 8002224:	4b2c      	ldr	r3, [pc, #176]	@ (80022d8 <checkForBeat+0x12c>)
 8002226:	2200      	movs	r2, #0
 8002228:	821a      	strh	r2, [r3, #16]
        hrState.IR_AC_Signal_max = 0;
 800222a:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <checkForBeat+0x12c>)
 800222c:	2200      	movs	r2, #0
 800222e:	815a      	strh	r2, [r3, #10]

        /* Check if we detected a heart beat */
        if ((hrState.IR_AC_Max - hrState.IR_AC_Min) > 20 && (hrState.IR_AC_Max - hrState.IR_AC_Min) < 1000)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <checkForBeat+0x12c>)
 8002232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002236:	461a      	mov	r2, r3
 8002238:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <checkForBeat+0x12c>)
 800223a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b14      	cmp	r3, #20
 8002242:	dd0c      	ble.n	800225e <checkForBeat+0xb2>
 8002244:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <checkForBeat+0x12c>)
 8002246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224a:	461a      	mov	r2, r3
 800224c:	4b22      	ldr	r3, [pc, #136]	@ (80022d8 <checkForBeat+0x12c>)
 800224e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002258:	da01      	bge.n	800225e <checkForBeat+0xb2>
        {
            /* Heart beat detected! */
            beatDetected = true;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
        }
    }

    /* Detect negative zero crossing (falling edge) */
    if ((hrState.IR_AC_Signal_Previous > 0) && (hrState.IR_AC_Signal_Current <= 0))
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <checkForBeat+0x12c>)
 8002260:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	dd0d      	ble.n	8002284 <checkForBeat+0xd8>
 8002268:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <checkForBeat+0x12c>)
 800226a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dc08      	bgt.n	8002284 <checkForBeat+0xd8>
    {
        hrState.positiveEdge = 0;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <checkForBeat+0x12c>)
 8002274:	2200      	movs	r2, #0
 8002276:	81da      	strh	r2, [r3, #14]
        hrState.negativeEdge = 1;
 8002278:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <checkForBeat+0x12c>)
 800227a:	2201      	movs	r2, #1
 800227c:	821a      	strh	r2, [r3, #16]
        hrState.IR_AC_Signal_min = 0;
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <checkForBeat+0x12c>)
 8002280:	2200      	movs	r2, #0
 8002282:	811a      	strh	r2, [r3, #8]
    }

    /* Find Maximum value in positive cycle */
    if (hrState.positiveEdge && (hrState.IR_AC_Signal_Current > hrState.IR_AC_Signal_Previous))
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <checkForBeat+0x12c>)
 8002286:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <checkForBeat+0xfc>
 800228e:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <checkForBeat+0x12c>)
 8002290:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <checkForBeat+0x12c>)
 8002296:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800229a:	429a      	cmp	r2, r3
 800229c:	dd04      	ble.n	80022a8 <checkForBeat+0xfc>
    {
        hrState.IR_AC_Signal_max = hrState.IR_AC_Signal_Current;
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <checkForBeat+0x12c>)
 80022a0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <checkForBeat+0x12c>)
 80022a6:	815a      	strh	r2, [r3, #10]
    }

    /* Find Minimum value in negative cycle */
    if (hrState.negativeEdge && (hrState.IR_AC_Signal_Current < hrState.IR_AC_Signal_Previous))
 80022a8:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <checkForBeat+0x12c>)
 80022aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <checkForBeat+0x120>
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <checkForBeat+0x12c>)
 80022b4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <checkForBeat+0x12c>)
 80022ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022be:	429a      	cmp	r2, r3
 80022c0:	da04      	bge.n	80022cc <checkForBeat+0x120>
    {
        hrState.IR_AC_Signal_min = hrState.IR_AC_Signal_Current;
 80022c2:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <checkForBeat+0x12c>)
 80022c4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <checkForBeat+0x12c>)
 80022ca:	811a      	strh	r2, [r3, #8]
    }
  
    return beatDetected;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200404f0 	.word	0x200404f0
 80022dc:	20040504 	.word	0x20040504

080022e0 <averageDCEstimator>:
 * @param p Pointer to the previous DC value
 * @param x New sample
 * @return int16_t New DC value
 */
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
    *p += ((((long)x << 15) - *p) >> 4);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	03d9      	lsls	r1, r3, #15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1acb      	subs	r3, r1, r3
 80022fa:	111b      	asrs	r3, r3, #4
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
    return (*p >> 15);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	13db      	asrs	r3, r3, #15
 8002308:	b21b      	sxth	r3, r3
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <lowPassFIRFilter>:
 * 
 * @param din Input sample
 * @return int16_t Filtered output
 */
int16_t lowPassFIRFilter(int16_t din)
{  
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
    hrState.cbuf[hrState.offset] = din;
 8002322:	4b32      	ldr	r3, [pc, #200]	@ (80023ec <lowPassFIRFilter+0xd4>)
 8002324:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002328:	4930      	ldr	r1, [pc, #192]	@ (80023ec <lowPassFIRFilter+0xd4>)
 800232a:	330c      	adds	r3, #12
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    int32_t z = mul16(FIRCoeffs[11], hrState.cbuf[(hrState.offset - 11) & 0x1F]);
 8002332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002336:	b21a      	sxth	r2, r3
 8002338:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <lowPassFIRFilter+0xd4>)
 800233a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800233e:	3b0b      	subs	r3, #11
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	4929      	ldr	r1, [pc, #164]	@ (80023ec <lowPassFIRFilter+0xd4>)
 8002346:	330c      	adds	r3, #12
 8002348:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 f850 	bl	80023f4 <mul16>
 8002354:	60f8      	str	r0, [r7, #12]
  
    for (uint8_t i = 0; i < 11; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	72fb      	strb	r3, [r7, #11]
 800235a:	e02c      	b.n	80023b6 <lowPassFIRFilter+0x9e>
    {
        z += mul16(FIRCoeffs[i], hrState.cbuf[(hrState.offset - i) & 0x1F] + 
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	4a24      	ldr	r2, [pc, #144]	@ (80023f0 <lowPassFIRFilter+0xd8>)
 8002360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002364:	b218      	sxth	r0, r3
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <lowPassFIRFilter+0xd4>)
 8002368:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <lowPassFIRFilter+0xd4>)
 8002378:	330c      	adds	r3, #12
 800237a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800237e:	b29a      	uxth	r2, r3
                  hrState.cbuf[(hrState.offset - 22 + i) & 0x1F]);
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <lowPassFIRFilter+0xd4>)
 8002382:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002386:	f1a3 0116 	sub.w	r1, r3, #22
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	440b      	add	r3, r1
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	4916      	ldr	r1, [pc, #88]	@ (80023ec <lowPassFIRFilter+0xd4>)
 8002394:	330c      	adds	r3, #12
 8002396:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800239a:	b29b      	uxth	r3, r3
        z += mul16(FIRCoeffs[i], hrState.cbuf[(hrState.offset - i) & 0x1F] + 
 800239c:	4413      	add	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	f000 f826 	bl	80023f4 <mul16>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4413      	add	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 11; i++)
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	3301      	adds	r3, #1
 80023b4:	72fb      	strb	r3, [r7, #11]
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	2b0a      	cmp	r3, #10
 80023ba:	d9cf      	bls.n	800235c <lowPassFIRFilter+0x44>
    }

    hrState.offset++;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <lowPassFIRFilter+0xd4>)
 80023be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <lowPassFIRFilter+0xd4>)
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    hrState.offset %= 32; /* Wrap condition */
 80023cc:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <lowPassFIRFilter+0xd4>)
 80023ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <lowPassFIRFilter+0xd4>)
 80023da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return (z >> 15);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	13db      	asrs	r3, r3, #15
 80023e2:	b21b      	sxth	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200404f0 	.word	0x200404f0
 80023f0:	0801ea9c 	.word	0x0801ea9c

080023f4 <mul16>:
 * @param x First operand
 * @param y Second operand
 * @return int32_t Product of x and y
 */
int32_t mul16(int16_t x, int16_t y)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	460a      	mov	r2, r1
 80023fe:	80fb      	strh	r3, [r7, #6]
 8002400:	4613      	mov	r3, r2
 8002402:	80bb      	strh	r3, [r7, #4]
    return ((int32_t)x * (int32_t)y);
 8002404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002408:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800240c:	fb02 f303 	mul.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <heart_rate_init>:

float beatsPerMinute;
int beatAvg;

void heart_rate_init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af04      	add	r7, sp, #16
  //Serial.begin(115200);
  printf("Initializing...\r\n");
 8002422:	4816      	ldr	r0, [pc, #88]	@ (800247c <heart_rate_init+0x60>)
 8002424:	f00d febe 	bl	80101a4 <puts>

  // Initialize sensor
  if (!max30105_init(&particleSensor, &hi2c1))  
 8002428:	4915      	ldr	r1, [pc, #84]	@ (8002480 <heart_rate_init+0x64>)
 800242a:	4816      	ldr	r0, [pc, #88]	@ (8002484 <heart_rate_init+0x68>)
 800242c:	f001 fa3c 	bl	80038a8 <max30105_init>
 8002430:	4603      	mov	r3, r0
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <heart_rate_init+0x26>
  {
    printf("MAX30105 was not found. Please check wiring/power. ");
 800243c:	4812      	ldr	r0, [pc, #72]	@ (8002488 <heart_rate_init+0x6c>)
 800243e:	f00d fe41 	bl	80100c4 <iprintf>
//    while (1);
  }
  printf("Place your index finger on the sensor with steady pressure.\r\n");
 8002442:	4812      	ldr	r0, [pc, #72]	@ (800248c <heart_rate_init+0x70>)
 8002444:	f00d feae 	bl	80101a4 <puts>

  max30105_setup(&particleSensor, 0x1F, 4, 2, 400, 411, 4096);
 8002448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	f240 139b 	movw	r3, #411	@ 0x19b
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2302      	movs	r3, #2
 800245c:	2204      	movs	r2, #4
 800245e:	211f      	movs	r1, #31
 8002460:	4808      	ldr	r0, [pc, #32]	@ (8002484 <heart_rate_init+0x68>)
 8002462:	f001 fba7 	bl	8003bb4 <max30105_setup>
  max30105_setPulseAmplitudeRed(&particleSensor, 0x0A);
 8002466:	210a      	movs	r1, #10
 8002468:	4806      	ldr	r0, [pc, #24]	@ (8002484 <heart_rate_init+0x68>)
 800246a:	f001 fab9 	bl	80039e0 <max30105_setPulseAmplitudeRed>
  max30105_setPulseAmplitudeGreen(&particleSensor, 0);
 800246e:	2100      	movs	r1, #0
 8002470:	4804      	ldr	r0, [pc, #16]	@ (8002484 <heart_rate_init+0x68>)
 8002472:	f001 fad5 	bl	8003a20 <max30105_setPulseAmplitudeGreen>
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	080126a8 	.word	0x080126a8
 8002480:	200406ec 	.word	0x200406ec
 8002484:	2004054c 	.word	0x2004054c
 8002488:	080126bc 	.word	0x080126bc
 800248c:	080126f0 	.word	0x080126f0

08002490 <heart_rate_task>:

int heart_rate_task(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0

  uint32_t irValue = max30105_getIR(&particleSensor);
 8002496:	483c      	ldr	r0, [pc, #240]	@ (8002588 <heart_rate_task+0xf8>)
 8002498:	f001 fcb3 	bl	8003e02 <max30105_getIR>
 800249c:	6138      	str	r0, [r7, #16]
  if (checkForBeat(irValue) == true)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe83 	bl	80021ac <checkForBeat>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d066      	beq.n	800257a <heart_rate_task+0xea>
  {
    //We sensed a beat!
    uint32_t delta = HAL_GetTick() - lastBeat;
 80024ac:	f003 fa76 	bl	800599c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b36      	ldr	r3, [pc, #216]	@ (800258c <heart_rate_task+0xfc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	60fb      	str	r3, [r7, #12]
    lastBeat = HAL_GetTick();
 80024ba:	f003 fa6f 	bl	800599c <HAL_GetTick>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a32      	ldr	r2, [pc, #200]	@ (800258c <heart_rate_task+0xfc>)
 80024c2:	6013      	str	r3, [r2, #0]

    beatsPerMinute = 60 / ((float)delta / 1000.0f);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ce:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002590 <heart_rate_task+0x100>
 80024d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024d6:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002594 <heart_rate_task+0x104>
 80024da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024de:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <heart_rate_task+0x108>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80024e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002598 <heart_rate_task+0x108>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800259c <heart_rate_task+0x10c>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d540      	bpl.n	800257a <heart_rate_task+0xea>
 80024f8:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <heart_rate_task+0x108>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	dd36      	ble.n	800257a <heart_rate_task+0xea>
    {
      rates[rateSpot++] = (uint8_t)beatsPerMinute; //Store this reading in the array
 800250c:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <heart_rate_task+0x108>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <heart_rate_task+0x110>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	b2d1      	uxtb	r1, r2
 800251a:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <heart_rate_task+0x110>)
 800251c:	7011      	strb	r1, [r2, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002524:	edc7 7a01 	vstr	s15, [r7, #4]
 8002528:	793b      	ldrb	r3, [r7, #4]
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <heart_rate_task+0x114>)
 800252e:	5499      	strb	r1, [r3, r2]
      rateSpot %= RATE_SIZE; //Wrap variable
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <heart_rate_task+0x110>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <heart_rate_task+0x110>)
 800253c:	701a      	strb	r2, [r3, #0]

      //Take average of readings
      beatAvg = 0;
 800253e:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <heart_rate_task+0x118>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
      for (uint8_t x = 0 ; x < RATE_SIZE ; x++){
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
 8002548:	e00b      	b.n	8002562 <heart_rate_task+0xd2>
          beatAvg += rates[x];
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	4a15      	ldr	r2, [pc, #84]	@ (80025a4 <heart_rate_task+0x114>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	461a      	mov	r2, r3
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <heart_rate_task+0x118>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <heart_rate_task+0x118>)
 800255a:	6013      	str	r3, [r2, #0]
      for (uint8_t x = 0 ; x < RATE_SIZE ; x++){
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	3301      	adds	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d9f0      	bls.n	800254a <heart_rate_task+0xba>
      }
      beatAvg /= RATE_SIZE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <heart_rate_task+0x118>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	da00      	bge.n	8002572 <heart_rate_task+0xe2>
 8002570:	3303      	adds	r3, #3
 8002572:	109b      	asrs	r3, r3, #2
 8002574:	461a      	mov	r2, r3
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <heart_rate_task+0x118>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  //printf("IR=%ld", irValue);
  //printf(", BPM=%.1f", beatsPerMinute);
  //printf(", Avg BPM=%d", beatAvg);
  return beatAvg;
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <heart_rate_task+0x118>)
 800257c:	681b      	ldr	r3, [r3, #0]
	  //printf("No finger?");
  //}

    //printf("\r\n");

}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2004054c 	.word	0x2004054c
 800258c:	200406e0 	.word	0x200406e0
 8002590:	447a0000 	.word	0x447a0000
 8002594:	42700000 	.word	0x42700000
 8002598:	200406e4 	.word	0x200406e4
 800259c:	437f0000 	.word	0x437f0000
 80025a0:	200406dc 	.word	0x200406dc
 80025a4:	200406d8 	.word	0x200406d8
 80025a8:	200406e8 	.word	0x200406e8

080025ac <final_hr_result>:

int final_hr_result(void){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0f0      	sub	sp, #448	@ 0x1c0
 80025b0:	af00      	add	r7, sp, #0
	  int done = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
	  int counter = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	  int buffer[100] = {0};
 80025be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025c2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80025cc:	461a      	mov	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f00d feea 	bl	80103a8 <memset>
	  uint32_t start_time;
	  int real_hr;
	while (done!= 2)
 80025d4:	e0e6      	b.n	80027a4 <final_hr_result+0x1f8>
	  {

		   int hr = heart_rate_task();
 80025d6:	f7ff ff5b 	bl	8002490 <heart_rate_task>
 80025da:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
		   if(hr != 0 && done == 0){
 80025de:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <final_hr_result+0x66>
 80025e6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d111      	bne.n	8002612 <final_hr_result+0x66>
			   start_time = HAL_GetTick();
 80025ee:	f003 f9d5 	bl	800599c <HAL_GetTick>
 80025f2:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
			   done = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
			   FillScreenExceptCorner(0xFFFF);
 80025fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002600:	f7ff fd88 	bl	8002114 <FillScreenExceptCorner>

			   MeasuringText();
 8002604:	f7ff fba0 	bl	8001d48 <MeasuringText>
			   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 8002608:	2201      	movs	r2, #1
 800260a:	2140      	movs	r1, #64	@ 0x40
 800260c:	486b      	ldr	r0, [pc, #428]	@ (80027bc <final_hr_result+0x210>)
 800260e:	f003 fc99 	bl	8005f44 <HAL_GPIO_WritePin>
		   memset(buffer, 0, sizeof(buffer));  // Zero all bytes
		   }*/



		   if((HAL_GetTick() - start_time >= 9000) && done == 1){
 8002612:	f003 f9c3 	bl	800599c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002622:	4293      	cmp	r3, r2
 8002624:	f240 80be 	bls.w	80027a4 <final_hr_result+0x1f8>
 8002628:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800262c:	2b01      	cmp	r3, #1
 800262e:	f040 80b9 	bne.w	80027a4 <final_hr_result+0x1f8>

			   printf("final heart result is = %d\r\n", hr);
 8002632:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8002636:	4862      	ldr	r0, [pc, #392]	@ (80027c0 <final_hr_result+0x214>)
 8002638:	f00d fd44 	bl	80100c4 <iprintf>
			   if(counter < 100 && hr != 0){
 800263c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002640:	2b63      	cmp	r3, #99	@ 0x63
 8002642:	dc12      	bgt.n	800266a <final_hr_result+0xbe>
 8002644:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <final_hr_result+0xbe>
				   buffer[counter] = hr;
 800264c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002650:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002654:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002658:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				   counter++;
 8002660:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002664:	3301      	adds	r3, #1
 8002666:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
			   }

			   if(counter == 100){
 800266a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	f040 8098 	bne.w	80027a4 <final_hr_result+0x1f8>
				   printf("[");
 8002674:	205b      	movs	r0, #91	@ 0x5b
 8002676:	f00d fd37 	bl	80100e8 <putchar>
				   double reciprocal_sum = 0.0;
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
				   double normal_sum = 0.0;
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
				   for(int i = 0; i < 100; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002698:	e041      	b.n	800271e <final_hr_result+0x172>
					   printf("%d, ", buffer[i]);
 800269a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800269e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80026a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4845      	ldr	r0, [pc, #276]	@ (80027c4 <final_hr_result+0x218>)
 80026ae:	f00d fd09 	bl	80100c4 <iprintf>
					   reciprocal_sum += 1.0/buffer[i];
 80026b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff46 	bl	8000554 <__aeabi_i2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	f04f 0000 	mov.w	r0, #0
 80026d0:	493d      	ldr	r1, [pc, #244]	@ (80027c8 <final_hr_result+0x21c>)
 80026d2:	f7fe f8d3 	bl	800087c <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80026de:	f7fd fded 	bl	80002bc <__adddf3>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
					   normal_sum += buffer[i];
 80026ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ee:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80026f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff2a 	bl	8000554 <__aeabi_i2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002708:	f7fd fdd8 	bl	80002bc <__adddf3>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
				   for(int i = 0; i < 100; i++){
 8002714:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002718:	3301      	adds	r3, #1
 800271a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800271e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002722:	2b63      	cmp	r3, #99	@ 0x63
 8002724:	ddb9      	ble.n	800269a <final_hr_result+0xee>
				   }
				   printf("]\n");
 8002726:	4829      	ldr	r0, [pc, #164]	@ (80027cc <final_hr_result+0x220>)
 8002728:	f00d fd3c 	bl	80101a4 <puts>
				   real_hr = (int)(100/reciprocal_sum);
 800272c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8002730:	f04f 0000 	mov.w	r0, #0
 8002734:	4926      	ldr	r1, [pc, #152]	@ (80027d0 <final_hr_result+0x224>)
 8002736:	f7fe f8a1 	bl	800087c <__aeabi_ddiv>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe fa21 	bl	8000b88 <__aeabi_d2iz>
 8002746:	4603      	mov	r3, r0
 8002748:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
				   int really_hr = (int)(normal_sum/100);
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <final_hr_result+0x224>)
 8002752:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002756:	f7fe f891 	bl	800087c <__aeabi_ddiv>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fa11 	bl	8000b88 <__aeabi_d2iz>
 8002766:	4603      	mov	r3, r0
 8002768:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
				   int combo = (int)((real_hr + really_hr)/2);
 800276c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8002770:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002774:	4413      	add	r3, r2
 8002776:	0fda      	lsrs	r2, r3, #31
 8002778:	4413      	add	r3, r2
 800277a:	105b      	asrs	r3, r3, #1
 800277c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				   printf("Heart rate is (harmonic): %d\n", real_hr);
 8002780:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8002784:	4813      	ldr	r0, [pc, #76]	@ (80027d4 <final_hr_result+0x228>)
 8002786:	f00d fc9d 	bl	80100c4 <iprintf>
				   printf("Heart rate is (arithmetic): %d\n", really_hr);
 800278a:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 800278e:	4812      	ldr	r0, [pc, #72]	@ (80027d8 <final_hr_result+0x22c>)
 8002790:	f00d fc98 	bl	80100c4 <iprintf>

				   printf("Heart rate is (combo?): %d\n", combo);
 8002794:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 8002798:	4810      	ldr	r0, [pc, #64]	@ (80027dc <final_hr_result+0x230>)
 800279a:	f00d fc93 	bl	80100c4 <iprintf>

				   done = 2;
 800279e:	2302      	movs	r3, #2
 80027a0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
	while (done!= 2)
 80027a4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f47f af14 	bne.w	80025d6 <final_hr_result+0x2a>

			   }

		   }
	  }
	return real_hr;
 80027ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0

}
 80027b2:	4618      	mov	r0, r3
 80027b4:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	48001000 	.word	0x48001000
 80027c0:	08012730 	.word	0x08012730
 80027c4:	08012750 	.word	0x08012750
 80027c8:	3ff00000 	.word	0x3ff00000
 80027cc:	08012758 	.word	0x08012758
 80027d0:	40590000 	.word	0x40590000
 80027d4:	0801275c 	.word	0x0801275c
 80027d8:	0801277c 	.word	0x0801277c
 80027dc:	0801279c 	.word	0x0801279c

080027e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b0a6      	sub	sp, #152	@ 0x98
 80027e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e6:	f003 f870 	bl	80058ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ea:	f000 fc17 	bl	800301c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ee:	f000 fdff 	bl	80033f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80027f2:	f000 fc59 	bl	80030a8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80027f6:	f000 fc97 	bl	8003128 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80027fa:	f000 fce1 	bl	80031c0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80027fe:	f000 fd2b 	bl	8003258 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002802:	f000 fd67 	bl	80032d4 <MX_SPI3_Init>
  MX_TIM4_Init();
 8002806:	f000 fda3 	bl	8003350 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  HAL_TIM_Base_Start_IT(&htim4);
 800280a:	48b1      	ldr	r0, [pc, #708]	@ (8002ad0 <main+0x2f0>)
 800280c:	f006 fec4 	bl	8009598 <HAL_TIM_Base_Start_IT>


  enum States Chansey = IDLE;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  //IDLE STATE VARIABLES
  float buffer[2] = {0};
 8002816:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
  uint8_t RFID_bool = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  uint8_t distance_bool = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  uint8_t counter = 0; //to not read temperature every single time we perform loop
 800282c:	2300      	movs	r3, #0
 800282e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

  //RFID VARIABLES
  uint8_t str[MAX_LEN] = {0};
 8002832:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
  uint8_t serNum[5] = {0};
 8002840:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	711a      	strb	r2, [r3, #4]
  uint8_t R[16] = {0};
 800284a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
  uint8_t TrainerNum = DEFAULT;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

  //PILL VARIABLES
  uint8_t pill_dispensed;

  // COMMUNICATION VARIABLES
	int sent = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	67bb      	str	r3, [r7, #120]	@ 0x78
  //DISTANCE SENSOR VARIABLES
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	  Dev->I2cHandle = &hi2c1;
 8002862:	4b9c      	ldr	r3, [pc, #624]	@ (8002ad4 <main+0x2f4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a9c      	ldr	r2, [pc, #624]	@ (8002ad8 <main+0x2f8>)
 8002868:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	  Dev->I2cDevAddr = 0x52;
 800286c:	4b99      	ldr	r3, [pc, #612]	@ (8002ad4 <main+0x2f4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2252      	movs	r2, #82	@ 0x52
 8002872:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	  // INITIALIZE DISPLAY
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); // CS HIGH
 8002876:	2201      	movs	r2, #1
 8002878:	2110      	movs	r1, #16
 800287a:	4898      	ldr	r0, [pc, #608]	@ (8002adc <main+0x2fc>)
 800287c:	f003 fb62 	bl	8005f44 <HAL_GPIO_WritePin>
	  DisplayBegin();
 8002880:	f7fe fc92 	bl	80011a8 <DisplayBegin>
	  FillScreen(0xFFFF);
 8002884:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002888:	f7fe ff28 	bl	80016dc <FillScreen>
	  DrawChanseyCorner();
 800288c:	f7ff fc2e 	bl	80020ec <DrawChanseyCorner>


	  // INITIALIZE HR
	  heart_rate_init(); // ** may have to do everytime heart is called
 8002890:	f7ff fdc4 	bl	800241c <heart_rate_init>
	  // DISPLAY VARIABLES
	  char* Msg ;
	  char* rfidName;

	  uint32_t timeOut;  // time in ms since startup
	  uint8_t  scanBool = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  uint8_t  heartBool = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	  uint8_t  tempBool = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2120      	movs	r1, #32
 80028aa:	488d      	ldr	r0, [pc, #564]	@ (8002ae0 <main+0x300>)
 80028ac:	f003 fb4a 	bl	8005f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2110      	movs	r1, #16
 80028b4:	488a      	ldr	r0, [pc, #552]	@ (8002ae0 <main+0x300>)
 80028b6:	f003 fb45 	bl	8005f44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2140      	movs	r1, #64	@ 0x40
 80028be:	4888      	ldr	r0, [pc, #544]	@ (8002ae0 <main+0x300>)
 80028c0:	f003 fb40 	bl	8005f44 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 HAL_Delay(10);
 80028c4:	200a      	movs	r0, #10
 80028c6:	f003 f875 	bl	80059b4 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2120      	movs	r1, #32
 80028ce:	4884      	ldr	r0, [pc, #528]	@ (8002ae0 <main+0x300>)
 80028d0:	f003 fb38 	bl	8005f44 <HAL_GPIO_WritePin>

	  	 printf("Chansey State: %d\r\n", Chansey);
 80028d4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80028d8:	4619      	mov	r1, r3
 80028da:	4882      	ldr	r0, [pc, #520]	@ (8002ae4 <main+0x304>)
 80028dc:	f00d fbf2 	bl	80100c4 <iprintf>
	  	printf("Time: %02u:%02u:%02u\r\n", hour, minute, second);
 80028e0:	4b81      	ldr	r3, [pc, #516]	@ (8002ae8 <main+0x308>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <main+0x30c>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b7f      	ldr	r3, [pc, #508]	@ (8002af0 <main+0x310>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	487f      	ldr	r0, [pc, #508]	@ (8002af4 <main+0x314>)
 80028f8:	f00d fbe4 	bl	80100c4 <iprintf>

	  	//sprintf(timeStr, "%02u:%02u:%02u", hour, minute, second);
		if (hour > 12) {
 80028fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae8 <main+0x308>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d90c      	bls.n	8002920 <main+0x140>
			//pm
			sprintf(timeStr, "%02u:%02u PM", hour-12, minute);
 8002906:	4b78      	ldr	r3, [pc, #480]	@ (8002ae8 <main+0x308>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f1a3 020c 	sub.w	r2, r3, #12
 8002910:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <main+0x30c>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4978      	ldr	r1, [pc, #480]	@ (8002af8 <main+0x318>)
 8002918:	4878      	ldr	r0, [pc, #480]	@ (8002afc <main+0x31c>)
 800291a:	f00d fc4b 	bl	80101b4 <siprintf>
 800291e:	e00a      	b.n	8002936 <main+0x156>
		}
		else {
			// am
			sprintf(timeStr, "%02u:%02u AM", hour, minute);
 8002920:	4b71      	ldr	r3, [pc, #452]	@ (8002ae8 <main+0x308>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	4b70      	ldr	r3, [pc, #448]	@ (8002aec <main+0x30c>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4974      	ldr	r1, [pc, #464]	@ (8002b00 <main+0x320>)
 8002930:	4872      	ldr	r0, [pc, #456]	@ (8002afc <main+0x31c>)
 8002932:	f00d fc3f 	bl	80101b4 <siprintf>

		}

		TimeCornerText(timeStr);
 8002936:	4871      	ldr	r0, [pc, #452]	@ (8002afc <main+0x31c>)
 8002938:	f7ff f8e6 	bl	8001b08 <TimeCornerText>

		 switch(Chansey) {
 800293c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002940:	2b06      	cmp	r3, #6
 8002942:	d8bf      	bhi.n	80028c4 <main+0xe4>
 8002944:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <main+0x16c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002969 	.word	0x08002969
 8002950:	08002c3d 	.word	0x08002c3d
 8002954:	08002d0f 	.word	0x08002d0f
 8002958:	08002da9 	.word	0x08002da9
 800295c:	08002ead 	.word	0x08002ead
 8002960:	08002f21 	.word	0x08002f21
 8002964:	08002f65 	.word	0x08002f65
		 	 case IDLE:
		 		//turn off the speaker
		 	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2110      	movs	r1, #16
 800296c:	485c      	ldr	r0, [pc, #368]	@ (8002ae0 <main+0x300>)
 800296e:	f003 fae9 	bl	8005f44 <HAL_GPIO_WritePin>
		 	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2120      	movs	r1, #32
 8002976:	485a      	ldr	r0, [pc, #360]	@ (8002ae0 <main+0x300>)
 8002978:	f003 fae4 	bl	8005f44 <HAL_GPIO_WritePin>
		 	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2140      	movs	r1, #64	@ 0x40
 8002980:	4857      	ldr	r0, [pc, #348]	@ (8002ae0 <main+0x300>)
 8002982:	f003 fadf 	bl	8005f44 <HAL_GPIO_WritePin>

		 		 rfidName = "";
 8002986:	4b5f      	ldr	r3, [pc, #380]	@ (8002b04 <main+0x324>)
 8002988:	677b      	str	r3, [r7, #116]	@ 0x74
		 		 Msg = "";
 800298a:	4b5e      	ldr	r3, [pc, #376]	@ (8002b04 <main+0x324>)
 800298c:	66bb      	str	r3, [r7, #104]	@ 0x68
			 	sent = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	67bb      	str	r3, [r7, #120]	@ 0x78

		 		 RFID_bool = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
		 		 distance_bool = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
		 		 //temperature and humidity logic

		 		 memcpy(old_buffer, buffer, 2);
 800299e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80029a2:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <main+0x328>)
 80029a4:	801a      	strh	r2, [r3, #0]
		 		//used to not read temperature/humidity all the time if not sensing
		 		 if(counter == 0){
 80029a6:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d14a      	bne.n	8002a44 <main+0x264>
		 			// get time variable

		 			if(temp_humid(buffer, &hi2c1)){
 80029ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029b2:	4949      	ldr	r1, [pc, #292]	@ (8002ad8 <main+0x2f8>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 ff37 	bl	8005828 <temp_humid>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01d      	beq.n	80029fc <main+0x21c>
		 					printf("Temperature & Humidity: %.2f, %.2f\r\n", buffer[0], buffer[1]);
 80029c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fdd8 	bl	8000578 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fdd2 	bl	8000578 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	e9cd 2300 	strd	r2, r3, [sp]
 80029dc:	4622      	mov	r2, r4
 80029de:	462b      	mov	r3, r5
 80029e0:	484a      	ldr	r0, [pc, #296]	@ (8002b0c <main+0x32c>)
 80029e2:	f00d fb6f 	bl	80100c4 <iprintf>
		 					IdleText(buffer[0], buffer[1]); // <-- Add this here
 80029e6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80029ea:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80029ee:	eef0 0a47 	vmov.f32	s1, s14
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	f7ff f9bb 	bl	8001d70 <IdleText>
 80029fa:	e020      	b.n	8002a3e <main+0x25e>
		 				}
		 				else{
		 					printf("Temp & Humidity not read: %.2f, %.2f\r\n", old_buffer[0], old_buffer[1]);
 80029fc:	4b42      	ldr	r3, [pc, #264]	@ (8002b08 <main+0x328>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fdb9 	bl	8000578 <__aeabi_f2d>
 8002a06:	4604      	mov	r4, r0
 8002a08:	460d      	mov	r5, r1
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b08 <main+0x328>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fdb2 	bl	8000578 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	e9cd 2300 	strd	r2, r3, [sp]
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	462b      	mov	r3, r5
 8002a20:	483b      	ldr	r0, [pc, #236]	@ (8002b10 <main+0x330>)
 8002a22:	f00d fb4f 	bl	80100c4 <iprintf>
		 					IdleText(old_buffer[0], old_buffer[1]);
 8002a26:	4b38      	ldr	r3, [pc, #224]	@ (8002b08 <main+0x328>)
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	4b36      	ldr	r3, [pc, #216]	@ (8002b08 <main+0x328>)
 8002a2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a32:	eef0 0a47 	vmov.f32	s1, s14
 8002a36:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3a:	f7ff f999 	bl	8001d70 <IdleText>
		 				}
		 				HAL_Delay(10);
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f002 ffb8 	bl	80059b4 <HAL_Delay>
		 		 }
		 		 //distance sensor logic
		 		  uint8_t buf[10] = {0xC0};
 8002a44:	23c0      	movs	r3, #192	@ 0xc0
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	809a      	strh	r2, [r3, #4]
		 		  HAL_I2C_Master_Transmit(&hi2c1, VL_W_A, &buf[0], 1, 1000);
 8002a52:	f107 0210 	add.w	r2, r7, #16
 8002a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2152      	movs	r1, #82	@ 0x52
 8002a60:	481d      	ldr	r0, [pc, #116]	@ (8002ad8 <main+0x2f8>)
 8002a62:	f003 fb3b 	bl	80060dc <HAL_I2C_Master_Transmit>
		 		  HAL_I2C_Master_Receive(&hi2c1, VL_R_A, &buf[2], 1, 1000);
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	1c9a      	adds	r2, r3, #2
 8002a6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	2153      	movs	r1, #83	@ 0x53
 8002a76:	4818      	ldr	r0, [pc, #96]	@ (8002ad8 <main+0x2f8>)
 8002a78:	f003 fc48 	bl	800630c <HAL_I2C_Master_Receive>
		 		  SensorInit(  &refSpadCount,    &isApertureSpads,   & VhvSettings,   & PhaseCal);
 8002a7c:	f107 031d 	add.w	r3, r7, #29
 8002a80:	f107 021e 	add.w	r2, r7, #30
 8002a84:	f107 011f 	add.w	r1, r7, #31
 8002a88:	f107 0020 	add.w	r0, r7, #32
 8002a8c:	f7ff fb5e 	bl	800214c <SensorInit>

		 		  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8002a90:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <main+0x2f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	491f      	ldr	r1, [pc, #124]	@ (8002b14 <main+0x334>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f009 fb60 	bl	800c15c <VL53L0X_PerformSingleRangingMeasurement>
		 		  //printf("status: %u\n\r", RangingData.RangeStatus);


		 		  if (RangingData.RangeStatus==0) {
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <main+0x334>)
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d142      	bne.n	8002b2a <main+0x34a>
		 			  printf("Measured distance in mm: %u\n\r", RangingData.RangeMilliMeter);
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <main+0x334>)
 8002aa6:	891b      	ldrh	r3, [r3, #8]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	481b      	ldr	r0, [pc, #108]	@ (8002b18 <main+0x338>)
 8002aac:	f00d fb0a 	bl	80100c4 <iprintf>

		 			  if (RangingData.RangeMilliMeter == 0) {
 8002ab0:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <main+0x334>)
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d131      	bne.n	8002b1c <main+0x33c>
		 				  SensorInit( &refSpadCount,    &isApertureSpads,    &VhvSettings,   & PhaseCal);
 8002ab8:	f107 031d 	add.w	r3, r7, #29
 8002abc:	f107 021e 	add.w	r2, r7, #30
 8002ac0:	f107 011f 	add.w	r1, r7, #31
 8002ac4:	f107 0020 	add.w	r0, r7, #32
 8002ac8:	f7ff fb40 	bl	800214c <SensorInit>
 8002acc:	e02d      	b.n	8002b2a <main+0x34a>
 8002ace:	bf00      	nop
 8002ad0:	20040930 	.word	0x20040930
 8002ad4:	20040030 	.word	0x20040030
 8002ad8:	200406ec 	.word	0x200406ec
 8002adc:	48001400 	.word	0x48001400
 8002ae0:	48001000 	.word	0x48001000
 8002ae4:	08012810 	.word	0x08012810
 8002ae8:	20040034 	.word	0x20040034
 8002aec:	20040036 	.word	0x20040036
 8002af0:	20040b29 	.word	0x20040b29
 8002af4:	08012824 	.word	0x08012824
 8002af8:	0801283c 	.word	0x0801283c
 8002afc:	20040b34 	.word	0x20040b34
 8002b00:	0801284c 	.word	0x0801284c
 8002b04:	080127b8 	.word	0x080127b8
 8002b08:	20040b44 	.word	0x20040b44
 8002b0c:	0801285c 	.word	0x0801285c
 8002b10:	08012884 	.word	0x08012884
 8002b14:	2004097c 	.word	0x2004097c
 8002b18:	080128ac 	.word	0x080128ac
		 			  }
		 			  else{
		 				  if(RangingData.RangeMilliMeter < 200){
 8002b1c:	4bb7      	ldr	r3, [pc, #732]	@ (8002dfc <main+0x61c>)
 8002b1e:	891b      	ldrh	r3, [r3, #8]
 8002b20:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b22:	d802      	bhi.n	8002b2a <main+0x34a>
		 					  distance_bool = 1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
		 			  }
		 		  }


		 		 //RFID logic
		 		  uint8_t status = getSerNum(str);
 8002b2a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 f8d4 	bl	8004cdc <getSerNum>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		 		  memcpy(serNum, str, 5);
 8002b3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b3e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b46:	6018      	str	r0, [r3, #0]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	7019      	strb	r1, [r3, #0]

		 		 if(status == MI_OK){
 8002b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <main+0x380>
		 			 RFID_bool = 1;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
		 			 printf("here\n");
 8002b5a:	48a9      	ldr	r0, [pc, #676]	@ (8002e00 <main+0x620>)
 8002b5c:	f00d fb22 	bl	80101a4 <puts>

		 		 /*NEXT STATE LOGIC : if distance threshold met, move to SCAN, if RFID is scanned override and go to HEART.
		 		 (in cases where it recognizes both RFID and a person, it will not move to a redundant state)
		 		 */

		 		 if(distance_bool){
 8002b60:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <main+0x3b0>
		 			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2120      	movs	r1, #32
 8002b6c:	48a5      	ldr	r0, [pc, #660]	@ (8002e04 <main+0x624>)
 8002b6e:	f003 f9e9 	bl	8005f44 <HAL_GPIO_WritePin>
		 			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 8002b72:	2201      	movs	r2, #1
 8002b74:	2110      	movs	r1, #16
 8002b76:	48a3      	ldr	r0, [pc, #652]	@ (8002e04 <main+0x624>)
 8002b78:	f003 f9e4 	bl	8005f44 <HAL_GPIO_WritePin>
		 			 Chansey = SCAN;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				 		FillScreenExceptCorner(0xFFFF);
 8002b82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b86:	f7ff fac5 	bl	8002114 <FillScreenExceptCorner>

		 			 printf("To scan\r\n");
 8002b8a:	489f      	ldr	r0, [pc, #636]	@ (8002e08 <main+0x628>)
 8002b8c:	f00d fb0a 	bl	80101a4 <puts>
		 		 }
		 		 if(RFID_bool){
 8002b90:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d043      	beq.n	8002c20 <main+0x440>
		 			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2120      	movs	r1, #32
 8002b9c:	4899      	ldr	r0, [pc, #612]	@ (8002e04 <main+0x624>)
 8002b9e:	f003 f9d1 	bl	8005f44 <HAL_GPIO_WritePin>
		 			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4897      	ldr	r0, [pc, #604]	@ (8002e04 <main+0x624>)
 8002ba8:	f003 f9cc 	bl	8005f44 <HAL_GPIO_WritePin>
		 			uint16_t trainerID = returnTrainer(serNum);  // returns 0, 1, etc. to correspond to trainer num
 8002bac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 f8ab 	bl	8004d0c <returnTrainer>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		 			TrainerNum = trainerID;
 8002bbc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002bc0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		 			printf("%d %d %d %d %d\n\r", serNum[0], serNum[1], serNum[2], serNum[3], serNum[4]);
 8002bc4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bda:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bde:	9201      	str	r2, [sp, #4]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4623      	mov	r3, r4
 8002be4:	4602      	mov	r2, r0
 8002be6:	4889      	ldr	r0, [pc, #548]	@ (8002e0c <main+0x62c>)
 8002be8:	f00d fa6c 	bl	80100c4 <iprintf>
		 					 			printf("TRAINER ID: %d\n\r", trainerID);
 8002bec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4887      	ldr	r0, [pc, #540]	@ (8002e10 <main+0x630>)
 8002bf4:	f00d fa66 	bl	80100c4 <iprintf>
		 					 			rfidName = UsersArr[trainerID];
 8002bf8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002bfc:	4a85      	ldr	r2, [pc, #532]	@ (8002e14 <main+0x634>)
 8002bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c02:	677b      	str	r3, [r7, #116]	@ 0x74
		 					 			printf("%s\n\r", rfidName);
 8002c04:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002c06:	4884      	ldr	r0, [pc, #528]	@ (8002e18 <main+0x638>)
 8002c08:	f00d fa5c 	bl	80100c4 <iprintf>
		 			 Chansey = HEART;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				 		FillScreenExceptCorner(0xFFFF);
 8002c12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c16:	f7ff fa7d 	bl	8002114 <FillScreenExceptCorner>

		 			 printf("To heart\r\n");
 8002c1a:	4880      	ldr	r0, [pc, #512]	@ (8002e1c <main+0x63c>)
 8002c1c:	f00d fac2 	bl	80101a4 <puts>
		 		 }

		 		 //increase counter
		 		 counter++;
 8002c20:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002c24:	3301      	adds	r3, #1
 8002c26:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
		 		 //reset counter if it goes over 255 range
		 		 if(counter > 30){
 8002c2a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	2b1e      	cmp	r3, #30
 8002c30:	f240 81d7 	bls.w	8002fe2 <main+0x802>
		 			 counter = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
		 		 }

		 		 break;
 8002c3a:	e1d2      	b.n	8002fe2 <main+0x802>
		 	 case SCAN:



		 		 if(scanBool == 0){
 8002c3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <main+0x472>
		 			scanBool = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 			timeOut = HAL_GetTick();
 8002c4a:	f002 fea7 	bl	800599c <HAL_GetTick>
 8002c4e:	6738      	str	r0, [r7, #112]	@ 0x70
 8002c50:	e017      	b.n	8002c82 <main+0x4a2>
		 		 }else{
		 			uint32_t now = HAL_GetTick();
 8002c52:	f002 fea3 	bl	800599c <HAL_GetTick>
 8002c56:	65f8      	str	r0, [r7, #92]	@ 0x5c
		 			 if(  (now - timeOut) > 30000){
 8002c58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d90d      	bls.n	8002c82 <main+0x4a2>
		 				scanBool = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		 				Chansey = IDLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		 				counter = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
		 				FillScreenExceptCorner(0xFFFF);
 8002c78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c7c:	f7ff fa4a 	bl	8002114 <FillScreenExceptCorner>
		 				break;
 8002c80:	e1b5      	b.n	8002fee <main+0x80e>
		 			 }
		 		 }



		 		 ScanText (); // SCAN state
 8002c82:	f7fe feab 	bl	80019dc <ScanText>



	 			// rfid
		 		 uint8_t status1 = getSerNum(str);
 8002c86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 f826 	bl	8004cdc <getSerNum>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		 		 memcpy(serNum, str, 5);
 8002c96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c9a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ca2:	6018      	str	r0, [r3, #0]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	7019      	strb	r1, [r3, #0]

//		 		 //********************************************************************** REMOVE, FOR DEBUGGING PURPOSES
//		 		 Chansey = HEART;
//		 		 break;

		 		 if(status1 == MI_OK ){
 8002ca8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <main+0x4d6>
		 			 RFID_bool = 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
		 		 }

		 		 if(RFID_bool == 1){
 8002cb6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 8193 	bne.w	8002fe6 <main+0x806>
		 			 Chansey = HEART;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

		 			 scanBool = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

					FillScreenExceptCorner(0xFFFF);
 8002ccc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002cd0:	f7ff fa20 	bl	8002114 <FillScreenExceptCorner>

		 			 //***//

		 			uint16_t trainerID = returnTrainer(serNum);  // returns 0, 1, etc. to correspond to trainer num
 8002cd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 f817 	bl	8004d0c <returnTrainer>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
		 			TrainerNum = trainerID;
 8002ce4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002ce8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		 			printf("TRAINER ID: %d\n\r", trainerID);
 8002cec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4847      	ldr	r0, [pc, #284]	@ (8002e10 <main+0x630>)
 8002cf4:	f00d f9e6 	bl	80100c4 <iprintf>
		 			rfidName = UsersArr[trainerID];
 8002cf8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002cfc:	4a45      	ldr	r2, [pc, #276]	@ (8002e14 <main+0x634>)
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	677b      	str	r3, [r7, #116]	@ 0x74
		 			printf("%s\n\r", rfidName);
 8002d04:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002d06:	4844      	ldr	r0, [pc, #272]	@ (8002e18 <main+0x638>)
 8002d08:	f00d f9dc 	bl	80100c4 <iprintf>
		 		 }

		 		 break;
 8002d0c:	e16b      	b.n	8002fe6 <main+0x806>

		 	case HEART:

		 		printf("Inside heart state\r\n");
 8002d0e:	4844      	ldr	r0, [pc, #272]	@ (8002e20 <main+0x640>)
 8002d10:	f00d fa48 	bl	80101a4 <puts>


		 		if(heartBool == 0){
 8002d14:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <main+0x550>
		 			heartBool = 1;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
					timeOut = HAL_GetTick();
 8002d22:	f002 fe3b 	bl	800599c <HAL_GetTick>
 8002d26:	6738      	str	r0, [r7, #112]	@ 0x70
					HeartTempText(rfidName);
 8002d28:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002d2a:	f7fe fe79 	bl	8001a20 <HeartTempText>
 8002d2e:	e017      	b.n	8002d60 <main+0x580>

				 }else{
					uint32_t now = HAL_GetTick();
 8002d30:	f002 fe34 	bl	800599c <HAL_GetTick>
 8002d34:	6638      	str	r0, [r7, #96]	@ 0x60
					 if(  (now - timeOut) > 30000){
 8002d36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d90d      	bls.n	8002d60 <main+0x580>
						heartBool = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
						Chansey = IDLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
						counter = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
						FillScreenExceptCorner(0xFFFF);
 8002d56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d5a:	f7ff f9db 	bl	8002114 <FillScreenExceptCorner>
						break;
 8002d5e:	e146      	b.n	8002fee <main+0x80e>
//
//				if(h != 0){
//				   printf("in hr\r\n");
//				   FillScreenExceptCorner(0xFFFF);
//				   MeasuringText();
					heart_rate = final_hr_result();
 8002d60:	f7ff fc24 	bl	80025ac <final_hr_result>
 8002d64:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	@ 0x40
 8002d6c:	4825      	ldr	r0, [pc, #148]	@ (8002e04 <main+0x624>)
 8002d6e:	f003 f8e9 	bl	8005f44 <HAL_GPIO_WritePin>
					if(heart_rate <= 40 || heart_rate >= 120){
 8002d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d76:	2b28      	cmp	r3, #40	@ 0x28
 8002d78:	dd03      	ble.n	8002d82 <main+0x5a2>
 8002d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d7e:	2b77      	cmp	r3, #119	@ 0x77
 8002d80:	dd02      	ble.n	8002d88 <main+0x5a8>
						heart_rate = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

					}

					printf("final  result is = %d\r\n", heart_rate);
 8002d88:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002d8c:	4825      	ldr	r0, [pc, #148]	@ (8002e24 <main+0x644>)
 8002d8e:	f00d f999 	bl	80100c4 <iprintf>

					heartBool = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
					Chansey = TEMP;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					FillScreenExceptCorner(0xFFFF);
 8002d9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002da2:	f7ff f9b7 	bl	8002114 <FillScreenExceptCorner>
		 		 */




		 		break;
 8002da6:	e122      	b.n	8002fee <main+0x80e>
		 	case TEMP:



		 		if(tempBool == 0){
 8002da8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10c      	bne.n	8002dca <main+0x5ea>
		 			tempBool = 1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					timeOut = HAL_GetTick();
 8002db6:	f002 fdf1 	bl	800599c <HAL_GetTick>
 8002dba:	6738      	str	r0, [r7, #112]	@ 0x70
					TempText();
 8002dbc:	f7fe feba 	bl	8001b34 <TempText>
					HAL_Delay(5000);
 8002dc0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002dc4:	f002 fdf6 	bl	80059b4 <HAL_Delay>
 8002dc8:	e02e      	b.n	8002e28 <main+0x648>

				 }else{
					uint32_t now = HAL_GetTick();
 8002dca:	f002 fde7 	bl	800599c <HAL_GetTick>
 8002dce:	6678      	str	r0, [r7, #100]	@ 0x64
					 if(  (now - timeOut) > 30000){
 8002dd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d924      	bls.n	8002e28 <main+0x648>
						 tempBool = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
						Chansey = IDLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
						counter = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
						FillScreenExceptCorner(0xFFFF);
 8002df0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002df4:	f7ff f98e 	bl	8002114 <FillScreenExceptCorner>
						break;
 8002df8:	e0f9      	b.n	8002fee <main+0x80e>
 8002dfa:	bf00      	nop
 8002dfc:	2004097c 	.word	0x2004097c
 8002e00:	080128cc 	.word	0x080128cc
 8002e04:	48001000 	.word	0x48001000
 8002e08:	080128d4 	.word	0x080128d4
 8002e0c:	080128e0 	.word	0x080128e0
 8002e10:	080128f4 	.word	0x080128f4
 8002e14:	20040000 	.word	0x20040000
 8002e18:	08012908 	.word	0x08012908
 8002e1c:	08012910 	.word	0x08012910
 8002e20:	0801291c 	.word	0x0801291c
 8002e24:	08012930 	.word	0x08012930
					 }
				 }


				if(temp_ready(&hi2c1)){
 8002e28:	4873      	ldr	r0, [pc, #460]	@ (8002ff8 <main+0x818>)
 8002e2a:	f7fe f93f 	bl	80010ac <temp_ready>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d037      	beq.n	8002ea4 <main+0x6c4>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 8002e34:	2201      	movs	r2, #1
 8002e36:	2120      	movs	r1, #32
 8002e38:	4870      	ldr	r0, [pc, #448]	@ (8002ffc <main+0x81c>)
 8002e3a:	f003 f883 	bl	8005f44 <HAL_GPIO_WritePin>
					body_temperature = getBodyTemp(&hi2c1);
 8002e3e:	486e      	ldr	r0, [pc, #440]	@ (8002ff8 <main+0x818>)
 8002e40:	f7fe f8b2 	bl	8000fa8 <getBodyTemp>
 8002e44:	ed87 0a20 	vstr	s0, [r7, #128]	@ 0x80
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	486b      	ldr	r0, [pc, #428]	@ (8002ffc <main+0x81c>)
 8002e4e:	f003 f879 	bl	8005f44 <HAL_GPIO_WritePin>



					if (body_temperature <= 85 || body_temperature >= 110) {
 8002e52:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002e56:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003000 <main+0x820>
 8002e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	d908      	bls.n	8002e76 <main+0x696>
 8002e64:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002e68:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003004 <main+0x824>
 8002e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	db03      	blt.n	8002e7e <main+0x69e>
						body_temperature = 0;
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					}


					printf("body_temperature: %.2f\r\n", body_temperature);
 8002e7e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002e82:	f7fd fb79 	bl	8000578 <__aeabi_f2d>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	485f      	ldr	r0, [pc, #380]	@ (8003008 <main+0x828>)
 8002e8c:	f00d f91a 	bl	80100c4 <iprintf>


					tempBool = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
					Chansey = RESULT;
 8002e96:	2304      	movs	r3, #4
 8002e98:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			 		FillScreenExceptCorner(0xFFFF);
 8002e9c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ea0:	f7ff f938 	bl	8002114 <FillScreenExceptCorner>

				}
				HAL_Delay(100);
 8002ea4:	2064      	movs	r0, #100	@ 0x64
 8002ea6:	f002 fd85 	bl	80059b4 <HAL_Delay>
		 		break;
 8002eaa:	e0a0      	b.n	8002fee <main+0x80e>
		 		//read rfid
		 		//block 4 == average heart rate
		 		//if body_temperature > 100.4
		 		//set pill dispenser for fever medication
		 		//if heart_rate is not within +- 10 beats of users average then -> "Abnormal heart rate reading, hospital visit recommended"
		 		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2110      	movs	r1, #16
 8002eb0:	4852      	ldr	r0, [pc, #328]	@ (8002ffc <main+0x81c>)
 8002eb2:	f003 f847 	bl	8005f44 <HAL_GPIO_WritePin>
		 		pill_dispensed = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		 		if(body_temperature > 100.4){
 8002ebc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002ec0:	f7fd fb5a 	bl	8000578 <__aeabi_f2d>
 8002ec4:	a34a      	add	r3, pc, #296	@ (adr r3, 8002ff0 <main+0x810>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd fe3d 	bl	8000b48 <__aeabi_dcmpgt>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <main+0x6fa>
		 			pill_dispensed = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		 		}
		 		// display time

		 		if (body_temperature == 0) {
 8002eda:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8002ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	d101      	bne.n	8002eec <main+0x70c>
		 			TempErrorText();
 8002ee8:	f7ff f878 	bl	8001fdc <TempErrorText>
		 		}
		 		if (heart_rate == 0) {
 8002eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <main+0x718>
		 			HeartErrorText();
 8002ef4:	f7ff f85e 	bl	8001fb4 <HeartErrorText>
		 		}

		 		ResultText(body_temperature, heart_rate);
 8002ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	ed97 0a20 	vldr	s0, [r7, #128]	@ 0x80
 8002f04:	f7fe ffb4 	bl	8001e70 <ResultText>

		 		HAL_Delay(8000);
 8002f08:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8002f0c:	f002 fd52 	bl	80059b4 <HAL_Delay>

		 		Chansey = PILLS;
 8002f10:	2305      	movs	r3, #5
 8002f12:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		 		FillScreenExceptCorner(0xFFFF);
 8002f16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f1a:	f7ff f8fb 	bl	8002114 <FillScreenExceptCorner>


		 		break;
 8002f1e:	e066      	b.n	8002fee <main+0x80e>
		 		//read pill_dispenser variable
		 		//if plll_dispenser == 1 //
		 		//release multivitamin -> TURN LEFT MOTOR

		 		// display time
		 		if(pill_dispensed == 1){
 8002f20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10c      	bne.n	8002f42 <main+0x762>
		 			printf("Dispensing Multivitamin\r\n");
 8002f28:	4838      	ldr	r0, [pc, #224]	@ (800300c <main+0x82c>)
 8002f2a:	f00d f93b 	bl	80101a4 <puts>

		 			Msg = "Multivitamin";
 8002f2e:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <main+0x830>)
 8002f30:	66bb      	str	r3, [r7, #104]	@ 0x68
		 			PillsText(Msg);
 8002f32:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002f34:	f7fe fe2e 	bl	8001b94 <PillsText>
			 	 	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8002f38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f3c:	f001 f92a 	bl	8004194 <HAL_GPIO_EXTI_Callback>
 8002f40:	e008      	b.n	8002f54 <main+0x774>
		 		}

		 		else{ //release fever meds
		 			Msg = "Fever";
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <main+0x834>)
 8002f44:	66bb      	str	r3, [r7, #104]	@ 0x68
					PillsText(Msg);
 8002f46:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002f48:	f7fe fe24 	bl	8001b94 <PillsText>
		 			HAL_GPIO_EXTI_Callback(GPIO_PIN_12);
 8002f4c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002f50:	f001 f920 	bl	8004194 <HAL_GPIO_EXTI_Callback>
		 		}

				Chansey = DONE;
 8002f54:	2306      	movs	r3, #6
 8002f56:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		 		FillScreenExceptCorner(0xFFFF);
 8002f5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f5e:	f7ff f8d9 	bl	8002114 <FillScreenExceptCorner>

		 		break;
 8002f62:	e044      	b.n	8002fee <main+0x80e>
		 	case DONE:

		 		DoneText(rfidName); // DONE state
 8002f64:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002f66:	f7fe fea9 	bl	8001cbc <DoneText>



		 		if (sent == 0) {
 8002f6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d121      	bne.n	8002fb4 <main+0x7d4>
		 			float data[4] = {(float)TrainerNum, (float)heart_rate, body_temperature, (float)pill_dispensed};
 8002f70:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7c:	edc7 7a00 	vstr	s15, [r7]
 8002f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa2:	edc7 7a03 	vstr	s15, [r7, #12]
		 			sendToApp(&huart1, data);
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	4619      	mov	r1, r3
 8002faa:	481b      	ldr	r0, [pc, #108]	@ (8003018 <main+0x838>)
 8002fac:	f7fe f892 	bl	80010d4 <sendToApp>
		 			sent = 1;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
		 		}


		 		HAL_Delay(8000);
 8002fb4:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8002fb8:	f002 fcfc 	bl	80059b4 <HAL_Delay>

		 		counter = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

		 		// if card is there, remove. otherwise, go to idle.
		 		if(getSerNum(str) != MI_OK){
 8002fc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 fe88 	bl	8004cdc <getSerNum>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <main+0x80a>
		 			Chansey = IDLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			 		FillScreenExceptCorner(0xFFFF);
 8002fd8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002fdc:	f7ff f89a 	bl	8002114 <FillScreenExceptCorner>

		 		}

		 		break;
 8002fe0:	e003      	b.n	8002fea <main+0x80a>
		 		 break;
 8002fe2:	bf00      	nop
 8002fe4:	e46e      	b.n	80028c4 <main+0xe4>
		 		 break;
 8002fe6:	bf00      	nop
 8002fe8:	e46c      	b.n	80028c4 <main+0xe4>
		 		break;
 8002fea:	bf00      	nop
 8002fec:	e46a      	b.n	80028c4 <main+0xe4>
	  	 HAL_Delay(10);
 8002fee:	e469      	b.n	80028c4 <main+0xe4>
 8002ff0:	9999999a 	.word	0x9999999a
 8002ff4:	40591999 	.word	0x40591999
 8002ff8:	200406ec 	.word	0x200406ec
 8002ffc:	48001000 	.word	0x48001000
 8003000:	42aa0000 	.word	0x42aa0000
 8003004:	42dc0000 	.word	0x42dc0000
 8003008:	08012948 	.word	0x08012948
 800300c:	08012964 	.word	0x08012964
 8003010:	08012980 	.word	0x08012980
 8003014:	08012990 	.word	0x08012990
 8003018:	200407d4 	.word	0x200407d4

0800301c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b096      	sub	sp, #88	@ 0x58
 8003020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	2244      	movs	r2, #68	@ 0x44
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f00d f9bc 	bl	80103a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003030:	463b      	mov	r3, r7
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800303e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003042:	f004 f811 	bl	8007068 <HAL_PWREx_ControlVoltageScaling>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800304c:	f000 fc26 	bl	800389c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003050:	2310      	movs	r3, #16
 8003052:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003054:	2301      	movs	r3, #1
 8003056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800305c:	23b0      	movs	r3, #176	@ 0xb0
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003060:	2300      	movs	r3, #0
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4618      	mov	r0, r3
 800306a:	f004 f8b1 	bl	80071d0 <HAL_RCC_OscConfig>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003074:	f000 fc12 	bl	800389c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003078:	230f      	movs	r3, #15
 800307a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800307c:	2300      	movs	r3, #0
 800307e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800308c:	463b      	mov	r3, r7
 800308e:	2102      	movs	r1, #2
 8003090:	4618      	mov	r0, r3
 8003092:	f004 fcb7 	bl	8007a04 <HAL_RCC_ClockConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800309c:	f000 fbfe 	bl	800389c <Error_Handler>
  }
}
 80030a0:	bf00      	nop
 80030a2:	3758      	adds	r7, #88	@ 0x58
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <MX_I2C1_Init+0x74>)
 80030ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <MX_I2C1_Init+0x78>)
 80030b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <MX_I2C1_Init+0x74>)
 80030b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <MX_I2C1_Init+0x7c>)
 80030b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030b8:	4b18      	ldr	r3, [pc, #96]	@ (800311c <MX_I2C1_Init+0x74>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030be:	4b17      	ldr	r3, [pc, #92]	@ (800311c <MX_I2C1_Init+0x74>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030c4:	4b15      	ldr	r3, [pc, #84]	@ (800311c <MX_I2C1_Init+0x74>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <MX_I2C1_Init+0x74>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030d0:	4b12      	ldr	r3, [pc, #72]	@ (800311c <MX_I2C1_Init+0x74>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <MX_I2C1_Init+0x74>)
 80030d8:	2200      	movs	r2, #0
 80030da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <MX_I2C1_Init+0x74>)
 80030de:	2200      	movs	r2, #0
 80030e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030e2:	480e      	ldr	r0, [pc, #56]	@ (800311c <MX_I2C1_Init+0x74>)
 80030e4:	f002 ff5e 	bl	8005fa4 <HAL_I2C_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030ee:	f000 fbd5 	bl	800389c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030f2:	2100      	movs	r1, #0
 80030f4:	4809      	ldr	r0, [pc, #36]	@ (800311c <MX_I2C1_Init+0x74>)
 80030f6:	f003 feff 	bl	8006ef8 <HAL_I2CEx_ConfigAnalogFilter>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003100:	f000 fbcc 	bl	800389c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003104:	2100      	movs	r1, #0
 8003106:	4805      	ldr	r0, [pc, #20]	@ (800311c <MX_I2C1_Init+0x74>)
 8003108:	f003 ff41 	bl	8006f8e <HAL_I2CEx_ConfigDigitalFilter>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003112:	f000 fbc3 	bl	800389c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200406ec 	.word	0x200406ec
 8003120:	40005400 	.word	0x40005400
 8003124:	10805d88 	.word	0x10805d88

08003128 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800312c:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 800312e:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <MX_LPUART1_UART_Init+0x94>)
 8003130:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003132:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003138:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800313a:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003140:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003146:	4b1c      	ldr	r3, [pc, #112]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 800314e:	220c      	movs	r2, #12
 8003150:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 800315a:	2200      	movs	r2, #0
 800315c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003160:	2200      	movs	r2, #0
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003166:	2200      	movs	r2, #0
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 800316c:	2200      	movs	r2, #0
 800316e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003170:	4811      	ldr	r0, [pc, #68]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003172:	f006 fe5f 	bl	8009e34 <HAL_UART_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800317c:	f000 fb8e 	bl	800389c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003180:	2100      	movs	r1, #0
 8003182:	480d      	ldr	r0, [pc, #52]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003184:	f007 fc88 	bl	800aa98 <HAL_UARTEx_SetTxFifoThreshold>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800318e:	f000 fb85 	bl	800389c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003192:	2100      	movs	r1, #0
 8003194:	4808      	ldr	r0, [pc, #32]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 8003196:	f007 fcbd 	bl	800ab14 <HAL_UARTEx_SetRxFifoThreshold>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031a0:	f000 fb7c 	bl	800389c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80031a4:	4804      	ldr	r0, [pc, #16]	@ (80031b8 <MX_LPUART1_UART_Init+0x90>)
 80031a6:	f007 fc3e 	bl	800aa26 <HAL_UARTEx_DisableFifoMode>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031b0:	f000 fb74 	bl	800389c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20040740 	.word	0x20040740
 80031bc:	40008000 	.word	0x40008000

080031c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031c6:	4a23      	ldr	r2, [pc, #140]	@ (8003254 <MX_USART1_UART_Init+0x94>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80031ca:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b17      	ldr	r3, [pc, #92]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003208:	4811      	ldr	r0, [pc, #68]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800320a:	f006 fe13 	bl	8009e34 <HAL_UART_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003214:	f000 fb42 	bl	800389c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003218:	2100      	movs	r1, #0
 800321a:	480d      	ldr	r0, [pc, #52]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800321c:	f007 fc3c 	bl	800aa98 <HAL_UARTEx_SetTxFifoThreshold>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003226:	f000 fb39 	bl	800389c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800322a:	2100      	movs	r1, #0
 800322c:	4808      	ldr	r0, [pc, #32]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800322e:	f007 fc71 	bl	800ab14 <HAL_UARTEx_SetRxFifoThreshold>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003238:	f000 fb30 	bl	800389c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800323c:	4804      	ldr	r0, [pc, #16]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800323e:	f007 fbf2 	bl	800aa26 <HAL_UARTEx_DisableFifoMode>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003248:	f000 fb28 	bl	800389c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200407d4 	.word	0x200407d4
 8003254:	40013800 	.word	0x40013800

08003258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800325c:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <MX_SPI1_Init+0x74>)
 800325e:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <MX_SPI1_Init+0x78>)
 8003260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003262:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <MX_SPI1_Init+0x74>)
 8003264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <MX_SPI1_Init+0x74>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003270:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <MX_SPI1_Init+0x74>)
 8003272:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003276:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003278:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <MX_SPI1_Init+0x74>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800327e:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <MX_SPI1_Init+0x74>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <MX_SPI1_Init+0x74>)
 8003286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800328a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800328c:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <MX_SPI1_Init+0x74>)
 800328e:	2238      	movs	r2, #56	@ 0x38
 8003290:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <MX_SPI1_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003298:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <MX_SPI1_Init+0x74>)
 800329a:	2200      	movs	r2, #0
 800329c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329e:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <MX_SPI1_Init+0x74>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032a4:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <MX_SPI1_Init+0x74>)
 80032a6:	2207      	movs	r2, #7
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032aa:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <MX_SPI1_Init+0x74>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <MX_SPI1_Init+0x74>)
 80032b2:	2208      	movs	r2, #8
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	@ (80032cc <MX_SPI1_Init+0x74>)
 80032b8:	f005 fb7a 	bl	80089b0 <HAL_SPI_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032c2:	f000 faeb 	bl	800389c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20040868 	.word	0x20040868
 80032d0:	40013000 	.word	0x40013000

080032d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <MX_SPI3_Init+0x74>)
 80032da:	4a1c      	ldr	r2, [pc, #112]	@ (800334c <MX_SPI3_Init+0x78>)
 80032dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80032de:	4b1a      	ldr	r3, [pc, #104]	@ (8003348 <MX_SPI3_Init+0x74>)
 80032e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80032e6:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <MX_SPI3_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ec:	4b16      	ldr	r3, [pc, #88]	@ (8003348 <MX_SPI3_Init+0x74>)
 80032ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <MX_SPI3_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <MX_SPI3_Init+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <MX_SPI3_Init+0x74>)
 8003302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003306:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <MX_SPI3_Init+0x74>)
 800330a:	2208      	movs	r2, #8
 800330c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800330e:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <MX_SPI3_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <MX_SPI3_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <MX_SPI3_Init+0x74>)
 800331c:	2200      	movs	r2, #0
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <MX_SPI3_Init+0x74>)
 8003322:	2207      	movs	r2, #7
 8003324:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <MX_SPI3_Init+0x74>)
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <MX_SPI3_Init+0x74>)
 800332e:	2208      	movs	r2, #8
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003332:	4805      	ldr	r0, [pc, #20]	@ (8003348 <MX_SPI3_Init+0x74>)
 8003334:	f005 fb3c 	bl	80089b0 <HAL_SPI_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800333e:	f000 faad 	bl	800389c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200408cc 	.word	0x200408cc
 800334c:	40003c00 	.word	0x40003c00

08003350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003356:	f107 0310 	add.w	r3, r7, #16
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800336e:	4b1e      	ldr	r3, [pc, #120]	@ (80033e8 <MX_TIM4_Init+0x98>)
 8003370:	4a1e      	ldr	r2, [pc, #120]	@ (80033ec <MX_TIM4_Init+0x9c>)
 8003372:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8003374:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <MX_TIM4_Init+0x98>)
 8003376:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800337a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <MX_TIM4_Init+0x98>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003382:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <MX_TIM4_Init+0x98>)
 8003384:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338a:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <MX_TIM4_Init+0x98>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003390:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <MX_TIM4_Init+0x98>)
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003396:	4814      	ldr	r0, [pc, #80]	@ (80033e8 <MX_TIM4_Init+0x98>)
 8003398:	f006 f8a6 	bl	80094e8 <HAL_TIM_Base_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80033a2:	f000 fa7b 	bl	800389c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80033ac:	f107 0310 	add.w	r3, r7, #16
 80033b0:	4619      	mov	r1, r3
 80033b2:	480d      	ldr	r0, [pc, #52]	@ (80033e8 <MX_TIM4_Init+0x98>)
 80033b4:	f006 fa67 	bl	8009886 <HAL_TIM_ConfigClockSource>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80033be:	f000 fa6d 	bl	800389c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4806      	ldr	r0, [pc, #24]	@ (80033e8 <MX_TIM4_Init+0x98>)
 80033d0:	f006 fc8a 	bl	8009ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80033da:	f000 fa5f 	bl	800389c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033de:	bf00      	nop
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20040930 	.word	0x20040930
 80033ec:	40000800 	.word	0x40000800

080033f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	@ 0x38
 80033f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003406:	4bb5      	ldr	r3, [pc, #724]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	4ab4      	ldr	r2, [pc, #720]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800340c:	f043 0310 	orr.w	r3, r3, #16
 8003410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003412:	4bb2      	ldr	r3, [pc, #712]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800341e:	4baf      	ldr	r3, [pc, #700]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	4aae      	ldr	r2, [pc, #696]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342a:	4bac      	ldr	r3, [pc, #688]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003436:	4ba9      	ldr	r3, [pc, #676]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	4aa8      	ldr	r2, [pc, #672]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800343c:	f043 0320 	orr.w	r3, r3, #32
 8003440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003442:	4ba6      	ldr	r3, [pc, #664]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800344e:	4ba3      	ldr	r3, [pc, #652]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	4aa2      	ldr	r2, [pc, #648]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800345a:	4ba0      	ldr	r3, [pc, #640]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	4b9d      	ldr	r3, [pc, #628]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	4a9c      	ldr	r2, [pc, #624]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003472:	4b9a      	ldr	r3, [pc, #616]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	4b97      	ldr	r3, [pc, #604]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	4a96      	ldr	r2, [pc, #600]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800348a:	4b94      	ldr	r3, [pc, #592]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003496:	4b91      	ldr	r3, [pc, #580]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	4a90      	ldr	r2, [pc, #576]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 800349c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a2:	4b8e      	ldr	r3, [pc, #568]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ae:	4b8b      	ldr	r3, [pc, #556]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	4a8a      	ldr	r2, [pc, #552]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ba:	4b88      	ldr	r3, [pc, #544]	@ (80036dc <MX_GPIO_Init+0x2ec>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80034c6:	f003 fe73 	bl	80071b0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|playAudio_Pin|pokeInterrupt_Pin
 80034ca:	2200      	movs	r2, #0
 80034cc:	217c      	movs	r1, #124	@ 0x7c
 80034ce:	4884      	ldr	r0, [pc, #528]	@ (80036e0 <MX_GPIO_Init+0x2f0>)
 80034d0:	f002 fd38 	bl	8005f44 <HAL_GPIO_WritePin>
                          |vibrator_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 80034d4:	2200      	movs	r2, #0
 80034d6:	f44f 716c 	mov.w	r1, #944	@ 0x3b0
 80034da:	4882      	ldr	r0, [pc, #520]	@ (80036e4 <MX_GPIO_Init+0x2f4>)
 80034dc:	f002 fd32 	bl	8005f44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80034e0:	2200      	movs	r2, #0
 80034e2:	f44f 7144 	mov.w	r1, #784	@ 0x310
 80034e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ea:	f002 fd2b 	bl	8005f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2122      	movs	r1, #34	@ 0x22
 80034f2:	487d      	ldr	r0, [pc, #500]	@ (80036e8 <MX_GPIO_Init+0x2f8>)
 80034f4:	f002 fd26 	bl	8005f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80034f8:	2200      	movs	r2, #0
 80034fa:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80034fe:	487b      	ldr	r0, [pc, #492]	@ (80036ec <MX_GPIO_Init+0x2fc>)
 8003500:	f002 fd20 	bl	8005f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003504:	2200      	movs	r2, #0
 8003506:	2178      	movs	r1, #120	@ 0x78
 8003508:	4879      	ldr	r0, [pc, #484]	@ (80036f0 <MX_GPIO_Init+0x300>)
 800350a:	f002 fd1b 	bl	8005f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 playAudio_Pin pokeInterrupt_Pin
                           vibrator_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|playAudio_Pin|pokeInterrupt_Pin
 800350e:	237c      	movs	r3, #124	@ 0x7c
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
                          |vibrator_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003512:	2301      	movs	r3, #1
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800351e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003522:	4619      	mov	r1, r3
 8003524:	486e      	ldr	r0, [pc, #440]	@ (80036e0 <MX_GPIO_Init+0x2f0>)
 8003526:	f002 fb7b 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800352a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003530:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	486a      	ldr	r0, [pc, #424]	@ (80036ec <MX_GPIO_Init+0x2fc>)
 8003542:	f002 fb6d 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003546:	2307      	movs	r3, #7
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800354a:	2312      	movs	r3, #18
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003556:	2304      	movs	r3, #4
 8003558:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800355a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800355e:	4619      	mov	r1, r3
 8003560:	4860      	ldr	r0, [pc, #384]	@ (80036e4 <MX_GPIO_Init+0x2f4>)
 8003562:	f002 fb5d 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF7 PF8
                           PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8003566:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356c:	2301      	movs	r3, #1
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	2300      	movs	r3, #0
 8003576:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800357c:	4619      	mov	r1, r3
 800357e:	4859      	ldr	r0, [pc, #356]	@ (80036e4 <MX_GPIO_Init+0x2f4>)
 8003580:	f002 fb4e 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003584:	233f      	movs	r3, #63	@ 0x3f
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003588:	230b      	movs	r3, #11
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	4855      	ldr	r0, [pc, #340]	@ (80036ec <MX_GPIO_Init+0x2fc>)
 8003598:	f002 fb42 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800359c:	2301      	movs	r3, #1
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ac:	2301      	movs	r3, #1
 80035ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035b4:	4619      	mov	r1, r3
 80035b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ba:	f002 fb31 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80035be:	230a      	movs	r3, #10
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80035c2:	230b      	movs	r3, #11
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ce:	4619      	mov	r1, r3
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035d4:	f002 fb24 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 80035d8:	f44f 7344 	mov.w	r3, #784	@ 0x310
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035de:	2301      	movs	r3, #1
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ee:	4619      	mov	r1, r3
 80035f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035f4:	f002 fb14 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035f8:	2301      	movs	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003608:	2302      	movs	r3, #2
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003610:	4619      	mov	r1, r3
 8003612:	4838      	ldr	r0, [pc, #224]	@ (80036f4 <MX_GPIO_Init+0x304>)
 8003614:	f002 fb04 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003618:	2302      	movs	r3, #2
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800361c:	230b      	movs	r3, #11
 800361e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003628:	4619      	mov	r1, r3
 800362a:	4832      	ldr	r0, [pc, #200]	@ (80036f4 <MX_GPIO_Init+0x304>)
 800362c:	f002 faf8 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8003630:	2344      	movs	r3, #68	@ 0x44
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003634:	2303      	movs	r3, #3
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003640:	4619      	mov	r1, r3
 8003642:	482c      	ldr	r0, [pc, #176]	@ (80036f4 <MX_GPIO_Init+0x304>)
 8003644:	f002 faec 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003648:	2322      	movs	r3, #34	@ 0x22
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364c:	2301      	movs	r3, #1
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003654:	2300      	movs	r3, #0
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800365c:	4619      	mov	r1, r3
 800365e:	4822      	ldr	r0, [pc, #136]	@ (80036e8 <MX_GPIO_Init+0x2f8>)
 8003660:	f002 fade 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003664:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003676:	2301      	movs	r3, #1
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800367a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367e:	4619      	mov	r1, r3
 8003680:	4817      	ldr	r0, [pc, #92]	@ (80036e0 <MX_GPIO_Init+0x2f0>)
 8003682:	f002 facd 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003686:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003698:	2303      	movs	r3, #3
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800369c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	480f      	ldr	r0, [pc, #60]	@ (80036e0 <MX_GPIO_Init+0x2f0>)
 80036a4:	f002 fabc 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2300      	movs	r3, #0
 80036b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ba:	2301      	movs	r3, #1
 80036bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c2:	4619      	mov	r1, r3
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <MX_GPIO_Init+0x304>)
 80036c6:	f002 faab 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80036ca:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	e00d      	b.n	80036f8 <MX_GPIO_Init+0x308>
 80036dc:	40021000 	.word	0x40021000
 80036e0:	48001000 	.word	0x48001000
 80036e4:	48001400 	.word	0x48001400
 80036e8:	48001800 	.word	0x48001800
 80036ec:	48000800 	.word	0x48000800
 80036f0:	48000c00 	.word	0x48000c00
 80036f4:	48000400 	.word	0x48000400
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80036fa:	230d      	movs	r3, #13
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003702:	4619      	mov	r1, r3
 8003704:	4858      	ldr	r0, [pc, #352]	@ (8003868 <MX_GPIO_Init+0x478>)
 8003706:	f002 fa8b 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800370a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800371c:	230e      	movs	r3, #14
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003724:	4619      	mov	r1, r3
 8003726:	4850      	ldr	r0, [pc, #320]	@ (8003868 <MX_GPIO_Init+0x478>)
 8003728:	f002 fa7a 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800372c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800373e:	2307      	movs	r3, #7
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003746:	4619      	mov	r1, r3
 8003748:	4848      	ldr	r0, [pc, #288]	@ (800386c <MX_GPIO_Init+0x47c>)
 800374a:	f002 fa69 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800374e:	2340      	movs	r3, #64	@ 0x40
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800375e:	230d      	movs	r3, #13
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003766:	4619      	mov	r1, r3
 8003768:	4841      	ldr	r0, [pc, #260]	@ (8003870 <MX_GPIO_Init+0x480>)
 800376a:	f002 fa59 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800377e:	2302      	movs	r3, #2
 8003780:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003786:	4619      	mov	r1, r3
 8003788:	4839      	ldr	r0, [pc, #228]	@ (8003870 <MX_GPIO_Init+0x480>)
 800378a:	f002 fa49 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800378e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003794:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800379a:	2302      	movs	r3, #2
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800379e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037a2:	4619      	mov	r1, r3
 80037a4:	4832      	ldr	r0, [pc, #200]	@ (8003870 <MX_GPIO_Init+0x480>)
 80037a6:	f002 fa3b 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	2300      	movs	r3, #0
 80037ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c0:	4619      	mov	r1, r3
 80037c2:	482b      	ldr	r0, [pc, #172]	@ (8003870 <MX_GPIO_Init+0x480>)
 80037c4:	f002 fa2c 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037c8:	2301      	movs	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80037d8:	2309      	movs	r3, #9
 80037da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e0:	4619      	mov	r1, r3
 80037e2:	4822      	ldr	r0, [pc, #136]	@ (800386c <MX_GPIO_Init+0x47c>)
 80037e4:	f002 fa1c 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037e8:	2304      	movs	r3, #4
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f4:	2303      	movs	r3, #3
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037f8:	230c      	movs	r3, #12
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003800:	4619      	mov	r1, r3
 8003802:	481a      	ldr	r0, [pc, #104]	@ (800386c <MX_GPIO_Init+0x47c>)
 8003804:	f002 fa0c 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003808:	2378      	movs	r3, #120	@ 0x78
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800380c:	2301      	movs	r3, #1
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	2300      	movs	r3, #0
 8003816:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381c:	4619      	mov	r1, r3
 800381e:	4813      	ldr	r0, [pc, #76]	@ (800386c <MX_GPIO_Init+0x47c>)
 8003820:	f002 f9fe 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800382a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003838:	4619      	mov	r1, r3
 800383a:	480e      	ldr	r0, [pc, #56]	@ (8003874 <MX_GPIO_Init+0x484>)
 800383c:	f002 f9f0 	bl	8005c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2100      	movs	r1, #0
 8003844:	2017      	movs	r0, #23
 8003846:	f002 f9b4 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800384a:	2017      	movs	r0, #23
 800384c:	f002 f9cd 	bl	8005bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8003850:	2200      	movs	r2, #0
 8003852:	2102      	movs	r1, #2
 8003854:	2028      	movs	r0, #40	@ 0x28
 8003856:	f002 f9ac 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800385a:	2028      	movs	r0, #40	@ 0x28
 800385c:	f002 f9c5 	bl	8005bea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003860:	bf00      	nop
 8003862:	3738      	adds	r7, #56	@ 0x38
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	48000400 	.word	0x48000400
 800386c:	48000c00 	.word	0x48000c00
 8003870:	48000800 	.word	0x48000800
 8003874:	48001800 	.word	0x48001800

08003878 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003880:	1d39      	adds	r1, r7, #4
 8003882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003886:	2201      	movs	r2, #1
 8003888:	4803      	ldr	r0, [pc, #12]	@ (8003898 <__io_putchar+0x20>)
 800388a:	f006 fb23 	bl	8009ed4 <HAL_UART_Transmit>
  return ch;
 800388e:	687b      	ldr	r3, [r7, #4]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20040740 	.word	0x20040740

0800389c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038a0:	b672      	cpsid	i
}
 80038a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <Error_Handler+0x8>

080038a8 <max30105_init>:
 * @param device Pointer to device structure
 * @param i2c_handle Pointer to I2C handle
 * @return true if initialization successful
 * @return false if initialization failed
 */
bool max30105_init(max30105_t* device, I2C_HandleTypeDef* i2c_handle) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
    // Initialize sensor data structure
    if (device == NULL || i2c_handle == NULL) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <max30105_init+0x16>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <max30105_init+0x1a>
        return false;
 80038be:	2300      	movs	r3, #0
 80038c0:	e021      	b.n	8003906 <max30105_init+0x5e>
    }
    
    // Setup the device structure
    device->i2c_handle = i2c_handle;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	601a      	str	r2, [r3, #0]
    device->_i2caddr = MAX30105_ADDRESS;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2257      	movs	r2, #87	@ 0x57
 80038cc:	711a      	strb	r2, [r3, #4]
    device->activeLEDs = 0;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	719a      	strb	r2, [r3, #6]
    device->revisionID = 0;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	715a      	strb	r2, [r3, #5]
    
    // Initialize FIFO structure
    memset(&device->sense, 0, sizeof(max30105_fifo_t));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3308      	adds	r3, #8
 80038de:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f00c fd5f 	bl	80103a8 <memset>
    
    // Check if the device ID is correct
    uint8_t partID = max30105_readPartID(device);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f945 	bl	8003b7a <max30105_readPartID>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]
    if (partID != MAX_30105_EXPECTEDPARTID) {
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b15      	cmp	r3, #21
 80038f8:	d001      	beq.n	80038fe <max30105_init+0x56>
        return false;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e003      	b.n	8003906 <max30105_init+0x5e>
    }
    
    // Read revision ID
    max30105_readRevisionID(device);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f948 	bl	8003b94 <max30105_readRevisionID>
    
    return true;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <max30105_softReset>:
/**
 * @brief Soft reset the sensor
 * 
 * @param device Pointer to device structure
 */
void max30105_softReset(max30105_t* device) {
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
    max30105_bitMask(device, MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 8003916:	2340      	movs	r3, #64	@ 0x40
 8003918:	22bf      	movs	r2, #191	@ 0xbf
 800391a:	2109      	movs	r1, #9
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fbc3 	bl	80040a8 <max30105_bitMask>

    // Poll for bit to clear, reset is then complete
    // Timeout after 100ms
    uint32_t startTime = HAL_GetTick();
 8003922:	f002 f83b 	bl	800599c <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - startTime < 100) {
 8003928:	e00d      	b.n	8003946 <max30105_softReset+0x38>
        uint8_t response = max30105_readRegister8(device, MAX30105_MODECONFIG);
 800392a:	2109      	movs	r1, #9
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fbe0 	bl	80040f2 <max30105_readRegister8>
 8003932:	4603      	mov	r3, r0
 8003934:	72fb      	strb	r3, [r7, #11]
        if ((response & MAX30105_RESET) == 0) break; // Reset complete
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <max30105_softReset+0x48>
        HAL_Delay(1); // Avoid overloading I2C bus
 8003940:	2001      	movs	r0, #1
 8003942:	f002 f837 	bl	80059b4 <HAL_Delay>
    while (HAL_GetTick() - startTime < 100) {
 8003946:	f002 f829 	bl	800599c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b63      	cmp	r3, #99	@ 0x63
 8003952:	d9ea      	bls.n	800392a <max30105_softReset+0x1c>
    }
}
 8003954:	e000      	b.n	8003958 <max30105_softReset+0x4a>
        if ((response & MAX30105_RESET) == 0) break; // Reset complete
 8003956:	bf00      	nop
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <max30105_setLEDMode>:
 * @brief Set the LED mode
 * 
 * @param device Pointer to device structure
 * @param mode LED mode (MAX30105_MODE_REDONLY, MAX30105_MODE_REDIRONLY, or MAX30105_MODE_MULTILED)
 */
void max30105_setLEDMode(max30105_t* device, uint8_t mode) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
    // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
    // See datasheet, page 19
    max30105_bitMask(device, MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	22f8      	movs	r2, #248	@ 0xf8
 8003970:	2109      	movs	r1, #9
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb98 	bl	80040a8 <max30105_bitMask>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <max30105_setADCRange>:
 * @brief Set ADC range
 * 
 * @param device Pointer to device structure
 * @param adcRange ADC range (MAX30105_ADCRANGE_2048, _4096, _8192, _16384)
 */
void max30105_setADCRange(max30105_t* device, uint8_t adcRange) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
    // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
    max30105_bitMask(device, MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	229f      	movs	r2, #159	@ 0x9f
 8003990:	210a      	movs	r1, #10
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fb88 	bl	80040a8 <max30105_bitMask>
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <max30105_setSampleRate>:
 * @brief Set sample rate
 * 
 * @param device Pointer to device structure
 * @param sampleRate Sample rate (MAX30105_SAMPLERATE_50, _100, _200, etc.)
 */
void max30105_setSampleRate(max30105_t* device, uint8_t sampleRate) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
    // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
    max30105_bitMask(device, MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	22e3      	movs	r2, #227	@ 0xe3
 80039b0:	210a      	movs	r1, #10
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb78 	bl	80040a8 <max30105_bitMask>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <max30105_setPulseWidth>:
 * @brief Set pulse width
 * 
 * @param device Pointer to device structure
 * @param pulseWidth Pulse width (MAX30105_PULSEWIDTH_69, _118, _215, _411)
 */
void max30105_setPulseWidth(max30105_t* device, uint8_t pulseWidth) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
    // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
    max30105_bitMask(device, MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	22fc      	movs	r2, #252	@ 0xfc
 80039d0:	210a      	movs	r1, #10
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fb68 	bl	80040a8 <max30105_bitMask>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <max30105_setPulseAmplitudeRed>:
 * @brief Set pulse amplitude for red LED
 * 
 * @param device Pointer to device structure
 * @param amplitude Amplitude (0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical))
 */
void max30105_setPulseAmplitudeRed(max30105_t* device, uint8_t amplitude) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
    max30105_writeRegister8(device, MAX30105_LED1_PULSEAMP, amplitude);
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	461a      	mov	r2, r3
 80039f0:	210c      	movs	r1, #12
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fbaf 	bl	8004156 <max30105_writeRegister8>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <max30105_setPulseAmplitudeIR>:
 * @brief Set pulse amplitude for IR LED
 * 
 * @param device Pointer to device structure
 * @param amplitude Amplitude (0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical))
 */
void max30105_setPulseAmplitudeIR(max30105_t* device, uint8_t amplitude) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
    max30105_writeRegister8(device, MAX30105_LED2_PULSEAMP, amplitude);
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	210d      	movs	r1, #13
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fb9f 	bl	8004156 <max30105_writeRegister8>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <max30105_setPulseAmplitudeGreen>:
 * @brief Set pulse amplitude for green LED
 * 
 * @param device Pointer to device structure
 * @param amplitude Amplitude (0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical))
 */
void max30105_setPulseAmplitudeGreen(max30105_t* device, uint8_t amplitude) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
    max30105_writeRegister8(device, MAX30105_LED3_PULSEAMP, amplitude);
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	210e      	movs	r1, #14
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fb8f 	bl	8004156 <max30105_writeRegister8>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <max30105_setPulseAmplitudeProximity>:
 * @brief Set pulse amplitude for proximity mode
 * 
 * @param device Pointer to device structure
 * @param amplitude Amplitude (0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical))
 */
void max30105_setPulseAmplitudeProximity(max30105_t* device, uint8_t amplitude) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
    max30105_writeRegister8(device, MAX30105_LED_PROX_AMP, amplitude);
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2110      	movs	r1, #16
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fb7f 	bl	8004156 <max30105_writeRegister8>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <max30105_enableSlot>:
 * 
 * @param device Pointer to device structure
 * @param slotNumber Slot number (1-4)
 * @param device_type Device type (SLOT_RED_LED, SLOT_IR_LED, etc.)
 */
void max30105_enableSlot(max30105_t* device, uint8_t slotNumber, uint8_t device_type) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	70bb      	strb	r3, [r7, #2]
    switch (slotNumber) {
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d82b      	bhi.n	8003ad0 <max30105_enableSlot+0x70>
 8003a78:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <max30105_enableSlot+0x20>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003a9f 	.word	0x08003a9f
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003abf 	.word	0x08003abf
        case (1):
            max30105_bitMask(device, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device_type);
 8003a90:	78bb      	ldrb	r3, [r7, #2]
 8003a92:	22f8      	movs	r2, #248	@ 0xf8
 8003a94:	2111      	movs	r1, #17
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fb06 	bl	80040a8 <max30105_bitMask>
            break;
 8003a9c:	e019      	b.n	8003ad2 <max30105_enableSlot+0x72>
        case (2):
            max30105_bitMask(device, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device_type << 4);
 8003a9e:	78bb      	ldrb	r3, [r7, #2]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	228f      	movs	r2, #143	@ 0x8f
 8003aa6:	2111      	movs	r1, #17
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fafd 	bl	80040a8 <max30105_bitMask>
            break;
 8003aae:	e010      	b.n	8003ad2 <max30105_enableSlot+0x72>
        case (3):
            max30105_bitMask(device, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device_type);
 8003ab0:	78bb      	ldrb	r3, [r7, #2]
 8003ab2:	22f8      	movs	r2, #248	@ 0xf8
 8003ab4:	2112      	movs	r1, #18
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 faf6 	bl	80040a8 <max30105_bitMask>
            break;
 8003abc:	e009      	b.n	8003ad2 <max30105_enableSlot+0x72>
        case (4):
            max30105_bitMask(device, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device_type << 4);
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	228f      	movs	r2, #143	@ 0x8f
 8003ac6:	2112      	movs	r1, #18
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 faed 	bl	80040a8 <max30105_bitMask>
            break;
 8003ace:	e000      	b.n	8003ad2 <max30105_enableSlot+0x72>
        default:
            // Invalid slot number
            break;
 8003ad0:	bf00      	nop
    }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop

08003adc <max30105_setFIFOAverage>:
 * @brief Set FIFO averaging
 * 
 * @param device Pointer to device structure
 * @param numberOfSamples Number of samples to average (MAX30105_SAMPLEAVG_x)
 */
void max30105_setFIFOAverage(max30105_t* device, uint8_t numberOfSamples) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
    max30105_bitMask(device, MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	221f      	movs	r2, #31
 8003aec:	2108      	movs	r1, #8
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fada 	bl	80040a8 <max30105_bitMask>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <max30105_clearFIFO>:
/**
 * @brief Clear FIFO
 * 
 * @param device Pointer to device structure
 */
void max30105_clearFIFO(max30105_t* device) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    max30105_writeRegister8(device, MAX30105_FIFOWRITEPTR, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2104      	movs	r1, #4
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fb24 	bl	8004156 <max30105_writeRegister8>
    max30105_writeRegister8(device, MAX30105_FIFOOVERFLOW, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2105      	movs	r1, #5
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fb1f 	bl	8004156 <max30105_writeRegister8>
    max30105_writeRegister8(device, MAX30105_FIFOREADPTR, 0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2106      	movs	r1, #6
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb1a 	bl	8004156 <max30105_writeRegister8>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <max30105_enableFIFORollover>:
/**
 * @brief Enable FIFO rollover
 * 
 * @param device Pointer to device structure
 */
void max30105_enableFIFORollover(max30105_t* device) {
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
    max30105_bitMask(device, MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 8003b32:	2310      	movs	r3, #16
 8003b34:	22ef      	movs	r2, #239	@ 0xef
 8003b36:	2108      	movs	r1, #8
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fab5 	bl	80040a8 <max30105_bitMask>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <max30105_getWritePointer>:
 * @brief Get FIFO write pointer
 * 
 * @param device Pointer to device structure
 * @return uint8_t Write pointer value
 */
uint8_t max30105_getWritePointer(max30105_t* device) {
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
    return max30105_readRegister8(device, MAX30105_FIFOWRITEPTR);
 8003b4e:	2104      	movs	r1, #4
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 face 	bl	80040f2 <max30105_readRegister8>
 8003b56:	4603      	mov	r3, r0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <max30105_getReadPointer>:
 * @brief Get FIFO read pointer
 * 
 * @param device Pointer to device structure
 * @return uint8_t Read pointer value
 */
uint8_t max30105_getReadPointer(max30105_t* device) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
    return max30105_readRegister8(device, MAX30105_FIFOREADPTR);
 8003b68:	2106      	movs	r1, #6
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fac1 	bl	80040f2 <max30105_readRegister8>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <max30105_readPartID>:
 * @brief Read part ID register
 * 
 * @param device Pointer to device structure
 * @return uint8_t Part ID value (should be 0x15)
 */
uint8_t max30105_readPartID(max30105_t* device) {
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
    return max30105_readRegister8(device, MAX30105_PARTID);
 8003b82:	21ff      	movs	r1, #255	@ 0xff
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fab4 	bl	80040f2 <max30105_readRegister8>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <max30105_readRevisionID>:
/**
 * @brief Read and store the revision ID
 * 
 * @param device Pointer to device structure
 */
void max30105_readRevisionID(max30105_t* device) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    device->revisionID = max30105_readRegister8(device, MAX30105_REVISIONID);
 8003b9c:	21fe      	movs	r1, #254	@ 0xfe
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 faa7 	bl	80040f2 <max30105_readRegister8>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	715a      	strb	r2, [r3, #5]
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <max30105_setup>:
 * @param sampleRate Sample rate in Hz
 * @param pulseWidth Pulse width in μs
 * @param adcRange ADC range in nA
 */
void max30105_setup(max30105_t* device, uint8_t powerLevel, uint8_t sampleAverage, 
                   uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	70fb      	strb	r3, [r7, #3]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70bb      	strb	r3, [r7, #2]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	707b      	strb	r3, [r7, #1]
    max30105_softReset(device); // Reset all configuration, threshold, and data registers to POR values
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff fe9d 	bl	800390e <max30105_softReset>

    // FIFO Configuration
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    // The chip will average multiple samples of same type together if you wish
    if (sampleAverage == 1) max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_1); // No averaging per FIFO record
 8003bd4:	78bb      	ldrb	r3, [r7, #2]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d104      	bne.n	8003be4 <max30105_setup+0x30>
 8003bda:	2100      	movs	r1, #0
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff7d 	bl	8003adc <max30105_setFIFOAverage>
 8003be2:	e02b      	b.n	8003c3c <max30105_setup+0x88>
    else if (sampleAverage == 2) max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_2);
 8003be4:	78bb      	ldrb	r3, [r7, #2]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d104      	bne.n	8003bf4 <max30105_setup+0x40>
 8003bea:	2120      	movs	r1, #32
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff75 	bl	8003adc <max30105_setFIFOAverage>
 8003bf2:	e023      	b.n	8003c3c <max30105_setup+0x88>
    else if (sampleAverage == 4) max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_4);
 8003bf4:	78bb      	ldrb	r3, [r7, #2]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d104      	bne.n	8003c04 <max30105_setup+0x50>
 8003bfa:	2140      	movs	r1, #64	@ 0x40
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff6d 	bl	8003adc <max30105_setFIFOAverage>
 8003c02:	e01b      	b.n	8003c3c <max30105_setup+0x88>
    else if (sampleAverage == 8) max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_8);
 8003c04:	78bb      	ldrb	r3, [r7, #2]
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d104      	bne.n	8003c14 <max30105_setup+0x60>
 8003c0a:	2160      	movs	r1, #96	@ 0x60
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff65 	bl	8003adc <max30105_setFIFOAverage>
 8003c12:	e013      	b.n	8003c3c <max30105_setup+0x88>
    else if (sampleAverage == 16) max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_16);
 8003c14:	78bb      	ldrb	r3, [r7, #2]
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d104      	bne.n	8003c24 <max30105_setup+0x70>
 8003c1a:	2180      	movs	r1, #128	@ 0x80
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff5d 	bl	8003adc <max30105_setFIFOAverage>
 8003c22:	e00b      	b.n	8003c3c <max30105_setup+0x88>
    else if (sampleAverage == 32) max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_32);
 8003c24:	78bb      	ldrb	r3, [r7, #2]
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d104      	bne.n	8003c34 <max30105_setup+0x80>
 8003c2a:	21a0      	movs	r1, #160	@ 0xa0
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff55 	bl	8003adc <max30105_setFIFOAverage>
 8003c32:	e003      	b.n	8003c3c <max30105_setup+0x88>
    else max30105_setFIFOAverage(device, MAX30105_SAMPLEAVG_4);
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff50 	bl	8003adc <max30105_setFIFOAverage>

    // setFIFOAlmostFull(2); // Set to 30 samples to trigger an 'Almost Full' interrupt
    max30105_enableFIFORollover(device); // Allow FIFO to wrap/roll over
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff74 	bl	8003b2a <max30105_enableFIFORollover>
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    // Mode Configuration
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    if (ledMode == 3) max30105_setLEDMode(device, MAX30105_MODE_MULTILED); // Watch all three LED channels
 8003c42:	787b      	ldrb	r3, [r7, #1]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d104      	bne.n	8003c52 <max30105_setup+0x9e>
 8003c48:	2107      	movs	r1, #7
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fe88 	bl	8003960 <max30105_setLEDMode>
 8003c50:	e00b      	b.n	8003c6a <max30105_setup+0xb6>
    else if (ledMode == 2) max30105_setLEDMode(device, MAX30105_MODE_REDIRONLY); // Red and IR
 8003c52:	787b      	ldrb	r3, [r7, #1]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d104      	bne.n	8003c62 <max30105_setup+0xae>
 8003c58:	2103      	movs	r1, #3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fe80 	bl	8003960 <max30105_setLEDMode>
 8003c60:	e003      	b.n	8003c6a <max30105_setup+0xb6>
    else max30105_setLEDMode(device, MAX30105_MODE_REDONLY); // Red only
 8003c62:	2102      	movs	r1, #2
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff fe7b 	bl	8003960 <max30105_setLEDMode>
    device->activeLEDs = ledMode; // Used to control how many bytes to read from FIFO buffer
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	787a      	ldrb	r2, [r7, #1]
 8003c6e:	719a      	strb	r2, [r3, #6]
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    // Particle Sensing Configuration
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    if (adcRange < 4096) max30105_setADCRange(device, MAX30105_ADCRANGE_2048); // 7.81pA per LSB
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c76:	da04      	bge.n	8003c82 <max30105_setup+0xce>
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fe80 	bl	8003980 <max30105_setADCRange>
 8003c80:	e01e      	b.n	8003cc0 <max30105_setup+0x10c>
    else if (adcRange < 8192) max30105_setADCRange(device, MAX30105_ADCRANGE_4096); // 15.63pA per LSB
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c88:	da04      	bge.n	8003c94 <max30105_setup+0xe0>
 8003c8a:	2120      	movs	r1, #32
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fe77 	bl	8003980 <max30105_setADCRange>
 8003c92:	e015      	b.n	8003cc0 <max30105_setup+0x10c>
    else if (adcRange < 16384) max30105_setADCRange(device, MAX30105_ADCRANGE_8192); // 31.25pA per LSB
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c9a:	da04      	bge.n	8003ca6 <max30105_setup+0xf2>
 8003c9c:	2140      	movs	r1, #64	@ 0x40
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fe6e 	bl	8003980 <max30105_setADCRange>
 8003ca4:	e00c      	b.n	8003cc0 <max30105_setup+0x10c>
    else if (adcRange == 16384) max30105_setADCRange(device, MAX30105_ADCRANGE_16384); // 62.5pA per LSB
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cac:	d104      	bne.n	8003cb8 <max30105_setup+0x104>
 8003cae:	2160      	movs	r1, #96	@ 0x60
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fe65 	bl	8003980 <max30105_setADCRange>
 8003cb6:	e003      	b.n	8003cc0 <max30105_setup+0x10c>
    else max30105_setADCRange(device, MAX30105_ADCRANGE_2048);
 8003cb8:	2100      	movs	r1, #0
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe60 	bl	8003980 <max30105_setADCRange>

    if (sampleRate < 100) max30105_setSampleRate(device, MAX30105_SAMPLERATE_50); // Take 50 samples per second
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b63      	cmp	r3, #99	@ 0x63
 8003cc4:	dc04      	bgt.n	8003cd0 <max30105_setup+0x11c>
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fe69 	bl	80039a0 <max30105_setSampleRate>
 8003cce:	e041      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate < 200) max30105_setSampleRate(device, MAX30105_SAMPLERATE_100);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cd4:	dc04      	bgt.n	8003ce0 <max30105_setup+0x12c>
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fe61 	bl	80039a0 <max30105_setSampleRate>
 8003cde:	e039      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate < 400) max30105_setSampleRate(device, MAX30105_SAMPLERATE_200);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003ce6:	da04      	bge.n	8003cf2 <max30105_setup+0x13e>
 8003ce8:	2108      	movs	r1, #8
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fe58 	bl	80039a0 <max30105_setSampleRate>
 8003cf0:	e030      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate < 800) max30105_setSampleRate(device, MAX30105_SAMPLERATE_400);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003cf8:	da04      	bge.n	8003d04 <max30105_setup+0x150>
 8003cfa:	210c      	movs	r1, #12
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fe4f 	bl	80039a0 <max30105_setSampleRate>
 8003d02:	e027      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate < 1000) max30105_setSampleRate(device, MAX30105_SAMPLERATE_800);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d0a:	da04      	bge.n	8003d16 <max30105_setup+0x162>
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fe46 	bl	80039a0 <max30105_setSampleRate>
 8003d14:	e01e      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate < 1600) max30105_setSampleRate(device, MAX30105_SAMPLERATE_1000);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003d1c:	da04      	bge.n	8003d28 <max30105_setup+0x174>
 8003d1e:	2114      	movs	r1, #20
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fe3d 	bl	80039a0 <max30105_setSampleRate>
 8003d26:	e015      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate < 3200) max30105_setSampleRate(device, MAX30105_SAMPLERATE_1600);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8003d2e:	da04      	bge.n	8003d3a <max30105_setup+0x186>
 8003d30:	2118      	movs	r1, #24
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fe34 	bl	80039a0 <max30105_setSampleRate>
 8003d38:	e00c      	b.n	8003d54 <max30105_setup+0x1a0>
    else if (sampleRate == 3200) max30105_setSampleRate(device, MAX30105_SAMPLERATE_3200);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8003d40:	d104      	bne.n	8003d4c <max30105_setup+0x198>
 8003d42:	211c      	movs	r1, #28
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fe2b 	bl	80039a0 <max30105_setSampleRate>
 8003d4a:	e003      	b.n	8003d54 <max30105_setup+0x1a0>
    else max30105_setSampleRate(device, MAX30105_SAMPLERATE_50);
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fe26 	bl	80039a0 <max30105_setSampleRate>

    // The longer the pulse width the longer range of detection you'll have
    // At 69us and 0.4mA it's about 2 inches
    // At 411us and 0.4mA it's about 6 inches
    if (pulseWidth < 118) max30105_setPulseWidth(device, MAX30105_PULSEWIDTH_69); // 15 bit resolution
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b75      	cmp	r3, #117	@ 0x75
 8003d58:	dc04      	bgt.n	8003d64 <max30105_setup+0x1b0>
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fe2f 	bl	80039c0 <max30105_setPulseWidth>
 8003d62:	e01e      	b.n	8003da2 <max30105_setup+0x1ee>
    else if (pulseWidth < 215) max30105_setPulseWidth(device, MAX30105_PULSEWIDTH_118); // 16 bit resolution
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2bd6      	cmp	r3, #214	@ 0xd6
 8003d68:	dc04      	bgt.n	8003d74 <max30105_setup+0x1c0>
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fe27 	bl	80039c0 <max30105_setPulseWidth>
 8003d72:	e016      	b.n	8003da2 <max30105_setup+0x1ee>
    else if (pulseWidth < 411) max30105_setPulseWidth(device, MAX30105_PULSEWIDTH_215); // 17 bit resolution
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8003d7a:	dc04      	bgt.n	8003d86 <max30105_setup+0x1d2>
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe1e 	bl	80039c0 <max30105_setPulseWidth>
 8003d84:	e00d      	b.n	8003da2 <max30105_setup+0x1ee>
    else if (pulseWidth == 411) max30105_setPulseWidth(device, MAX30105_PULSEWIDTH_411); // 18 bit resolution
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f240 129b 	movw	r2, #411	@ 0x19b
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d104      	bne.n	8003d9a <max30105_setup+0x1e6>
 8003d90:	2103      	movs	r1, #3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff fe14 	bl	80039c0 <max30105_setPulseWidth>
 8003d98:	e003      	b.n	8003da2 <max30105_setup+0x1ee>
    else max30105_setPulseWidth(device, MAX30105_PULSEWIDTH_69);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fe0f 	bl	80039c0 <max30105_setPulseWidth>
    // powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
    // powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
    // powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
    // powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

    max30105_setPulseAmplitudeRed(device, powerLevel);
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe1a 	bl	80039e0 <max30105_setPulseAmplitudeRed>
    max30105_setPulseAmplitudeIR(device, powerLevel);
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fe25 	bl	8003a00 <max30105_setPulseAmplitudeIR>
    max30105_setPulseAmplitudeGreen(device, powerLevel);
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	4619      	mov	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fe30 	bl	8003a20 <max30105_setPulseAmplitudeGreen>
    max30105_setPulseAmplitudeProximity(device, powerLevel);
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fe3b 	bl	8003a40 <max30105_setPulseAmplitudeProximity>
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    // Multi-LED Mode Configuration, Enable the reading of the three LEDs
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    max30105_enableSlot(device, 1, SLOT_RED_LED);
 8003dca:	2201      	movs	r2, #1
 8003dcc:	2101      	movs	r1, #1
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fe46 	bl	8003a60 <max30105_enableSlot>
    if (ledMode > 1) max30105_enableSlot(device, 2, SLOT_IR_LED);
 8003dd4:	787b      	ldrb	r3, [r7, #1]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d904      	bls.n	8003de4 <max30105_setup+0x230>
 8003dda:	2202      	movs	r2, #2
 8003ddc:	2102      	movs	r1, #2
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fe3e 	bl	8003a60 <max30105_enableSlot>
    if (ledMode > 2) max30105_enableSlot(device, 3, SLOT_GREEN_LED);
 8003de4:	787b      	ldrb	r3, [r7, #1]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d904      	bls.n	8003df4 <max30105_setup+0x240>
 8003dea:	2203      	movs	r2, #3
 8003dec:	2103      	movs	r1, #3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fe36 	bl	8003a60 <max30105_enableSlot>
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

    max30105_clearFIFO(device); // Reset the FIFO before we begin checking the sensor
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fe81 	bl	8003afc <max30105_clearFIFO>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <max30105_getIR>:
 * 
 * @param device Pointer to device structure
 * @return uint32_t IR sensor value or 0 if no new data
 */
uint32_t max30105_getIR(max30105_t* device)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
    // Check the sensor for new data for 250ms
    if (max30105_safeCheck(device, 250))
 8003e0a:	21fa      	movs	r1, #250	@ 0xfa
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f928 	bl	8004062 <max30105_safeCheck>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <max30105_getIR+0x28>
        return device->sense.IR[device->sense.head];
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3222      	adds	r2, #34	@ 0x22
 8003e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e28:	e000      	b.n	8003e2c <max30105_getIR+0x2a>
    else
        return 0; // Sensor failed to find new data
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <max30105_check>:
 * 
 * @param device Pointer to device structure
 * @return uint16_t Number of new samples obtained
 */
uint16_t max30105_check(max30105_t* device)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b095      	sub	sp, #84	@ 0x54
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
    // Read register FIFO_DATA in (3-byte * number of active LED) chunks
    // Until FIFO_RD_PTR = FIFO_WR_PTR

    uint8_t readPointer = max30105_getReadPointer(device);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fe8f 	bl	8003b60 <max30105_getReadPointer>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t writePointer = max30105_getWritePointer(device);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fe7c 	bl	8003b46 <max30105_getWritePointer>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    int numberOfSamples = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	647b      	str	r3, [r7, #68]	@ 0x44

    // Do we have new data?
    if (readPointer != writePointer)
 8003e58:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003e5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e60:	429a      	cmp	r2, r3
 8003e62:	f000 80f8 	beq.w	8004056 <max30105_check+0x222>
    {
        // Calculate the number of readings we need to get from sensor
        numberOfSamples = writePointer - readPointer;
 8003e66:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8003e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
        if (numberOfSamples < 0) numberOfSamples += 32; // Wrap condition
 8003e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da02      	bge.n	8003e7e <max30105_check+0x4a>
 8003e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7a:	3320      	adds	r3, #32
 8003e7c:	647b      	str	r3, [r7, #68]	@ 0x44

        // Calculate bytes to read (each value is 3 bytes)
        int bytesLeftToRead = numberOfSamples * device->activeLEDs * 3;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	799b      	ldrb	r3, [r3, #6]
 8003e82:	461a      	mov	r2, r3
 8003e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e86:	fb03 f202 	mul.w	r2, r3, r2
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	643b      	str	r3, [r7, #64]	@ 0x40

        // Get ready to read a burst of data from the FIFO register
        // Using STM32 HAL for I2C communication
        uint8_t reg = MAX30105_FIFODATA;
 8003e92:	2307      	movs	r3, #7
 8003e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        HAL_StatusTypeDef status;
        
        // Send register address to read from
        status = HAL_I2C_Master_Transmit(device->i2c_handle, device->_i2caddr << 1, &reg, 1, I2C_TIMEOUT_MS);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	b299      	uxth	r1, r3
 8003ea4:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8003ea8:	2364      	movs	r3, #100	@ 0x64
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2301      	movs	r3, #1
 8003eae:	f002 f915 	bl	80060dc <HAL_I2C_Master_Transmit>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        if (status != HAL_OK) {
 8003eb8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80c6 	beq.w	800404e <max30105_check+0x21a>
            return 0; // Error in I2C transmission
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e0c9      	b.n	800405a <max30105_check+0x226>

        // We may need to read as many as 288 bytes
        // Read in chunks no larger than 32 bytes at a time (common I2C buffer size)
        while (bytesLeftToRead > 0)
        {
            int toGet = bytesLeftToRead;
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (toGet > 32) {
 8003eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	dd0e      	ble.n	8003eee <max30105_check+0xba>
                // If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
                // 32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
                // 32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.
                toGet = 32 - (32 % (device->activeLEDs * 3)); // Trim to be a multiple of the samples we need to read
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	799b      	ldrb	r3, [r3, #6]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	2220      	movs	r2, #32
 8003ede:	fb92 f1f3 	sdiv	r1, r2, r3
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f1c3 0320 	rsb	r3, r3, #32
 8003eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            bytesLeftToRead -= toGet;
 8003eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40

            // Request toGet number of bytes from sensor
            uint8_t buffer[32]; // Maximum buffer size of 32 bytes
            status = HAL_I2C_Master_Receive(device->i2c_handle, device->_i2caddr << 1, buffer, toGet, I2C_TIMEOUT_MS);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	791b      	ldrb	r3, [r3, #4]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	b299      	uxth	r1, r3
 8003f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f107 020c 	add.w	r2, r7, #12
 8003f0a:	2464      	movs	r4, #100	@ 0x64
 8003f0c:	9400      	str	r4, [sp, #0]
 8003f0e:	f002 f9fd 	bl	800630c <HAL_I2C_Master_Receive>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            if (status != HAL_OK) {
 8003f18:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <max30105_check+0xf0>
                return 0; // Error in I2C reception
 8003f20:	2300      	movs	r3, #0
            return 0; // Error in I2C transmission
 8003f22:	e09a      	b.n	800405a <max30105_check+0x226>
            }

            // Process the data received
            for (int i = 0; i < toGet; i += (device->activeLEDs * 3)) {
 8003f24:	2300      	movs	r3, #0
 8003f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f28:	e08c      	b.n	8004044 <max30105_check+0x210>
                device->sense.head++; // Advance the head of the storage struct
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8003f30:	3301      	adds	r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                device->sense.head %= MAX30105_STORAGE_SIZE; // Wrap condition
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188

                uint32_t tempLong;

                // Burst read three bytes - RED
                tempLong = ((uint32_t)buffer[i] << 16) | ((uint32_t)buffer[i+1] << 8) | buffer[i+2];
 8003f4c:	f107 020c 	add.w	r2, r7, #12
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	041a      	lsls	r2, r3, #16
 8003f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	3348      	adds	r3, #72	@ 0x48
 8003f5e:	443b      	add	r3, r7
 8003f60:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	4313      	orrs	r3, r2
 8003f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f6a:	3202      	adds	r2, #2
 8003f6c:	3248      	adds	r2, #72	@ 0x48
 8003f6e:	443a      	add	r2, r7
 8003f70:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	633b      	str	r3, [r7, #48]	@ 0x30
                tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003f7e:	633b      	str	r3, [r7, #48]	@ 0x30
                device->sense.red[device->sense.head] = tempLong; // Store this reading into the sense array
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3202      	adds	r2, #2
 8003f8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                if (device->activeLEDs > 1) {
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	799b      	ldrb	r3, [r3, #6]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d923      	bls.n	8003fe2 <max30105_check+0x1ae>
                    // Burst read three more bytes - IR
                    tempLong = ((uint32_t)buffer[i+3] << 16) | ((uint32_t)buffer[i+4] << 8) | buffer[i+5];
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	3303      	adds	r3, #3
 8003f9e:	3348      	adds	r3, #72	@ 0x48
 8003fa0:	443b      	add	r3, r7
 8003fa2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003fa6:	041a      	lsls	r2, r3, #16
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	3304      	adds	r3, #4
 8003fac:	3348      	adds	r3, #72	@ 0x48
 8003fae:	443b      	add	r3, r7
 8003fb0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fba:	3205      	adds	r2, #5
 8003fbc:	3248      	adds	r2, #72	@ 0x48
 8003fbe:	443a      	add	r2, r7
 8003fc0:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	633b      	str	r3, [r7, #48]	@ 0x30
                    tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
                    device->sense.IR[device->sense.head] = tempLong;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3222      	adds	r2, #34	@ 0x22
 8003fdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                }

                if (device->activeLEDs > 2) {
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	799b      	ldrb	r3, [r3, #6]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d923      	bls.n	8004032 <max30105_check+0x1fe>
                    // Burst read three more bytes - Green
                    tempLong = ((uint32_t)buffer[i+6] << 16) | ((uint32_t)buffer[i+7] << 8) | buffer[i+8];
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	3306      	adds	r3, #6
 8003fee:	3348      	adds	r3, #72	@ 0x48
 8003ff0:	443b      	add	r3, r7
 8003ff2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003ff6:	041a      	lsls	r2, r3, #16
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	3307      	adds	r3, #7
 8003ffc:	3348      	adds	r3, #72	@ 0x48
 8003ffe:	443b      	add	r3, r7
 8004000:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	4313      	orrs	r3, r2
 8004008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800400a:	3208      	adds	r2, #8
 800400c:	3248      	adds	r2, #72	@ 0x48
 800400e:	443a      	add	r2, r7
 8004010:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 8004014:	4313      	orrs	r3, r2
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30
                    tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8004018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800401e:	633b      	str	r3, [r7, #48]	@ 0x30
                    device->sense.green[device->sense.head] = tempLong;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3242      	adds	r2, #66	@ 0x42
 800402c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800402e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int i = 0; i < toGet; i += (device->activeLEDs * 3)) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	799b      	ldrb	r3, [r3, #6]
 8004036:	461a      	mov	r2, r3
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004040:	4413      	add	r3, r2
 8004042:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004048:	429a      	cmp	r2, r3
 800404a:	f6ff af6e 	blt.w	8003f2a <max30105_check+0xf6>
        while (bytesLeftToRead > 0)
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	f73f af38 	bgt.w	8003ec6 <max30105_check+0x92>
                }
            }
        } // End while (bytesLeftToRead > 0)
    } // End readPtr != writePtr

    return (uint16_t)numberOfSamples; // Let the world know how much new data we found
 8004056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004058:	b29b      	uxth	r3, r3
}
 800405a:	4618      	mov	r0, r3
 800405c:	374c      	adds	r7, #76	@ 0x4c
 800405e:	46bd      	mov	sp, r7
 8004060:	bd90      	pop	{r4, r7, pc}

08004062 <max30105_safeCheck>:
 * @param maxTimeToCheck Maximum time to wait in milliseconds
 * @return true New data was found
 * @return false No new data found within timeout
 */
bool max30105_safeCheck(max30105_t* device, uint8_t maxTimeToCheck)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
    uint32_t markTime = HAL_GetTick();
 800406e:	f001 fc95 	bl	800599c <HAL_GetTick>
 8004072:	60f8      	str	r0, [r7, #12]
    
    while (1) {
        if (HAL_GetTick() - markTime > maxTimeToCheck) return false;
 8004074:	f001 fc92 	bl	800599c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad2      	subs	r2, r2, r3
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	429a      	cmp	r2, r3
 8004082:	d901      	bls.n	8004088 <max30105_safeCheck+0x26>
 8004084:	2300      	movs	r3, #0
 8004086:	e00b      	b.n	80040a0 <max30105_safeCheck+0x3e>

        if (max30105_check(device) > 0) { // We found new data!
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fed3 	bl	8003e34 <max30105_check>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <max30105_safeCheck+0x36>
            return true;
 8004094:	2301      	movs	r3, #1
 8004096:	e003      	b.n	80040a0 <max30105_safeCheck+0x3e>
        }

        HAL_Delay(1);
 8004098:	2001      	movs	r0, #1
 800409a:	f001 fc8b 	bl	80059b4 <HAL_Delay>
        if (HAL_GetTick() - markTime > maxTimeToCheck) return false;
 800409e:	e7e9      	b.n	8004074 <max30105_safeCheck+0x12>
    }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <max30105_bitMask>:
 * @param reg Register address
 * @param mask Bit mask
 * @param value Value to set
 */
void max30105_bitMask(max30105_t* device, uint8_t reg, uint8_t mask, uint8_t value)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	70fb      	strb	r3, [r7, #3]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70bb      	strb	r3, [r7, #2]
 80040be:	4613      	mov	r3, r2
 80040c0:	707b      	strb	r3, [r7, #1]
    // Grab current register context
    uint8_t originalContents = max30105_readRegister8(device, reg);
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f813 	bl	80040f2 <max30105_readRegister8>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]

    // Zero-out the portions of the register we're interested in
    originalContents = originalContents & mask;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	78bb      	ldrb	r3, [r7, #2]
 80040d4:	4013      	ands	r3, r2
 80040d6:	73fb      	strb	r3, [r7, #15]

    // Change contents
    max30105_writeRegister8(device, reg, originalContents | value);
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	787b      	ldrb	r3, [r7, #1]
 80040dc:	4313      	orrs	r3, r2
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f836 	bl	8004156 <max30105_writeRegister8>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <max30105_readRegister8>:
 * @param device Pointer to device structure
 * @param reg Register address
 * @return uint8_t Register value
 */
uint8_t max30105_readRegister8(max30105_t* device, uint8_t reg)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af02      	add	r7, sp, #8
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    HAL_StatusTypeDef status;
    
    // Send register address
    status = HAL_I2C_Master_Transmit(device->i2c_handle, device->_i2caddr << 1, &reg, 1, I2C_TIMEOUT_MS);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	b299      	uxth	r1, r3
 800410a:	1cfa      	adds	r2, r7, #3
 800410c:	2364      	movs	r3, #100	@ 0x64
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2301      	movs	r3, #1
 8004112:	f001 ffe3 	bl	80060dc <HAL_I2C_Master_Transmit>
 8004116:	4603      	mov	r3, r0
 8004118:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <max30105_readRegister8+0x32>
        return 0; // I2C error
 8004120:	2300      	movs	r3, #0
 8004122:	e014      	b.n	800414e <max30105_readRegister8+0x5c>
    }
    
    // Read register value
    status = HAL_I2C_Master_Receive(device->i2c_handle, device->_i2caddr << 1, &value, 1, I2C_TIMEOUT_MS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	791b      	ldrb	r3, [r3, #4]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	b299      	uxth	r1, r3
 8004130:	f107 020e 	add.w	r2, r7, #14
 8004134:	2364      	movs	r3, #100	@ 0x64
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2301      	movs	r3, #1
 800413a:	f002 f8e7 	bl	800630c <HAL_I2C_Master_Receive>
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <max30105_readRegister8+0x5a>
        return 0; // I2C error
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <max30105_readRegister8+0x5c>
    }
    
    return value;
 800414c:	7bbb      	ldrb	r3, [r7, #14]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <max30105_writeRegister8>:
 * @param device Pointer to device structure
 * @param reg Register address
 * @param value Value to write
 */
void max30105_writeRegister8(max30105_t* device, uint8_t reg, uint8_t value)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af02      	add	r7, sp, #8
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	70fb      	strb	r3, [r7, #3]
 8004162:	4613      	mov	r3, r2
 8004164:	70bb      	strb	r3, [r7, #2]
    uint8_t buffer[2];
    buffer[0] = reg;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	733b      	strb	r3, [r7, #12]
    buffer[1] = value;
 800416a:	78bb      	ldrb	r3, [r7, #2]
 800416c:	737b      	strb	r3, [r7, #13]
    
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(device->i2c_handle, device->_i2caddr << 1, buffer, 2, I2C_TIMEOUT_MS);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	791b      	ldrb	r3, [r3, #4]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	b299      	uxth	r1, r3
 800417a:	f107 020c 	add.w	r2, r7, #12
 800417e:	2364      	movs	r3, #100	@ 0x64
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	2302      	movs	r3, #2
 8004184:	f001 ffaa 	bl	80060dc <HAL_I2C_Master_Transmit>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
    // more gracefully, such as setting an error flag or implementing retries
    if (status != HAL_OK) {
        // Handle I2C error - could add custom error handling here
        // For example: device->errorFlag = true;
    }
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_GPIO_EXTI_Callback>:
extern volatile uint32_t last_hour_press;
extern char timeStr[16];


//May need to be positioned inside of main.c since its overriding the weak definition of this function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	80fb      	strh	r3, [r7, #6]

	uint32_t now = HAL_GetTick();  // time in ms since startup
 800419e:	f001 fbfd 	bl	800599c <HAL_GetTick>
 80041a2:	60f8      	str	r0, [r7, #12]

	 if (GPIO_Pin == GPIO_PIN_8) {
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041aa:	d15e      	bne.n	800426a <HAL_GPIO_EXTI_Callback+0xd6>
			if (now - last_minute_press > 300) {  // 200 ms debounce window
 80041ac:	4b99      	ldr	r3, [pc, #612]	@ (8004414 <HAL_GPIO_EXTI_Callback+0x280>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80041b8:	f240 8127 	bls.w	800440a <HAL_GPIO_EXTI_Callback+0x276>

				if (minute < 59) {
 80041bc:	4b96      	ldr	r3, [pc, #600]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80041c4:	d827      	bhi.n	8004216 <HAL_GPIO_EXTI_Callback+0x82>
					++minute;
 80041c6:	4b94      	ldr	r3, [pc, #592]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	4b91      	ldr	r3, [pc, #580]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80041d2:	801a      	strh	r2, [r3, #0]
					if (hour > 12) {
 80041d4:	4b91      	ldr	r3, [pc, #580]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d90c      	bls.n	80041f8 <HAL_GPIO_EXTI_Callback+0x64>
						//pm
						sprintf(timeStr, "%02u:%02u PM", hour-12, minute);
 80041de:	4b8f      	ldr	r3, [pc, #572]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f1a3 020c 	sub.w	r2, r3, #12
 80041e8:	4b8b      	ldr	r3, [pc, #556]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	498c      	ldr	r1, [pc, #560]	@ (8004420 <HAL_GPIO_EXTI_Callback+0x28c>)
 80041f0:	488c      	ldr	r0, [pc, #560]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 80041f2:	f00b ffdf 	bl	80101b4 <siprintf>
 80041f6:	e00a      	b.n	800420e <HAL_GPIO_EXTI_Callback+0x7a>
					}
					else {
						// am
						sprintf(timeStr, "%02u:%02u AM", hour, minute);
 80041f8:	4b88      	ldr	r3, [pc, #544]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	4b85      	ldr	r3, [pc, #532]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	4988      	ldr	r1, [pc, #544]	@ (8004428 <HAL_GPIO_EXTI_Callback+0x294>)
 8004208:	4886      	ldr	r0, [pc, #536]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 800420a:	f00b ffd3 	bl	80101b4 <siprintf>

					}
					TimeCornerText(timeStr);
 800420e:	4885      	ldr	r0, [pc, #532]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 8004210:	f7fd fc7a 	bl	8001b08 <TimeCornerText>
 8004214:	e022      	b.n	800425c <HAL_GPIO_EXTI_Callback+0xc8>
					//printf("TEST THAT IT GOT HERE");
				}

				else {
					minute = 0;
 8004216:	4b80      	ldr	r3, [pc, #512]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 8004218:	2200      	movs	r2, #0
 800421a:	801a      	strh	r2, [r3, #0]
					if (hour > 12) {
 800421c:	4b7f      	ldr	r3, [pc, #508]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d90c      	bls.n	8004240 <HAL_GPIO_EXTI_Callback+0xac>
						//pm
						sprintf(timeStr, "%02u:%02u PM", hour-12, minute);
 8004226:	4b7d      	ldr	r3, [pc, #500]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f1a3 020c 	sub.w	r2, r3, #12
 8004230:	4b79      	ldr	r3, [pc, #484]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	497a      	ldr	r1, [pc, #488]	@ (8004420 <HAL_GPIO_EXTI_Callback+0x28c>)
 8004238:	487a      	ldr	r0, [pc, #488]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 800423a:	f00b ffbb 	bl	80101b4 <siprintf>
 800423e:	e00a      	b.n	8004256 <HAL_GPIO_EXTI_Callback+0xc2>
					}
					else {
						// am
						sprintf(timeStr, "%02u:%02u AM", hour, minute);
 8004240:	4b76      	ldr	r3, [pc, #472]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	4b73      	ldr	r3, [pc, #460]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	4976      	ldr	r1, [pc, #472]	@ (8004428 <HAL_GPIO_EXTI_Callback+0x294>)
 8004250:	4874      	ldr	r0, [pc, #464]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 8004252:	f00b ffaf 	bl	80101b4 <siprintf>

					}
					//printf("TEST THAT IT GOT HERE");
					TimeCornerText(timeStr);
 8004256:	4873      	ldr	r0, [pc, #460]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 8004258:	f7fd fc56 	bl	8001b08 <TimeCornerText>
				}

				second = 0;
 800425c:	4b73      	ldr	r3, [pc, #460]	@ (800442c <HAL_GPIO_EXTI_Callback+0x298>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
				last_minute_press = now;
 8004262:	4a6c      	ldr	r2, [pc, #432]	@ (8004414 <HAL_GPIO_EXTI_Callback+0x280>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6013      	str	r3, [r2, #0]
				HAL_Delay(5000);

			}
			++rightReset;
		}
}
 8004268:	e0cf      	b.n	800440a <HAL_GPIO_EXTI_Callback+0x276>
	else if (GPIO_Pin == GPIO_PIN_9) {
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004270:	d164      	bne.n	800433c <HAL_GPIO_EXTI_Callback+0x1a8>
		if (now - last_hour_press > 300) {  // 200 ms debounce window
 8004272:	4b6f      	ldr	r3, [pc, #444]	@ (8004430 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800427e:	f240 80c4 	bls.w	800440a <HAL_GPIO_EXTI_Callback+0x276>
			if (hour < 23) {
 8004282:	4b66      	ldr	r3, [pc, #408]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b16      	cmp	r3, #22
 800428a:	d82a      	bhi.n	80042e2 <HAL_GPIO_EXTI_Callback+0x14e>
				++hour;
 800428c:	4b63      	ldr	r3, [pc, #396]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	3301      	adds	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	4b61      	ldr	r3, [pc, #388]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 8004298:	801a      	strh	r2, [r3, #0]
				if (hour > 12) {
 800429a:	4b60      	ldr	r3, [pc, #384]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d90c      	bls.n	80042be <HAL_GPIO_EXTI_Callback+0x12a>
					sprintf(timeStr, "%02u:%02u PM", hour-12, minute);
 80042a4:	4b5d      	ldr	r3, [pc, #372]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f1a3 020c 	sub.w	r2, r3, #12
 80042ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	495a      	ldr	r1, [pc, #360]	@ (8004420 <HAL_GPIO_EXTI_Callback+0x28c>)
 80042b6:	485b      	ldr	r0, [pc, #364]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 80042b8:	f00b ff7c 	bl	80101b4 <siprintf>
 80042bc:	e00a      	b.n	80042d4 <HAL_GPIO_EXTI_Callback+0x140>
					sprintf(timeStr, "%02u:%02u AM", hour, minute);
 80042be:	4b57      	ldr	r3, [pc, #348]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b54      	ldr	r3, [pc, #336]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	4956      	ldr	r1, [pc, #344]	@ (8004428 <HAL_GPIO_EXTI_Callback+0x294>)
 80042ce:	4855      	ldr	r0, [pc, #340]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 80042d0:	f00b ff70 	bl	80101b4 <siprintf>
				printf("TEST THAT IT GOT HERE");
 80042d4:	4857      	ldr	r0, [pc, #348]	@ (8004434 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80042d6:	f00b fef5 	bl	80100c4 <iprintf>
				TimeCornerText(timeStr);
 80042da:	4852      	ldr	r0, [pc, #328]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 80042dc:	f7fd fc14 	bl	8001b08 <TimeCornerText>
 80042e0:	e025      	b.n	800432e <HAL_GPIO_EXTI_Callback+0x19a>
				hour = 0;
 80042e2:	4b4e      	ldr	r3, [pc, #312]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	801a      	strh	r2, [r3, #0]
				if (hour > 12) {
 80042e8:	4b4c      	ldr	r3, [pc, #304]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d90c      	bls.n	800430c <HAL_GPIO_EXTI_Callback+0x178>
					sprintf(timeStr, "%02u:%02u PM", hour-12, minute);
 80042f2:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f1a3 020c 	sub.w	r2, r3, #12
 80042fc:	4b46      	ldr	r3, [pc, #280]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4947      	ldr	r1, [pc, #284]	@ (8004420 <HAL_GPIO_EXTI_Callback+0x28c>)
 8004304:	4847      	ldr	r0, [pc, #284]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 8004306:	f00b ff55 	bl	80101b4 <siprintf>
 800430a:	e00a      	b.n	8004322 <HAL_GPIO_EXTI_Callback+0x18e>
					sprintf(timeStr, "%02u:%02u AM", hour, minute);
 800430c:	4b43      	ldr	r3, [pc, #268]	@ (800441c <HAL_GPIO_EXTI_Callback+0x288>)
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	4b40      	ldr	r3, [pc, #256]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x284>)
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	4943      	ldr	r1, [pc, #268]	@ (8004428 <HAL_GPIO_EXTI_Callback+0x294>)
 800431c:	4841      	ldr	r0, [pc, #260]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 800431e:	f00b ff49 	bl	80101b4 <siprintf>
				printf("TEST THAT IT GOT HERE");
 8004322:	4844      	ldr	r0, [pc, #272]	@ (8004434 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004324:	f00b fece 	bl	80100c4 <iprintf>
				TimeCornerText(timeStr);
 8004328:	483e      	ldr	r0, [pc, #248]	@ (8004424 <HAL_GPIO_EXTI_Callback+0x290>)
 800432a:	f7fd fbed 	bl	8001b08 <TimeCornerText>
			second = 0;
 800432e:	4b3f      	ldr	r3, [pc, #252]	@ (800442c <HAL_GPIO_EXTI_Callback+0x298>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
			last_hour_press = now;
 8004334:	4a3e      	ldr	r2, [pc, #248]	@ (8004430 <HAL_GPIO_EXTI_Callback+0x29c>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6013      	str	r3, [r2, #0]
}
 800433a:	e066      	b.n	800440a <HAL_GPIO_EXTI_Callback+0x276>
	else if (GPIO_Pin == GPIO_PIN_13) {
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004342:	d12f      	bne.n	80043a4 <HAL_GPIO_EXTI_Callback+0x210>
		runMotor(0);
 8004344:	2000      	movs	r0, #0
 8004346:	f000 f887 	bl	8004458 <runMotor>
		restock = 0;
 800434a:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
		if(leftReset == 7){
 8004350:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d11f      	bne.n	8004398 <HAL_GPIO_EXTI_Callback+0x204>
			restock = 2;
 8004358:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800435a:	2202      	movs	r2, #2
 800435c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2000);
 800435e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004362:	f001 fb27 	bl	80059b4 <HAL_Delay>
			runMotor(3);
 8004366:	2003      	movs	r0, #3
 8004368:	f000 f876 	bl	8004458 <runMotor>
			leftReset = 0;
 800436c:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_GPIO_EXTI_Callback+0x2a8>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
			Msg = "multivitamin";
 8004372:	4b33      	ldr	r3, [pc, #204]	@ (8004440 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004374:	4a33      	ldr	r2, [pc, #204]	@ (8004444 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8004376:	601a      	str	r2, [r3, #0]
			FillScreenExceptCorner(0xFFFF);
 8004378:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800437c:	f7fd feca 	bl	8002114 <FillScreenExceptCorner>
			RefillText(Msg);
 8004380:	4b2f      	ldr	r3, [pc, #188]	@ (8004440 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fd fc4f 	bl	8001c28 <RefillText>
			printf("Out of stock, please re-stock multivitamin dispenser ");
 800438a:	482f      	ldr	r0, [pc, #188]	@ (8004448 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800438c:	f00b fe9a 	bl	80100c4 <iprintf>
			HAL_Delay(5000);
 8004390:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004394:	f001 fb0e 	bl	80059b4 <HAL_Delay>
		++leftReset;
 8004398:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_GPIO_EXTI_Callback+0x2a8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	4a27      	ldr	r2, [pc, #156]	@ (800443c <HAL_GPIO_EXTI_Callback+0x2a8>)
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	e032      	b.n	800440a <HAL_GPIO_EXTI_Callback+0x276>
	else if (GPIO_Pin == GPIO_PIN_12) {
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043aa:	d12e      	bne.n	800440a <HAL_GPIO_EXTI_Callback+0x276>
			runMotor(1);
 80043ac:	2001      	movs	r0, #1
 80043ae:	f000 f853 	bl	8004458 <runMotor>
			restock = 0;
 80043b2:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
			if(rightReset == 7){
 80043b8:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b07      	cmp	r3, #7
 80043be:	d11f      	bne.n	8004400 <HAL_GPIO_EXTI_Callback+0x26c>
				restock = 1;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
				HAL_Delay(2000);
 80043c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043ca:	f001 faf3 	bl	80059b4 <HAL_Delay>
				runMotor(4);
 80043ce:	2004      	movs	r0, #4
 80043d0:	f000 f842 	bl	8004458 <runMotor>
				rightReset = 0;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
				Msg = "fever";
 80043da:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80043dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004450 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80043de:	601a      	str	r2, [r3, #0]
				FillScreenExceptCorner(0xFFFF);
 80043e0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80043e4:	f7fd fe96 	bl	8002114 <FillScreenExceptCorner>
				RefillText(Msg);
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fd fc1b 	bl	8001c28 <RefillText>
				printf("Out of stock, please re-stock fever dispenser ");
 80043f2:	4818      	ldr	r0, [pc, #96]	@ (8004454 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80043f4:	f00b fe66 	bl	80100c4 <iprintf>
				HAL_Delay(5000);
 80043f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80043fc:	f001 fada 	bl	80059b4 <HAL_Delay>
			++rightReset;
 8004400:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_GPIO_EXTI_Callback+0x2b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	4a11      	ldr	r2, [pc, #68]	@ (800444c <HAL_GPIO_EXTI_Callback+0x2b8>)
 8004408:	6013      	str	r3, [r2, #0]
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20040b2c 	.word	0x20040b2c
 8004418:	20040036 	.word	0x20040036
 800441c:	20040034 	.word	0x20040034
 8004420:	08012998 	.word	0x08012998
 8004424:	20040b34 	.word	0x20040b34
 8004428:	080129a8 	.word	0x080129a8
 800442c:	20040b29 	.word	0x20040b29
 8004430:	20040b30 	.word	0x20040b30
 8004434:	080129b8 	.word	0x080129b8
 8004438:	20040b28 	.word	0x20040b28
 800443c:	20040b50 	.word	0x20040b50
 8004440:	20040b4c 	.word	0x20040b4c
 8004444:	080129d0 	.word	0x080129d0
 8004448:	080129e0 	.word	0x080129e0
 800444c:	20040b54 	.word	0x20040b54
 8004450:	08012a18 	.word	0x08012a18
 8004454:	08012a20 	.word	0x08012a20

08004458 <runMotor>:

void runMotor(uint8_t left_0_right_1 ){
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]

	//2 m seconds event happening here
			if(left_0_right_1 == 0){
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d17c      	bne.n	8004562 <runMotor+0x10a>

				for(int i = 0 ; i < 256 ;++i){
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e075      	b.n	800455a <runMotor+0x102>
					HAL_Delay(2);
 800446e:	2002      	movs	r0, #2
 8004470:	f001 faa0 	bl	80059b4 <HAL_Delay>


						if (modeLeft == 0){
 8004474:	4bac      	ldr	r3, [pc, #688]	@ (8004728 <runMotor+0x2d0>)
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d114      	bne.n	80044a8 <runMotor+0x50>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 800447e:	2201      	movs	r2, #1
 8004480:	2108      	movs	r1, #8
 8004482:	48aa      	ldr	r0, [pc, #680]	@ (800472c <runMotor+0x2d4>)
 8004484:	f001 fd5e 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8004488:	2200      	movs	r2, #0
 800448a:	2110      	movs	r1, #16
 800448c:	48a7      	ldr	r0, [pc, #668]	@ (800472c <runMotor+0x2d4>)
 800448e:	f001 fd59 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8004492:	2200      	movs	r2, #0
 8004494:	2120      	movs	r1, #32
 8004496:	48a5      	ldr	r0, [pc, #660]	@ (800472c <runMotor+0x2d4>)
 8004498:	f001 fd54 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 800449c:	2200      	movs	r2, #0
 800449e:	2140      	movs	r1, #64	@ 0x40
 80044a0:	48a2      	ldr	r0, [pc, #648]	@ (800472c <runMotor+0x2d4>)
 80044a2:	f001 fd4f 	bl	8005f44 <HAL_GPIO_WritePin>
 80044a6:	e047      	b.n	8004538 <runMotor+0xe0>
						}
						else if(modeLeft == 1){
 80044a8:	4b9f      	ldr	r3, [pc, #636]	@ (8004728 <runMotor+0x2d0>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d114      	bne.n	80044dc <runMotor+0x84>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2108      	movs	r1, #8
 80044b6:	489d      	ldr	r0, [pc, #628]	@ (800472c <runMotor+0x2d4>)
 80044b8:	f001 fd44 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80044bc:	2201      	movs	r2, #1
 80044be:	2110      	movs	r1, #16
 80044c0:	489a      	ldr	r0, [pc, #616]	@ (800472c <runMotor+0x2d4>)
 80044c2:	f001 fd3f 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	2120      	movs	r1, #32
 80044ca:	4898      	ldr	r0, [pc, #608]	@ (800472c <runMotor+0x2d4>)
 80044cc:	f001 fd3a 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	@ 0x40
 80044d4:	4895      	ldr	r0, [pc, #596]	@ (800472c <runMotor+0x2d4>)
 80044d6:	f001 fd35 	bl	8005f44 <HAL_GPIO_WritePin>
 80044da:	e02d      	b.n	8004538 <runMotor+0xe0>
						}
						else if(modeLeft == 2){
 80044dc:	4b92      	ldr	r3, [pc, #584]	@ (8004728 <runMotor+0x2d0>)
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d114      	bne.n	8004510 <runMotor+0xb8>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2108      	movs	r1, #8
 80044ea:	4890      	ldr	r0, [pc, #576]	@ (800472c <runMotor+0x2d4>)
 80044ec:	f001 fd2a 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 80044f0:	2200      	movs	r2, #0
 80044f2:	2110      	movs	r1, #16
 80044f4:	488d      	ldr	r0, [pc, #564]	@ (800472c <runMotor+0x2d4>)
 80044f6:	f001 fd25 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80044fa:	2201      	movs	r2, #1
 80044fc:	2120      	movs	r1, #32
 80044fe:	488b      	ldr	r0, [pc, #556]	@ (800472c <runMotor+0x2d4>)
 8004500:	f001 fd20 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	2140      	movs	r1, #64	@ 0x40
 8004508:	4888      	ldr	r0, [pc, #544]	@ (800472c <runMotor+0x2d4>)
 800450a:	f001 fd1b 	bl	8005f44 <HAL_GPIO_WritePin>
 800450e:	e013      	b.n	8004538 <runMotor+0xe0>
						}
						else{//mode = 3
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2108      	movs	r1, #8
 8004514:	4885      	ldr	r0, [pc, #532]	@ (800472c <runMotor+0x2d4>)
 8004516:	f001 fd15 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 800451a:	2200      	movs	r2, #0
 800451c:	2110      	movs	r1, #16
 800451e:	4883      	ldr	r0, [pc, #524]	@ (800472c <runMotor+0x2d4>)
 8004520:	f001 fd10 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8004524:	2200      	movs	r2, #0
 8004526:	2120      	movs	r1, #32
 8004528:	4880      	ldr	r0, [pc, #512]	@ (800472c <runMotor+0x2d4>)
 800452a:	f001 fd0b 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800452e:	2201      	movs	r2, #1
 8004530:	2140      	movs	r1, #64	@ 0x40
 8004532:	487e      	ldr	r0, [pc, #504]	@ (800472c <runMotor+0x2d4>)
 8004534:	f001 fd06 	bl	8005f44 <HAL_GPIO_WritePin>
						}


						modeLeft = (modeLeft + 1)%4;
 8004538:	4b7b      	ldr	r3, [pc, #492]	@ (8004728 <runMotor+0x2d0>)
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	3301      	adds	r3, #1
 8004540:	425a      	negs	r2, r3
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	f002 0203 	and.w	r2, r2, #3
 800454a:	bf58      	it	pl
 800454c:	4253      	negpl	r3, r2
 800454e:	b29a      	uxth	r2, r3
 8004550:	4b75      	ldr	r3, [pc, #468]	@ (8004728 <runMotor+0x2d0>)
 8004552:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 256 ;++i){
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3301      	adds	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2bff      	cmp	r3, #255	@ 0xff
 800455e:	dd86      	ble.n	800446e <runMotor+0x16>
						modeRight = (modeRight + 1)%4;


				}
			}
}
 8004560:	e1a1      	b.n	80048a6 <runMotor+0x44e>
			else if(left_0_right_1 == 1){
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b01      	cmp	r3, #1
 8004566:	f040 8086 	bne.w	8004676 <runMotor+0x21e>
				for(int i = 0 ; i < 256 ;++i){
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e07d      	b.n	800466c <runMotor+0x214>
					HAL_Delay(2);
 8004570:	2002      	movs	r0, #2
 8004572:	f001 fa1f 	bl	80059b4 <HAL_Delay>
						if (modeRight == 0){
 8004576:	4b6e      	ldr	r3, [pc, #440]	@ (8004730 <runMotor+0x2d8>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d116      	bne.n	80045ae <runMotor+0x156>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 8004580:	2201      	movs	r2, #1
 8004582:	2180      	movs	r1, #128	@ 0x80
 8004584:	486b      	ldr	r0, [pc, #428]	@ (8004734 <runMotor+0x2dc>)
 8004586:	f001 fcdd 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004590:	4868      	ldr	r0, [pc, #416]	@ (8004734 <runMotor+0x2dc>)
 8004592:	f001 fcd7 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800459c:	4865      	ldr	r0, [pc, #404]	@ (8004734 <runMotor+0x2dc>)
 800459e:	f001 fcd1 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2102      	movs	r1, #2
 80045a6:	4864      	ldr	r0, [pc, #400]	@ (8004738 <runMotor+0x2e0>)
 80045a8:	f001 fccc 	bl	8005f44 <HAL_GPIO_WritePin>
 80045ac:	e04d      	b.n	800464a <runMotor+0x1f2>
						else if(modeRight == 1){
 80045ae:	4b60      	ldr	r3, [pc, #384]	@ (8004730 <runMotor+0x2d8>)
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d116      	bne.n	80045e6 <runMotor+0x18e>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	@ 0x80
 80045bc:	485d      	ldr	r0, [pc, #372]	@ (8004734 <runMotor+0x2dc>)
 80045be:	f001 fcc1 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 80045c2:	2201      	movs	r2, #1
 80045c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045c8:	485a      	ldr	r0, [pc, #360]	@ (8004734 <runMotor+0x2dc>)
 80045ca:	f001 fcbb 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 80045ce:	2200      	movs	r2, #0
 80045d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045d4:	4857      	ldr	r0, [pc, #348]	@ (8004734 <runMotor+0x2dc>)
 80045d6:	f001 fcb5 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2102      	movs	r1, #2
 80045de:	4856      	ldr	r0, [pc, #344]	@ (8004738 <runMotor+0x2e0>)
 80045e0:	f001 fcb0 	bl	8005f44 <HAL_GPIO_WritePin>
 80045e4:	e031      	b.n	800464a <runMotor+0x1f2>
						else if(modeRight == 2){
 80045e6:	4b52      	ldr	r3, [pc, #328]	@ (8004730 <runMotor+0x2d8>)
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d116      	bne.n	800461e <runMotor+0x1c6>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	484f      	ldr	r0, [pc, #316]	@ (8004734 <runMotor+0x2dc>)
 80045f6:	f001 fca5 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004600:	484c      	ldr	r0, [pc, #304]	@ (8004734 <runMotor+0x2dc>)
 8004602:	f001 fc9f 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 1);
 8004606:	2201      	movs	r2, #1
 8004608:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800460c:	4849      	ldr	r0, [pc, #292]	@ (8004734 <runMotor+0x2dc>)
 800460e:	f001 fc99 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8004612:	2200      	movs	r2, #0
 8004614:	2102      	movs	r1, #2
 8004616:	4848      	ldr	r0, [pc, #288]	@ (8004738 <runMotor+0x2e0>)
 8004618:	f001 fc94 	bl	8005f44 <HAL_GPIO_WritePin>
 800461c:	e015      	b.n	800464a <runMotor+0x1f2>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 800461e:	2200      	movs	r2, #0
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	4844      	ldr	r0, [pc, #272]	@ (8004734 <runMotor+0x2dc>)
 8004624:	f001 fc8e 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800462e:	4841      	ldr	r0, [pc, #260]	@ (8004734 <runMotor+0x2dc>)
 8004630:	f001 fc88 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800463a:	483e      	ldr	r0, [pc, #248]	@ (8004734 <runMotor+0x2dc>)
 800463c:	f001 fc82 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 8004640:	2201      	movs	r2, #1
 8004642:	2102      	movs	r1, #2
 8004644:	483c      	ldr	r0, [pc, #240]	@ (8004738 <runMotor+0x2e0>)
 8004646:	f001 fc7d 	bl	8005f44 <HAL_GPIO_WritePin>
						modeRight = (modeRight + 1)%4;
 800464a:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <runMotor+0x2d8>)
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	3301      	adds	r3, #1
 8004652:	425a      	negs	r2, r3
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	f002 0203 	and.w	r2, r2, #3
 800465c:	bf58      	it	pl
 800465e:	4253      	negpl	r3, r2
 8004660:	b29a      	uxth	r2, r3
 8004662:	4b33      	ldr	r3, [pc, #204]	@ (8004730 <runMotor+0x2d8>)
 8004664:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 256 ;++i){
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2bff      	cmp	r3, #255	@ 0xff
 8004670:	f77f af7e 	ble.w	8004570 <runMotor+0x118>
}
 8004674:	e117      	b.n	80048a6 <runMotor+0x44e>
			else if(left_0_right_1 == 3){
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	2b03      	cmp	r3, #3
 800467a:	f040 808a 	bne.w	8004792 <runMotor+0x33a>
				for(int i = 0 ; i < 2048 ;++i){
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e080      	b.n	8004786 <runMotor+0x32e>
					HAL_Delay(2);
 8004684:	2002      	movs	r0, #2
 8004686:	f001 f995 	bl	80059b4 <HAL_Delay>
					if (modeLeft == 0){
 800468a:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <runMotor+0x2d0>)
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d114      	bne.n	80046be <runMotor+0x266>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8004694:	2200      	movs	r2, #0
 8004696:	2108      	movs	r1, #8
 8004698:	4824      	ldr	r0, [pc, #144]	@ (800472c <runMotor+0x2d4>)
 800469a:	f001 fc53 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	2110      	movs	r1, #16
 80046a2:	4822      	ldr	r0, [pc, #136]	@ (800472c <runMotor+0x2d4>)
 80046a4:	f001 fc4e 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80046a8:	2200      	movs	r2, #0
 80046aa:	2120      	movs	r1, #32
 80046ac:	481f      	ldr	r0, [pc, #124]	@ (800472c <runMotor+0x2d4>)
 80046ae:	f001 fc49 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80046b2:	2201      	movs	r2, #1
 80046b4:	2140      	movs	r1, #64	@ 0x40
 80046b6:	481d      	ldr	r0, [pc, #116]	@ (800472c <runMotor+0x2d4>)
 80046b8:	f001 fc44 	bl	8005f44 <HAL_GPIO_WritePin>
 80046bc:	e052      	b.n	8004764 <runMotor+0x30c>
					else if(modeLeft == 1){
 80046be:	4b1a      	ldr	r3, [pc, #104]	@ (8004728 <runMotor+0x2d0>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d114      	bne.n	80046f2 <runMotor+0x29a>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80046c8:	2200      	movs	r2, #0
 80046ca:	2108      	movs	r1, #8
 80046cc:	4817      	ldr	r0, [pc, #92]	@ (800472c <runMotor+0x2d4>)
 80046ce:	f001 fc39 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2110      	movs	r1, #16
 80046d6:	4815      	ldr	r0, [pc, #84]	@ (800472c <runMotor+0x2d4>)
 80046d8:	f001 fc34 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80046dc:	2201      	movs	r2, #1
 80046de:	2120      	movs	r1, #32
 80046e0:	4812      	ldr	r0, [pc, #72]	@ (800472c <runMotor+0x2d4>)
 80046e2:	f001 fc2f 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2140      	movs	r1, #64	@ 0x40
 80046ea:	4810      	ldr	r0, [pc, #64]	@ (800472c <runMotor+0x2d4>)
 80046ec:	f001 fc2a 	bl	8005f44 <HAL_GPIO_WritePin>
 80046f0:	e038      	b.n	8004764 <runMotor+0x30c>
					else if(modeLeft == 2){
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <runMotor+0x2d0>)
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d11f      	bne.n	800473c <runMotor+0x2e4>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80046fc:	2200      	movs	r2, #0
 80046fe:	2108      	movs	r1, #8
 8004700:	480a      	ldr	r0, [pc, #40]	@ (800472c <runMotor+0x2d4>)
 8004702:	f001 fc1f 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8004706:	2201      	movs	r2, #1
 8004708:	2110      	movs	r1, #16
 800470a:	4808      	ldr	r0, [pc, #32]	@ (800472c <runMotor+0x2d4>)
 800470c:	f001 fc1a 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8004710:	2200      	movs	r2, #0
 8004712:	2120      	movs	r1, #32
 8004714:	4805      	ldr	r0, [pc, #20]	@ (800472c <runMotor+0x2d4>)
 8004716:	f001 fc15 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2140      	movs	r1, #64	@ 0x40
 800471e:	4803      	ldr	r0, [pc, #12]	@ (800472c <runMotor+0x2d4>)
 8004720:	f001 fc10 	bl	8005f44 <HAL_GPIO_WritePin>
 8004724:	e01e      	b.n	8004764 <runMotor+0x30c>
 8004726:	bf00      	nop
 8004728:	20040b58 	.word	0x20040b58
 800472c:	48000c00 	.word	0x48000c00
 8004730:	20040b5a 	.word	0x20040b5a
 8004734:	48001400 	.word	0x48001400
 8004738:	48001800 	.word	0x48001800
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 800473c:	2201      	movs	r2, #1
 800473e:	2108      	movs	r1, #8
 8004740:	485b      	ldr	r0, [pc, #364]	@ (80048b0 <runMotor+0x458>)
 8004742:	f001 fbff 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2110      	movs	r1, #16
 800474a:	4859      	ldr	r0, [pc, #356]	@ (80048b0 <runMotor+0x458>)
 800474c:	f001 fbfa 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	2120      	movs	r1, #32
 8004754:	4856      	ldr	r0, [pc, #344]	@ (80048b0 <runMotor+0x458>)
 8004756:	f001 fbf5 	bl	8005f44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2140      	movs	r1, #64	@ 0x40
 800475e:	4854      	ldr	r0, [pc, #336]	@ (80048b0 <runMotor+0x458>)
 8004760:	f001 fbf0 	bl	8005f44 <HAL_GPIO_WritePin>
					modeLeft = (modeLeft + 1)%4;
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <runMotor+0x45c>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	3301      	adds	r3, #1
 800476c:	425a      	negs	r2, r3
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	f002 0203 	and.w	r2, r2, #3
 8004776:	bf58      	it	pl
 8004778:	4253      	negpl	r3, r2
 800477a:	b29a      	uxth	r2, r3
 800477c:	4b4d      	ldr	r3, [pc, #308]	@ (80048b4 <runMotor+0x45c>)
 800477e:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 2048 ;++i){
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478c:	f6ff af7a 	blt.w	8004684 <runMotor+0x22c>
}
 8004790:	e089      	b.n	80048a6 <runMotor+0x44e>
			else if(left_0_right_1 == 4){
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	2b04      	cmp	r3, #4
 8004796:	f040 8086 	bne.w	80048a6 <runMotor+0x44e>
				for(int i = 0 ; i < 2048 ;++i){
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	e07d      	b.n	800489c <runMotor+0x444>
					HAL_Delay(2);
 80047a0:	2002      	movs	r0, #2
 80047a2:	f001 f907 	bl	80059b4 <HAL_Delay>
						if (modeRight == 0){
 80047a6:	4b44      	ldr	r3, [pc, #272]	@ (80048b8 <runMotor+0x460>)
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d116      	bne.n	80047de <runMotor+0x386>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	@ 0x80
 80047b4:	4841      	ldr	r0, [pc, #260]	@ (80048bc <runMotor+0x464>)
 80047b6:	f001 fbc5 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047c0:	483e      	ldr	r0, [pc, #248]	@ (80048bc <runMotor+0x464>)
 80047c2:	f001 fbbf 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 80047c6:	2200      	movs	r2, #0
 80047c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047cc:	483b      	ldr	r0, [pc, #236]	@ (80048bc <runMotor+0x464>)
 80047ce:	f001 fbb9 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80047d2:	2201      	movs	r2, #1
 80047d4:	2102      	movs	r1, #2
 80047d6:	483a      	ldr	r0, [pc, #232]	@ (80048c0 <runMotor+0x468>)
 80047d8:	f001 fbb4 	bl	8005f44 <HAL_GPIO_WritePin>
 80047dc:	e04d      	b.n	800487a <runMotor+0x422>
						else if(modeRight == 1){
 80047de:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <runMotor+0x460>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d116      	bne.n	8004816 <runMotor+0x3be>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80047e8:	2200      	movs	r2, #0
 80047ea:	2180      	movs	r1, #128	@ 0x80
 80047ec:	4833      	ldr	r0, [pc, #204]	@ (80048bc <runMotor+0x464>)
 80047ee:	f001 fba9 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 80047f2:	2200      	movs	r2, #0
 80047f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047f8:	4830      	ldr	r0, [pc, #192]	@ (80048bc <runMotor+0x464>)
 80047fa:	f001 fba3 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 1);
 80047fe:	2201      	movs	r2, #1
 8004800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004804:	482d      	ldr	r0, [pc, #180]	@ (80048bc <runMotor+0x464>)
 8004806:	f001 fb9d 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 800480a:	2200      	movs	r2, #0
 800480c:	2102      	movs	r1, #2
 800480e:	482c      	ldr	r0, [pc, #176]	@ (80048c0 <runMotor+0x468>)
 8004810:	f001 fb98 	bl	8005f44 <HAL_GPIO_WritePin>
 8004814:	e031      	b.n	800487a <runMotor+0x422>
						else if(modeRight == 2){
 8004816:	4b28      	ldr	r3, [pc, #160]	@ (80048b8 <runMotor+0x460>)
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d116      	bne.n	800484e <runMotor+0x3f6>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	@ 0x80
 8004824:	4825      	ldr	r0, [pc, #148]	@ (80048bc <runMotor+0x464>)
 8004826:	f001 fb8d 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 800482a:	2201      	movs	r2, #1
 800482c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004830:	4822      	ldr	r0, [pc, #136]	@ (80048bc <runMotor+0x464>)
 8004832:	f001 fb87 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800483c:	481f      	ldr	r0, [pc, #124]	@ (80048bc <runMotor+0x464>)
 800483e:	f001 fb81 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2102      	movs	r1, #2
 8004846:	481e      	ldr	r0, [pc, #120]	@ (80048c0 <runMotor+0x468>)
 8004848:	f001 fb7c 	bl	8005f44 <HAL_GPIO_WritePin>
 800484c:	e015      	b.n	800487a <runMotor+0x422>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 800484e:	2201      	movs	r2, #1
 8004850:	2180      	movs	r1, #128	@ 0x80
 8004852:	481a      	ldr	r0, [pc, #104]	@ (80048bc <runMotor+0x464>)
 8004854:	f001 fb76 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800485e:	4817      	ldr	r0, [pc, #92]	@ (80048bc <runMotor+0x464>)
 8004860:	f001 fb70 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, 0);
 8004864:	2200      	movs	r2, #0
 8004866:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800486a:	4814      	ldr	r0, [pc, #80]	@ (80048bc <runMotor+0x464>)
 800486c:	f001 fb6a 	bl	8005f44 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8004870:	2200      	movs	r2, #0
 8004872:	2102      	movs	r1, #2
 8004874:	4812      	ldr	r0, [pc, #72]	@ (80048c0 <runMotor+0x468>)
 8004876:	f001 fb65 	bl	8005f44 <HAL_GPIO_WritePin>
						modeRight = (modeRight + 1)%4;
 800487a:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <runMotor+0x460>)
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	425a      	negs	r2, r3
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	f002 0203 	and.w	r2, r2, #3
 800488c:	bf58      	it	pl
 800488e:	4253      	negpl	r3, r2
 8004890:	b29a      	uxth	r2, r3
 8004892:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <runMotor+0x460>)
 8004894:	801a      	strh	r2, [r3, #0]
				for(int i = 0 ; i < 2048 ;++i){
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	3301      	adds	r3, #1
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a2:	f6ff af7d 	blt.w	80047a0 <runMotor+0x348>
}
 80048a6:	bf00      	nop
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	48000c00 	.word	0x48000c00
 80048b4:	20040b58 	.word	0x20040b58
 80048b8:	20040b5a 	.word	0x20040b5a
 80048bc:	48001400 	.word	0x48001400
 80048c0:	48001800 	.word	0x48001800

080048c4 <RC522_SPI_Transfer>:
#include "rfid.h"

//SPI transfer

uint8_t RC522_SPI_Transfer(uint8_t data){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100);
 80048ce:	f107 020f 	add.w	r2, r7, #15
 80048d2:	1df9      	adds	r1, r7, #7
 80048d4:	2364      	movs	r3, #100	@ 0x64
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2301      	movs	r3, #1
 80048da:	4804      	ldr	r0, [pc, #16]	@ (80048ec <RC522_SPI_Transfer+0x28>)
 80048dc:	f004 fa81 	bl	8008de2 <HAL_SPI_TransmitReceive>
	return rx_data;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20040868 	.word	0x20040868

080048f0 <Write_MFRC522>:

void Write_MFRC522(uint8_t addr, uint8_t val){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	460a      	mov	r2, r1
 80048fa:	71fb      	strb	r3, [r7, #7]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71bb      	strb	r3, [r7, #6]
	//cs low to select the device
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004900:	2200      	movs	r2, #0
 8004902:	2110      	movs	r1, #16
 8004904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004908:	f001 fb1c 	bl	8005f44 <HAL_GPIO_WritePin>

	//select addr
	RC522_SPI_Transfer((addr << 1) & 0x7E);
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ffd3 	bl	80048c4 <RC522_SPI_Transfer>

	//write to addr
	RC522_SPI_Transfer(val);
 800491e:	79bb      	ldrb	r3, [r7, #6]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ffcf 	bl	80048c4 <RC522_SPI_Transfer>

	//set back to high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004926:	2201      	movs	r2, #1
 8004928:	2110      	movs	r1, #16
 800492a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800492e:	f001 fb09 	bl	8005f44 <HAL_GPIO_WritePin>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <Read_MFRC522>:

uint8_t Read_MFRC522(uint8_t addr){
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	4603      	mov	r3, r0
 8004942:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	//cs low to select SPI device
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004944:	2200      	movs	r2, #0
 8004946:	2110      	movs	r1, #16
 8004948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800494c:	f001 fafa 	bl	8005f44 <HAL_GPIO_WritePin>

	//select addr
	RC522_SPI_Transfer(((addr << 1) & 0x7E) | 0x80);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	b25b      	sxtb	r3, r3
 8004958:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800495c:	b25b      	sxtb	r3, r3
 800495e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004962:	b25b      	sxtb	r3, r3
 8004964:	b2db      	uxtb	r3, r3
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ffac 	bl	80048c4 <RC522_SPI_Transfer>

	//read addr
	val = RC522_SPI_Transfer(0x00);
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff ffa9 	bl	80048c4 <RC522_SPI_Transfer>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]

	//set back to high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004976:	2201      	movs	r2, #1
 8004978:	2110      	movs	r1, #16
 800497a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800497e:	f001 fae1 	bl	8005f44 <HAL_GPIO_WritePin>
	return val;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <SetBitMask>:

//set bits in a MFRC522 register
void SetBitMask(uint8_t reg, uint8_t mask){
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	460a      	mov	r2, r1
 8004996:	71fb      	strb	r3, [r7, #7]
 8004998:	4613      	mov	r3, r2
 800499a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = Read_MFRC522(reg);
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ffcb 	bl	800493a <Read_MFRC522>
 80049a4:	4603      	mov	r3, r0
 80049a6:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	79bb      	ldrb	r3, [r7, #6]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff9b 	bl	80048f0 <Write_MFRC522>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <ClearBitMask>:

//reset bits in register
void ClearBitMask(uint8_t reg, uint8_t mask){
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	460a      	mov	r2, r1
 80049cc:	71fb      	strb	r3, [r7, #7]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = Read_MFRC522(reg);
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ffb0 	bl	800493a <Read_MFRC522>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));
 80049de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	b25a      	sxtb	r2, r3
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	4013      	ands	r3, r2
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff7b 	bl	80048f0 <Write_MFRC522>
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <AntennaOn>:

void AntennaOn(void){
 8004a02:	b580      	push	{r7, lr}
 8004a04:	af00      	add	r7, sp, #0
	Read_MFRC522(TxControlReg);
 8004a06:	2014      	movs	r0, #20
 8004a08:	f7ff ff97 	bl	800493a <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8004a0c:	2103      	movs	r1, #3
 8004a0e:	2014      	movs	r0, #20
 8004a10:	f7ff ffbc 	bl	800498c <SetBitMask>
}
 8004a14:	bf00      	nop
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <MFRC522_Reset>:
void AntennaOff(void){
	ClearBitMask(TxControlReg, 0x03);
}

//reset RC522
void MFRC522_Reset(void){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8004a1c:	210f      	movs	r1, #15
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f7ff ff66 	bl	80048f0 <Write_MFRC522>
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <MFRC522_Init>:

//start RC522
void MFRC522_Init(void){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0

	//CS pin A4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2110      	movs	r1, #16
 8004a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a34:	f001 fa86 	bl	8005f44 <HAL_GPIO_WritePin>

	//reset pin A8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a42:	f001 fa7f 	bl	8005f44 <HAL_GPIO_WritePin>

	MFRC522_Reset();
 8004a46:	f7ff ffe7 	bl	8004a18 <MFRC522_Reset>

	Write_MFRC522(TModeReg, 0x8D);
 8004a4a:	218d      	movs	r1, #141	@ 0x8d
 8004a4c:	202a      	movs	r0, #42	@ 0x2a
 8004a4e:	f7ff ff4f 	bl	80048f0 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);
 8004a52:	213e      	movs	r1, #62	@ 0x3e
 8004a54:	202b      	movs	r0, #43	@ 0x2b
 8004a56:	f7ff ff4b 	bl	80048f0 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8004a5a:	211e      	movs	r1, #30
 8004a5c:	202d      	movs	r0, #45	@ 0x2d
 8004a5e:	f7ff ff47 	bl	80048f0 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8004a62:	2100      	movs	r1, #0
 8004a64:	202c      	movs	r0, #44	@ 0x2c
 8004a66:	f7ff ff43 	bl	80048f0 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);
 8004a6a:	2140      	movs	r1, #64	@ 0x40
 8004a6c:	2015      	movs	r0, #21
 8004a6e:	f7ff ff3f 	bl	80048f0 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);
 8004a72:	213d      	movs	r1, #61	@ 0x3d
 8004a74:	2011      	movs	r0, #17
 8004a76:	f7ff ff3b 	bl	80048f0 <Write_MFRC522>

	AntennaOn();
 8004a7a:	f7ff ffc2 	bl	8004a02 <AntennaOn>
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen){
 8004a82:	b590      	push	{r4, r7, lr}
 8004a84:	b089      	sub	sp, #36	@ 0x24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	4613      	mov	r3, r2
 8004a92:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8004a94:	2302      	movs	r3, #2
 8004a96:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRQ = 0x00;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint i;

	switch (command){
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d006      	beq.n	8004ab4 <MFRC522_ToCard+0x32>
 8004aa6:	2b0e      	cmp	r3, #14
 8004aa8:	d109      	bne.n	8004abe <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT:
		{
			irqEn = 0x12;
 8004aaa:	2312      	movs	r3, #18
 8004aac:	77bb      	strb	r3, [r7, #30]
			waitIRQ = 0x10;
 8004aae:	2310      	movs	r3, #16
 8004ab0:	777b      	strb	r3, [r7, #29]
			break;
 8004ab2:	e005      	b.n	8004ac0 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:
		{
			irqEn = 0x77;
 8004ab4:	2377      	movs	r3, #119	@ 0x77
 8004ab6:	77bb      	strb	r3, [r7, #30]
			waitIRQ = 0x30;
 8004ab8:	2330      	movs	r3, #48	@ 0x30
 8004aba:	777b      	strb	r3, [r7, #29]
			break;
 8004abc:	e000      	b.n	8004ac0 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8004abe:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn|0x80);
 8004ac0:	7fbb      	ldrb	r3, [r7, #30]
 8004ac2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	2002      	movs	r0, #2
 8004acc:	f7ff ff10 	bl	80048f0 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	2004      	movs	r0, #4
 8004ad4:	f7ff ff75 	bl	80049c2 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);
 8004ad8:	2180      	movs	r1, #128	@ 0x80
 8004ada:	200a      	movs	r0, #10
 8004adc:	f7ff ff56 	bl	800498c <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f7ff ff04 	bl	80048f0 <Write_MFRC522>

	for(i = 0; i < sendLen; ++i){
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e00a      	b.n	8004b04 <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	2009      	movs	r0, #9
 8004afa:	f7ff fef9 	bl	80048f0 <Write_MFRC522>
	for(i = 0; i < sendLen; ++i){
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	3301      	adds	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3f0      	bcc.n	8004aee <MFRC522_ToCard+0x6c>
	}

	Write_MFRC522(CommandReg, command);
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	2001      	movs	r0, #1
 8004b12:	f7ff feed 	bl	80048f0 <Write_MFRC522>
	if(command == PCD_TRANSCEIVE){
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d103      	bne.n	8004b24 <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80);
 8004b1c:	2180      	movs	r1, #128	@ 0x80
 8004b1e:	200d      	movs	r0, #13
 8004b20:	f7ff ff34 	bl	800498c <SetBitMask>
	}

	i = 2000;
 8004b24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004b28:	61bb      	str	r3, [r7, #24]
	do{
		n = Read_MFRC522(CommIrqReg);
 8004b2a:	2004      	movs	r0, #4
 8004b2c:	f7ff ff05 	bl	800493a <Read_MFRC522>
 8004b30:	4603      	mov	r3, r0
 8004b32:	773b      	strb	r3, [r7, #28]
		--i;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
	}
	while((i != 0) && !(n & 0x01) && !(n & waitIRQ));
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <MFRC522_ToCard+0xd4>
 8004b40:	7f3b      	ldrb	r3, [r7, #28]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d105      	bne.n	8004b56 <MFRC522_ToCard+0xd4>
 8004b4a:	7f3a      	ldrb	r2, [r7, #28]
 8004b4c:	7f7b      	ldrb	r3, [r7, #29]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0e9      	beq.n	8004b2a <MFRC522_ToCard+0xa8>

	ClearBitMask(BitFramingReg, 0x80);
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	200d      	movs	r0, #13
 8004b5a:	f7ff ff32 	bl	80049c2 <ClearBitMask>

	if(i != 0){
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d052      	beq.n	8004c0a <MFRC522_ToCard+0x188>
		if(!(Read_MFRC522(ErrorReg) & 0x1B)){
 8004b64:	2006      	movs	r0, #6
 8004b66:	f7ff fee8 	bl	800493a <Read_MFRC522>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f003 031b 	and.w	r3, r3, #27
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d148      	bne.n	8004c06 <MFRC522_ToCard+0x184>
			status = MI_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
			if(n & irqEn & 0x01){
 8004b78:	7f3a      	ldrb	r2, [r7, #28]
 8004b7a:	7fbb      	ldrb	r3, [r7, #30]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	77fb      	strb	r3, [r7, #31]
			}

			if(command == PCD_TRANSCEIVE){
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d13b      	bne.n	8004c0a <MFRC522_ToCard+0x188>
				n = Read_MFRC522(FIFOLevelReg);
 8004b92:	200a      	movs	r0, #10
 8004b94:	f7ff fed1 	bl	800493a <Read_MFRC522>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 8004b9c:	200c      	movs	r0, #12
 8004b9e:	f7ff fecc 	bl	800493a <Read_MFRC522>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	75fb      	strb	r3, [r7, #23]
				if(lastBits){
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <MFRC522_ToCard+0x140>
					*backLen = (n-1)*8 + lastBits;
 8004bb0:	7f3b      	ldrb	r3, [r7, #28]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	00da      	lsls	r2, r3, #3
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	4413      	add	r3, r2
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e004      	b.n	8004bcc <MFRC522_ToCard+0x14a>
				}
				else{
					*backLen = n*8;
 8004bc2:	7f3b      	ldrb	r3, [r7, #28]
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	601a      	str	r2, [r3, #0]
				}

				if(n == 0){
 8004bcc:	7f3b      	ldrb	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <MFRC522_ToCard+0x154>
					n = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	773b      	strb	r3, [r7, #28]
				}
				if(n > MAX_LEN){
 8004bd6:	7f3b      	ldrb	r3, [r7, #28]
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d901      	bls.n	8004be0 <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8004bdc:	2310      	movs	r3, #16
 8004bde:	773b      	strb	r3, [r7, #28]
				}

				for(i = 0; i < n; ++i){
 8004be0:	2300      	movs	r3, #0
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e00a      	b.n	8004bfc <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	18d4      	adds	r4, r2, r3
 8004bec:	2009      	movs	r0, #9
 8004bee:	f7ff fea4 	bl	800493a <Read_MFRC522>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	7023      	strb	r3, [r4, #0]
				for(i = 0; i < n; ++i){
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	7f3b      	ldrb	r3, [r7, #28]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3f0      	bcc.n	8004be6 <MFRC522_ToCard+0x164>
 8004c04:	e001      	b.n	8004c0a <MFRC522_ToCard+0x188>
				}
			}
		}
		else{
			status = MI_ERR;
 8004c06:	2302      	movs	r3, #2
 8004c08:	77fb      	strb	r3, [r7, #31]
		}
	}
	return status;
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3724      	adds	r7, #36	@ 0x24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}

08004c14 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType){
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint backBits;

	Write_MFRC522(BitFramingReg, 0x07);
 8004c20:	2107      	movs	r1, #7
 8004c22:	200d      	movs	r0, #13
 8004c24:	f7ff fe64 	bl	80048f0 <Write_MFRC522>

	TagType[0] = reqMode;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	79fa      	ldrb	r2, [r7, #7]
 8004c2c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	200c      	movs	r0, #12
 8004c3c:	f7ff ff21 	bl	8004a82 <MFRC522_ToCard>
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]

	if((status != MI_OK) || (backBits != 0x10)){
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <MFRC522_Request+0x3c>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d001      	beq.n	8004c54 <MFRC522_Request+0x40>
		status = MI_ERR;
 8004c50:	2302      	movs	r3, #2
 8004c52:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <MFRC522_Anticoll>:


uint8_t MFRC522_Anticoll(uint8_t *serNum){
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	737b      	strb	r3, [r7, #13]
	uint unLen = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]

	Write_MFRC522(BitFramingReg, 0x00);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	200d      	movs	r0, #13
 8004c72:	f7ff fe3d 	bl	80048f0 <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2293      	movs	r2, #147	@ 0x93
 8004c7a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	2220      	movs	r2, #32
 8004c82:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8004c84:	f107 0308 	add.w	r3, r7, #8
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	200c      	movs	r0, #12
 8004c92:	f7ff fef6 	bl	8004a82 <MFRC522_ToCard>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]

	if(status == MI_OK){
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d118      	bne.n	8004cd2 <MFRC522_Anticoll+0x74>
		for(i = 0; i < 4; ++i){
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73bb      	strb	r3, [r7, #14]
 8004ca4:	e009      	b.n	8004cba <MFRC522_Anticoll+0x5c>
			serNumCheck ^= serNum[i];
 8004ca6:	7bbb      	ldrb	r3, [r7, #14]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	4413      	add	r3, r2
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	7b7b      	ldrb	r3, [r7, #13]
 8004cb0:	4053      	eors	r3, r2
 8004cb2:	737b      	strb	r3, [r7, #13]
		for(i = 0; i < 4; ++i){
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	73bb      	strb	r3, [r7, #14]
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d9f2      	bls.n	8004ca6 <MFRC522_Anticoll+0x48>
		}
		if(serNumCheck != serNum[i]){
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	7b7a      	ldrb	r2, [r7, #13]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <MFRC522_Anticoll+0x74>
			status = MI_ERR;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <getSerNum>:

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}


uint8_t getSerNum(uint8_t *serNum){
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	MFRC522_Reset();
 8004ce4:	f7ff fe98 	bl	8004a18 <MFRC522_Reset>
	MFRC522_Init();
 8004ce8:	f7ff fe9e 	bl	8004a28 <MFRC522_Init>
	HAL_Delay(10);
 8004cec:	200a      	movs	r0, #10
 8004cee:	f000 fe61 	bl	80059b4 <HAL_Delay>
	MFRC522_Request(PICC_REQIDL, serNum);
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	2026      	movs	r0, #38	@ 0x26
 8004cf6:	f7ff ff8d 	bl	8004c14 <MFRC522_Request>
	return MFRC522_Anticoll(serNum);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffaf 	bl	8004c5e <MFRC522_Anticoll>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <returnTrainer>:

uint16_t returnTrainer(uint8_t *serNum){
 8004d0c:	b480      	push	{r7}
 8004d0e:	b09d      	sub	sp, #116	@ 0x74
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	uint8_t ABE[5] = {136, 4, 75, 69, 130};
 8004d14:	4ab7      	ldr	r2, [pc, #732]	@ (8004ff4 <returnTrainer+0x2e8>)
 8004d16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d1e:	6018      	str	r0, [r3, #0]
 8004d20:	3304      	adds	r3, #4
 8004d22:	7019      	strb	r1, [r3, #0]
	uint8_t abeMatch = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	uint8_t ALEC[5] = {136, 4, 67, 69, 138};
 8004d2a:	4ab3      	ldr	r2, [pc, #716]	@ (8004ff8 <returnTrainer+0x2ec>)
 8004d2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d34:	6018      	str	r0, [r3, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	7019      	strb	r1, [r3, #0]
	uint8_t alecMatch = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

	uint8_t ANNA[5] = {136, 4, 55, 69, 254};
 8004d40:	4aae      	ldr	r2, [pc, #696]	@ (8004ffc <returnTrainer+0x2f0>)
 8004d42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004d46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d4a:	6018      	str	r0, [r3, #0]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	7019      	strb	r1, [r3, #0]
	uint8_t annaMatch = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

	uint8_t AVA[5] = {136, 4, 74, 69, 131};
 8004d56:	4aaa      	ldr	r2, [pc, #680]	@ (8005000 <returnTrainer+0x2f4>)
 8004d58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d60:	6018      	str	r0, [r3, #0]
 8004d62:	3304      	adds	r3, #4
 8004d64:	7019      	strb	r1, [r3, #0]
	uint8_t avaMatch = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

	uint8_t JAMES[5] = {136, 4, 66, 69, 139};
 8004d6c:	4aa5      	ldr	r2, [pc, #660]	@ (8005004 <returnTrainer+0x2f8>)
 8004d6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d76:	6018      	str	r0, [r3, #0]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	7019      	strb	r1, [r3, #0]
	uint8_t jamesMatch = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	uint8_t JOHN[5] = {136, 4, 95, 69, 150};
 8004d82:	4aa1      	ldr	r2, [pc, #644]	@ (8005008 <returnTrainer+0x2fc>)
 8004d84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d8c:	6018      	str	r0, [r3, #0]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	7019      	strb	r1, [r3, #0]
	uint8_t johnMatch = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a

	uint8_t JOSEPH[5] = {136, 4, 94, 69, 151};
 8004d98:	4a9c      	ldr	r2, [pc, #624]	@ (800500c <returnTrainer+0x300>)
 8004d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004da2:	6018      	str	r0, [r3, #0]
 8004da4:	3304      	adds	r3, #4
 8004da6:	7019      	strb	r1, [r3, #0]
	uint8_t josephMatch = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69

	uint8_t JUNYI[5] = {136, 4, 97, 69, 168};
 8004dae:	4a98      	ldr	r2, [pc, #608]	@ (8005010 <returnTrainer+0x304>)
 8004db0:	f107 0320 	add.w	r3, r7, #32
 8004db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004db8:	6018      	str	r0, [r3, #0]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	7019      	strb	r1, [r3, #0]
	uint8_t junyiMatch = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	uint8_t KRIS[5] = {136, 4, 103, 69, 174};
 8004dc4:	4a93      	ldr	r2, [pc, #588]	@ (8005014 <returnTrainer+0x308>)
 8004dc6:	f107 0318 	add.w	r3, r7, #24
 8004dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dce:	6018      	str	r0, [r3, #0]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	7019      	strb	r1, [r3, #0]
	uint8_t krisMatch = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	uint8_t MATT[5] = {136, 4, 102, 69, 175};
 8004dda:	4a8f      	ldr	r2, [pc, #572]	@ (8005018 <returnTrainer+0x30c>)
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004de4:	6018      	str	r0, [r3, #0]
 8004de6:	3304      	adds	r3, #4
 8004de8:	7019      	strb	r1, [r3, #0]
	uint8_t mattMatch = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

	uint8_t NATALIE[5] = {136, 4, 65, 69, 136};
 8004df0:	4a8a      	ldr	r2, [pc, #552]	@ (800501c <returnTrainer+0x310>)
 8004df2:	f107 0308 	add.w	r3, r7, #8
 8004df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dfa:	6018      	str	r0, [r3, #0]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	7019      	strb	r1, [r3, #0]
	uint8_t natalieMatch = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65



	for(int i = 0; i < 5; ++i){
 8004e06:	2300      	movs	r3, #0
 8004e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e0a:	e0b2      	b.n	8004f72 <returnTrainer+0x266>
		if(serNum[i] == ABE[i]){
 8004e0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	781a      	ldrb	r2, [r3, #0]
 8004e14:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8004e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e1a:	440b      	add	r3, r1
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d104      	bne.n	8004e2c <returnTrainer+0x120>
			abeMatch++;
 8004e22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004e26:	3301      	adds	r3, #1
 8004e28:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		}
		if(serNum[i] == ALEC[i]){
 8004e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004e38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e3a:	440b      	add	r3, r1
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d104      	bne.n	8004e4c <returnTrainer+0x140>
			alecMatch++;
 8004e42:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004e46:	3301      	adds	r3, #1
 8004e48:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
		}
		if(serNum[i] == ANNA[i]){
 8004e4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8004e58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e5a:	440b      	add	r3, r1
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d104      	bne.n	8004e6c <returnTrainer+0x160>
			annaMatch++;
 8004e62:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004e66:	3301      	adds	r3, #1
 8004e68:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		}
		if(serNum[i] == AVA[i]){
 8004e6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8004e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e7a:	440b      	add	r3, r1
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d104      	bne.n	8004e8c <returnTrainer+0x180>
			avaMatch++;
 8004e82:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8004e86:	3301      	adds	r3, #1
 8004e88:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		}
		if(serNum[i] == JAMES[i]){
 8004e8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e9a:	440b      	add	r3, r1
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d104      	bne.n	8004eac <returnTrainer+0x1a0>
			jamesMatch++;
 8004ea2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		}
		if(serNum[i] == JOHN[i]){
 8004eac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781a      	ldrb	r2, [r3, #0]
 8004eb4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8004eb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eba:	440b      	add	r3, r1
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d104      	bne.n	8004ecc <returnTrainer+0x1c0>
			johnMatch++;
 8004ec2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		}
		if(serNum[i] == JOSEPH[i]){
 8004ecc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eda:	440b      	add	r3, r1
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d104      	bne.n	8004eec <returnTrainer+0x1e0>
			josephMatch++;
 8004ee2:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
		}
		if(serNum[i] == JUNYI[i]){
 8004eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	f107 0120 	add.w	r1, r7, #32
 8004ef8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004efa:	440b      	add	r3, r1
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d104      	bne.n	8004f0c <returnTrainer+0x200>
			junyiMatch++;
 8004f02:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8004f06:	3301      	adds	r3, #1
 8004f08:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
		}
		if(serNum[i] == KRIS[i]){
 8004f0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	f107 0118 	add.w	r1, r7, #24
 8004f18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f1a:	440b      	add	r3, r1
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d104      	bne.n	8004f2c <returnTrainer+0x220>
			krisMatch++;
 8004f22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f26:	3301      	adds	r3, #1
 8004f28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}
		if(serNum[i] == MATT[i]){
 8004f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	f107 0110 	add.w	r1, r7, #16
 8004f38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f3a:	440b      	add	r3, r1
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d104      	bne.n	8004f4c <returnTrainer+0x240>
			mattMatch++;
 8004f42:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004f46:	3301      	adds	r3, #1
 8004f48:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		}
		if(serNum[i] == NATALIE[i]){
 8004f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	f107 0108 	add.w	r1, r7, #8
 8004f58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f5a:	440b      	add	r3, r1
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d104      	bne.n	8004f6c <returnTrainer+0x260>
			natalieMatch++;
 8004f62:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8004f66:	3301      	adds	r3, #1
 8004f68:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for(int i = 0; i < 5; ++i){
 8004f6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f6e:	3301      	adds	r3, #1
 8004f70:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	f77f af49 	ble.w	8004e0c <returnTrainer+0x100>
		}
	}

	if(abeMatch == 5){
 8004f7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004f7e:	2b05      	cmp	r3, #5
 8004f80:	d101      	bne.n	8004f86 <returnTrainer+0x27a>
		return 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e053      	b.n	800502e <returnTrainer+0x322>
	}
	else if(alecMatch == 5){
 8004f86:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d101      	bne.n	8004f92 <returnTrainer+0x286>
		return 2;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e04d      	b.n	800502e <returnTrainer+0x322>
	}
	else if(annaMatch == 5){
 8004f92:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d101      	bne.n	8004f9e <returnTrainer+0x292>
		return 3;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e047      	b.n	800502e <returnTrainer+0x322>
	}
	else if(avaMatch == 5){
 8004f9e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d101      	bne.n	8004faa <returnTrainer+0x29e>
		return 4;
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	e041      	b.n	800502e <returnTrainer+0x322>
	}
	else if(jamesMatch == 5){
 8004faa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d101      	bne.n	8004fb6 <returnTrainer+0x2aa>
		return 5;
 8004fb2:	2305      	movs	r3, #5
 8004fb4:	e03b      	b.n	800502e <returnTrainer+0x322>
	}
	else if(johnMatch == 5){
 8004fb6:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d101      	bne.n	8004fc2 <returnTrainer+0x2b6>
		return 6;
 8004fbe:	2306      	movs	r3, #6
 8004fc0:	e035      	b.n	800502e <returnTrainer+0x322>
	}
	else if(josephMatch == 5){
 8004fc2:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	d101      	bne.n	8004fce <returnTrainer+0x2c2>
		return 7;
 8004fca:	2307      	movs	r3, #7
 8004fcc:	e02f      	b.n	800502e <returnTrainer+0x322>
	}
	else if(junyiMatch == 5){
 8004fce:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	d101      	bne.n	8004fda <returnTrainer+0x2ce>
		return 8;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	e029      	b.n	800502e <returnTrainer+0x322>
	}
	else if(krisMatch == 5){
 8004fda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d101      	bne.n	8004fe6 <returnTrainer+0x2da>
		return 9;
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	e023      	b.n	800502e <returnTrainer+0x322>
	}
	else if(mattMatch == 5){
 8004fe6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d118      	bne.n	8005020 <returnTrainer+0x314>
		return 10;
 8004fee:	230a      	movs	r3, #10
 8004ff0:	e01d      	b.n	800502e <returnTrainer+0x322>
 8004ff2:	bf00      	nop
 8004ff4:	08012a50 	.word	0x08012a50
 8004ff8:	08012a58 	.word	0x08012a58
 8004ffc:	08012a60 	.word	0x08012a60
 8005000:	08012a68 	.word	0x08012a68
 8005004:	08012a70 	.word	0x08012a70
 8005008:	08012a78 	.word	0x08012a78
 800500c:	08012a80 	.word	0x08012a80
 8005010:	08012a88 	.word	0x08012a88
 8005014:	08012a90 	.word	0x08012a90
 8005018:	08012a98 	.word	0x08012a98
 800501c:	08012aa0 	.word	0x08012aa0
	}
	else if(natalieMatch == 5){
 8005020:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8005024:	2b05      	cmp	r3, #5
 8005026:	d101      	bne.n	800502c <returnTrainer+0x320>
		return 11;
 8005028:	230b      	movs	r3, #11
 800502a:	e000      	b.n	800502e <returnTrainer+0x322>
	}
	else{
		return 0;
 800502c:	2300      	movs	r3, #0
	}
}
 800502e:	4618      	mov	r0, r3
 8005030:	3774      	adds	r7, #116	@ 0x74
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop

0800503c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005042:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <HAL_MspInit+0x44>)
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	4a0e      	ldr	r2, [pc, #56]	@ (8005080 <HAL_MspInit+0x44>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	6613      	str	r3, [r2, #96]	@ 0x60
 800504e:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <HAL_MspInit+0x44>)
 8005050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <HAL_MspInit+0x44>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <HAL_MspInit+0x44>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6593      	str	r3, [r2, #88]	@ 0x58
 8005066:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <HAL_MspInit+0x44>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000

08005084 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b0ae      	sub	sp, #184	@ 0xb8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800509c:	f107 0310 	add.w	r3, r7, #16
 80050a0:	2294      	movs	r2, #148	@ 0x94
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f00b f97f 	bl	80103a8 <memset>
  if(hi2c->Instance==I2C1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a21      	ldr	r2, [pc, #132]	@ (8005134 <HAL_I2C_MspInit+0xb0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d13b      	bne.n	800512c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80050b4:	2340      	movs	r3, #64	@ 0x40
 80050b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80050b8:	2300      	movs	r3, #0
 80050ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	4618      	mov	r0, r3
 80050c2:	f002 ff5d 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80050cc:	f7fe fbe6 	bl	800389c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d0:	4b19      	ldr	r3, [pc, #100]	@ (8005138 <HAL_I2C_MspInit+0xb4>)
 80050d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d4:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <HAL_I2C_MspInit+0xb4>)
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050dc:	4b16      	ldr	r3, [pc, #88]	@ (8005138 <HAL_I2C_MspInit+0xb4>)
 80050de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80050ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050f0:	2312      	movs	r3, #18
 80050f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fc:	2303      	movs	r3, #3
 80050fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005102:	2304      	movs	r3, #4
 8005104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005108:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800510c:	4619      	mov	r1, r3
 800510e:	480b      	ldr	r0, [pc, #44]	@ (800513c <HAL_I2C_MspInit+0xb8>)
 8005110:	f000 fd86 	bl	8005c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005114:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <HAL_I2C_MspInit+0xb4>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005118:	4a07      	ldr	r2, [pc, #28]	@ (8005138 <HAL_I2C_MspInit+0xb4>)
 800511a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800511e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_I2C_MspInit+0xb4>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800512c:	bf00      	nop
 800512e:	37b8      	adds	r7, #184	@ 0xb8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40005400 	.word	0x40005400
 8005138:	40021000 	.word	0x40021000
 800513c:	48000400 	.word	0x48000400

08005140 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b0b0      	sub	sp, #192	@ 0xc0
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005148:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005158:	f107 0318 	add.w	r3, r7, #24
 800515c:	2294      	movs	r2, #148	@ 0x94
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f00b f921 	bl	80103a8 <memset>
  if(huart->Instance==LPUART1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a44      	ldr	r2, [pc, #272]	@ (800527c <HAL_UART_MspInit+0x13c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d13e      	bne.n	80051ee <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005170:	2320      	movs	r3, #32
 8005172:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005174:	2300      	movs	r3, #0
 8005176:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	4618      	mov	r0, r3
 800517e:	f002 feff 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005188:	f7fe fb88 	bl	800389c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800518c:	4b3c      	ldr	r3, [pc, #240]	@ (8005280 <HAL_UART_MspInit+0x140>)
 800518e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005190:	4a3b      	ldr	r2, [pc, #236]	@ (8005280 <HAL_UART_MspInit+0x140>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8005198:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <HAL_UART_MspInit+0x140>)
 800519a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80051a4:	4b36      	ldr	r3, [pc, #216]	@ (8005280 <HAL_UART_MspInit+0x140>)
 80051a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a8:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <HAL_UART_MspInit+0x140>)
 80051aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051b0:	4b33      	ldr	r3, [pc, #204]	@ (8005280 <HAL_UART_MspInit+0x140>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80051bc:	f001 fff8 	bl	80071b0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80051c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80051c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d4:	2303      	movs	r3, #3
 80051d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80051da:	2308      	movs	r3, #8
 80051dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80051e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80051e4:	4619      	mov	r1, r3
 80051e6:	4827      	ldr	r0, [pc, #156]	@ (8005284 <HAL_UART_MspInit+0x144>)
 80051e8:	f000 fd1a 	bl	8005c20 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80051ec:	e042      	b.n	8005274 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a25      	ldr	r2, [pc, #148]	@ (8005288 <HAL_UART_MspInit+0x148>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d13d      	bne.n	8005274 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80051f8:	2301      	movs	r3, #1
 80051fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80051fc:	2300      	movs	r3, #0
 80051fe:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005200:	f107 0318 	add.w	r3, r7, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f002 febb 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8005210:	f7fe fb44 	bl	800389c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005214:	4b1a      	ldr	r3, [pc, #104]	@ (8005280 <HAL_UART_MspInit+0x140>)
 8005216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005218:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <HAL_UART_MspInit+0x140>)
 800521a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800521e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005220:	4b17      	ldr	r3, [pc, #92]	@ (8005280 <HAL_UART_MspInit+0x140>)
 8005222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800522c:	4b14      	ldr	r3, [pc, #80]	@ (8005280 <HAL_UART_MspInit+0x140>)
 800522e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005230:	4a13      	ldr	r2, [pc, #76]	@ (8005280 <HAL_UART_MspInit+0x140>)
 8005232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005238:	4b11      	ldr	r3, [pc, #68]	@ (8005280 <HAL_UART_MspInit+0x140>)
 800523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8005244:	f001 ffb4 	bl	80071b0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005248:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800524c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005250:	2302      	movs	r3, #2
 8005252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005256:	2300      	movs	r3, #0
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800525c:	2303      	movs	r3, #3
 800525e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005262:	2307      	movs	r3, #7
 8005264:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005268:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800526c:	4619      	mov	r1, r3
 800526e:	4805      	ldr	r0, [pc, #20]	@ (8005284 <HAL_UART_MspInit+0x144>)
 8005270:	f000 fcd6 	bl	8005c20 <HAL_GPIO_Init>
}
 8005274:	bf00      	nop
 8005276:	37c0      	adds	r7, #192	@ 0xc0
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40008000 	.word	0x40008000
 8005280:	40021000 	.word	0x40021000
 8005284:	48001800 	.word	0x48001800
 8005288:	40013800 	.word	0x40013800

0800528c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	@ 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <HAL_SPI_MspInit+0xd8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d129      	bne.n	8005302 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 80052b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 80052b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80052ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 80052bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c6:	4b28      	ldr	r3, [pc, #160]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 80052c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ca:	4a27      	ldr	r2, [pc, #156]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052d2:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80052de:	23e0      	movs	r3, #224	@ 0xe0
 80052e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ea:	2303      	movs	r3, #3
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052ee:	2305      	movs	r3, #5
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f2:	f107 031c 	add.w	r3, r7, #28
 80052f6:	4619      	mov	r1, r3
 80052f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052fc:	f000 fc90 	bl	8005c20 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005300:	e02c      	b.n	800535c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a19      	ldr	r2, [pc, #100]	@ (800536c <HAL_SPI_MspInit+0xe0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d127      	bne.n	800535c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800530c:	4b16      	ldr	r3, [pc, #88]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005310:	4a15      	ldr	r2, [pc, #84]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 8005312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005316:	6593      	str	r3, [r2, #88]	@ 0x58
 8005318:	4b13      	ldr	r3, [pc, #76]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005324:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 8005326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005328:	4a0f      	ldr	r2, [pc, #60]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005330:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <HAL_SPI_MspInit+0xdc>)
 8005332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800533c:	2338      	movs	r3, #56	@ 0x38
 800533e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005340:	2302      	movs	r3, #2
 8005342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005344:	2300      	movs	r3, #0
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005348:	2303      	movs	r3, #3
 800534a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800534c:	2306      	movs	r3, #6
 800534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005350:	f107 031c 	add.w	r3, r7, #28
 8005354:	4619      	mov	r1, r3
 8005356:	4806      	ldr	r0, [pc, #24]	@ (8005370 <HAL_SPI_MspInit+0xe4>)
 8005358:	f000 fc62 	bl	8005c20 <HAL_GPIO_Init>
}
 800535c:	bf00      	nop
 800535e:	3730      	adds	r7, #48	@ 0x30
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40013000 	.word	0x40013000
 8005368:	40021000 	.word	0x40021000
 800536c:	40003c00 	.word	0x40003c00
 8005370:	48000400 	.word	0x48000400

08005374 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	@ 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537c:	f107 0314 	add.w	r3, r7, #20
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a29      	ldr	r2, [pc, #164]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d14c      	bne.n	8005430 <HAL_TIM_Base_MspInit+0xbc>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005396:	4b29      	ldr	r3, [pc, #164]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539a:	4a28      	ldr	r2, [pc, #160]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a2:	4b26      	ldr	r3, [pc, #152]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053ae:	4b23      	ldr	r3, [pc, #140]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b2:	4a22      	ldr	r2, [pc, #136]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053b4:	f043 0308 	orr.w	r3, r3, #8
 80053b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053ba:	4b20      	ldr	r3, [pc, #128]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053c6:	4b1d      	ldr	r3, [pc, #116]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ca:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053cc:	f043 0310 	orr.w	r3, r3, #16
 80053d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053d2:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80053de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80053e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e4:	2302      	movs	r3, #2
 80053e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ec:	2300      	movs	r3, #0
 80053ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053f0:	2302      	movs	r3, #2
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	4619      	mov	r1, r3
 80053fa:	4811      	ldr	r0, [pc, #68]	@ (8005440 <HAL_TIM_Base_MspInit+0xcc>)
 80053fc:	f000 fc10 	bl	8005c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005404:	2302      	movs	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800540c:	2300      	movs	r3, #0
 800540e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005410:	2302      	movs	r3, #2
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	4619      	mov	r1, r3
 800541a:	480a      	ldr	r0, [pc, #40]	@ (8005444 <HAL_TIM_Base_MspInit+0xd0>)
 800541c:	f000 fc00 	bl	8005c20 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8005420:	2200      	movs	r2, #0
 8005422:	2101      	movs	r1, #1
 8005424:	201e      	movs	r0, #30
 8005426:	f000 fbc4 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800542a:	201e      	movs	r0, #30
 800542c:	f000 fbdd 	bl	8005bea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8005430:	bf00      	nop
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40000800 	.word	0x40000800
 800543c:	40021000 	.word	0x40021000
 8005440:	48000c00 	.word	0x48000c00
 8005444:	48001000 	.word	0x48001000

08005448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <NMI_Handler+0x4>

08005450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <HardFault_Handler+0x4>

08005458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <MemManage_Handler+0x4>

08005460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <BusFault_Handler+0x4>

08005468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <UsageFault_Handler+0x4>

08005470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800547e:	b480      	push	{r7}
 8005480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800549e:	f000 fa69 	bl	8005974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80054aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80054ae:	f000 fd61 	bl	8005f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80054b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80054b6:	f000 fd5d 	bl	8005f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80054c4:	4802      	ldr	r0, [pc, #8]	@ (80054d0 <TIM4_IRQHandler+0x10>)
 80054c6:	f004 f8d7 	bl	8009678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20040930 	.word	0x20040930

080054d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80054d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80054dc:	f000 fd4a 	bl	8005f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80054e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80054e4:	f000 fd46 	bl	8005f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80054e8:	bf00      	nop
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t hour;
extern uint16_t minute;
extern uint8_t second;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM4) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d126      	bne.n	800554c <HAL_TIM_PeriodElapsedCallback+0x60>

	    second++;
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b15      	ldr	r3, [pc, #84]	@ (800555c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005508:	701a      	strb	r2, [r3, #0]
	    if (second >= 60) {
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005510:	d91c      	bls.n	800554c <HAL_TIM_PeriodElapsedCallback+0x60>
	      second = 0;
 8005512:	4b12      	ldr	r3, [pc, #72]	@ (800555c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
	      minute++;
 8005518:	4b11      	ldr	r3, [pc, #68]	@ (8005560 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	4b0f      	ldr	r3, [pc, #60]	@ (8005560 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005522:	801a      	strh	r2, [r3, #0]
	      if (minute >= 60) {
 8005524:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	2b3b      	cmp	r3, #59	@ 0x3b
 800552a:	d90f      	bls.n	800554c <HAL_TIM_PeriodElapsedCallback+0x60>
	        minute = 0;
 800552c:	4b0c      	ldr	r3, [pc, #48]	@ (8005560 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800552e:	2200      	movs	r2, #0
 8005530:	801a      	strh	r2, [r3, #0]
	        hour++;
 8005532:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	3301      	adds	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800553c:	801a      	strh	r2, [r3, #0]
	        if (hour >= 24) {
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	2b17      	cmp	r3, #23
 8005544:	d902      	bls.n	800554c <HAL_TIM_PeriodElapsedCallback+0x60>
	          hour = 0;
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005548:	2200      	movs	r2, #0
 800554a:	801a      	strh	r2, [r3, #0]
	        }
	      }
	    }
	  }
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40000800 	.word	0x40000800
 800555c:	20040b29 	.word	0x20040b29
 8005560:	20040036 	.word	0x20040036
 8005564:	20040034 	.word	0x20040034

08005568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return 1;
 800556c:	2301      	movs	r3, #1
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <_kill>:

int _kill(int pid, int sig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005582:	f00a ff73 	bl	801046c <__errno>
 8005586:	4603      	mov	r3, r0
 8005588:	2216      	movs	r2, #22
 800558a:	601a      	str	r2, [r3, #0]
  return -1;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <_exit>:

void _exit (int status)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055a0:	f04f 31ff 	mov.w	r1, #4294967295
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ffe7 	bl	8005578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <_exit+0x12>

080055ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e00a      	b.n	80055d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055c0:	f3af 8000 	nop.w
 80055c4:	4601      	mov	r1, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	60ba      	str	r2, [r7, #8]
 80055cc:	b2ca      	uxtb	r2, r1
 80055ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	dbf0      	blt.n	80055c0 <_read+0x12>
  }

  return len;
 80055de:	687b      	ldr	r3, [r7, #4]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e009      	b.n	800560e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	60ba      	str	r2, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe f938 	bl	8003878 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	3301      	adds	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	dbf1      	blt.n	80055fa <_write+0x12>
  }
  return len;
 8005616:	687b      	ldr	r3, [r7, #4]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_close>:

int _close(int file)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005648:	605a      	str	r2, [r3, #4]
  return 0;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <_isatty>:

int _isatty(int file)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005660:	2301      	movs	r3, #1
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <_sbrk+0x5c>)
 8005692:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <_sbrk+0x60>)
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800569c:	4b13      	ldr	r3, [pc, #76]	@ (80056ec <_sbrk+0x64>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056a4:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <_sbrk+0x64>)
 80056a6:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <_sbrk+0x68>)
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056aa:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <_sbrk+0x64>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d207      	bcs.n	80056c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056b8:	f00a fed8 	bl	801046c <__errno>
 80056bc:	4603      	mov	r3, r0
 80056be:	220c      	movs	r2, #12
 80056c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e009      	b.n	80056dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056c8:	4b08      	ldr	r3, [pc, #32]	@ (80056ec <_sbrk+0x64>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ce:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <_sbrk+0x64>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a05      	ldr	r2, [pc, #20]	@ (80056ec <_sbrk+0x64>)
 80056d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	200a0000 	.word	0x200a0000
 80056e8:	00000400 	.word	0x00000400
 80056ec:	20040b5c 	.word	0x20040b5c
 80056f0:	20040cf0 	.word	0x20040cf0

080056f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80056f8:	4b06      	ldr	r3, [pc, #24]	@ (8005714 <SystemInit+0x20>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fe:	4a05      	ldr	r2, [pc, #20]	@ (8005714 <SystemInit+0x20>)
 8005700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <convert_data>:
#include "temp_humid.h"
// Convert raw temperature and humidity values into physical quantities
void convert_data(uint16_t raw_temp, uint16_t raw_humidity, float *temperature, float *humidity) {
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60ba      	str	r2, [r7, #8]
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	4603      	mov	r3, r0
 8005724:	81fb      	strh	r3, [r7, #14]
 8005726:	460b      	mov	r3, r1
 8005728:	81bb      	strh	r3, [r7, #12]
    // Temperature conversion (in °C)
    *temperature = -49 + 315 * (float)raw_temp / ((1 << 16) - 1);
 800572a:	89fb      	ldrh	r3, [r7, #14]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005734:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005780 <convert_data+0x68>
 8005738:	ee27 7a87 	vmul.f32	s14, s15, s14
 800573c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8005784 <convert_data+0x6c>
 8005740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005744:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005788 <convert_data+0x70>
 8005748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	edc3 7a00 	vstr	s15, [r3]

    // Humidity conversion (% RH)
    *humidity = 100 * (float)raw_humidity / ((1 << 16) - 1);
 8005752:	89bb      	ldrh	r3, [r7, #12]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800578c <convert_data+0x74>
 8005760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005764:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005784 <convert_data+0x6c>
 8005768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	edc3 7a00 	vstr	s15, [r3]
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	439d8000 	.word	0x439d8000
 8005784:	477fff00 	.word	0x477fff00
 8005788:	42440000 	.word	0x42440000
 800578c:	42c80000 	.word	0x42c80000

08005790 <read_sensor_data>:

// Function to read sensor data (temperature and humidity) in Single Shot Mode
HAL_StatusTypeDef read_sensor_data(I2C_HandleTypeDef *hi2c, uint16_t command, uint16_t *temperature, uint16_t *humidity) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	@ 0x28
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	460b      	mov	r3, r1
 800579e:	817b      	strh	r3, [r7, #10]

	HAL_StatusTypeDef ret;
	uint8_t data[6];  // Buffer to store 6 data bytes (temperature, humidity, CRC)

    // Send the measurement command (16-bit)
    uint8_t command_data[2] = {command >> 8, command & 0xFF};
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	753b      	strb	r3, [r7, #20]
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	757b      	strb	r3, [r7, #21]
    ret = HAL_I2C_Master_Transmit(hi2c, SENSOR_I2C_ADDRESS << 1, command_data, 2, HAL_MAX_DELAY);
 80057b0:	f107 0214 	add.w	r2, r7, #20
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2302      	movs	r3, #2
 80057bc:	2188      	movs	r1, #136	@ 0x88
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fc8c 	bl	80060dc <HAL_I2C_Master_Transmit>
 80057c4:	4603      	mov	r3, r0
 80057c6:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK){
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d127      	bne.n	800581e <read_sensor_data+0x8e>
    	//printf( "ERROR Tx \r\n" );
    }

    else{
        // Wait for the measurement to complete
        HAL_Delay(100);  // Adjust delay based on measurement time for your command
 80057ce:	2064      	movs	r0, #100	@ 0x64
 80057d0:	f000 f8f0 	bl	80059b4 <HAL_Delay>
        // Start read transfer and get all 6 bytes
           ret = HAL_I2C_Master_Receive(hi2c, SENSOR_I2C_ADDRESS << 1, data, 6, HAL_MAX_DELAY);
 80057d4:	f107 0218 	add.w	r2, r7, #24
 80057d8:	f04f 33ff 	mov.w	r3, #4294967295
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2306      	movs	r3, #6
 80057e0:	2188      	movs	r1, #136	@ 0x88
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fd92 	bl	800630c <HAL_I2C_Master_Receive>
 80057e8:	4603      	mov	r3, r0
 80057ea:	77fb      	strb	r3, [r7, #31]

           if (ret != HAL_OK){
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d115      	bne.n	800581e <read_sensor_data+0x8e>
        	   //printf("ERROR Rx \r\n");
           }

           else{
        	   // Extract temperature and humidity while skipping CRC bytes
			   *temperature = (data[0] << 8) | data[1];  // First 2 bytes are temperature
 80057f2:	7e3b      	ldrb	r3, [r7, #24]
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	b21a      	sxth	r2, r3
 80057fa:	7e7b      	ldrb	r3, [r7, #25]
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b21b      	sxth	r3, r3
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	801a      	strh	r2, [r3, #0]
			   *humidity = (data[3] << 8) | data[4];     // Skip 1 CRC byte, use next 2 bytes for humidity
 8005808:	7efb      	ldrb	r3, [r7, #27]
 800580a:	b21b      	sxth	r3, r3
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	b21a      	sxth	r2, r3
 8005810:	7f3b      	ldrb	r3, [r7, #28]
 8005812:	b21b      	sxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b21b      	sxth	r3, r3
 8005818:	b29a      	uxth	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	801a      	strh	r2, [r3, #0]
    }

    // Ignore CRC, no need to process it, just discard the next 2 bytes (CRC for temp and humidity)
    // No need to read additional CRC bytes if you don't need them

    return ret;  // Successful read without processing CRC
 800581e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <temp_humid>:

//runs the temphumidity sensor and returns 1 if succeeds
uint8_t temp_humid(float *buffer, I2C_HandleTypeDef *hi2c1){
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	uint16_t temperature_raw, humidity_raw;
	float temperature, humidity;


	if (read_sensor_data(hi2c1, 0x2400, &temperature_raw, &humidity_raw) == HAL_OK) {
 8005832:	f107 0314 	add.w	r3, r7, #20
 8005836:	f107 0216 	add.w	r2, r7, #22
 800583a:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800583e:	6838      	ldr	r0, [r7, #0]
 8005840:	f7ff ffa6 	bl	8005790 <read_sensor_data>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d110      	bne.n	800586c <temp_humid+0x44>
	  // Convert the raw values into physical units
	  convert_data(temperature_raw, humidity_raw, &temperature, &humidity);
 800584a:	8af8      	ldrh	r0, [r7, #22]
 800584c:	8ab9      	ldrh	r1, [r7, #20]
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	f107 0210 	add.w	r2, r7, #16
 8005856:	f7ff ff5f 	bl	8005718 <convert_data>

	  buffer[0] = temperature;
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	601a      	str	r2, [r3, #0]
	  buffer[1] = humidity;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

	  // Print out the results (or send them to a display)
//	  printf("Temperature: %.2f°F \r\n", temperature);
//	  printf("Humidity: %.2f%% RH \r\n", humidity);
	  return 1;
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <temp_humid+0x46>
	} else {
	  // Handle read error
		return 0;
 800586c:	2300      	movs	r3, #0
	}


}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800587c:	f7ff ff3a 	bl	80056f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005880:	480c      	ldr	r0, [pc, #48]	@ (80058b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005882:	490d      	ldr	r1, [pc, #52]	@ (80058b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005884:	4a0d      	ldr	r2, [pc, #52]	@ (80058bc <LoopForever+0xe>)
  movs r3, #0
 8005886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005888:	e002      	b.n	8005890 <LoopCopyDataInit>

0800588a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800588a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800588c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800588e:	3304      	adds	r3, #4

08005890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005894:	d3f9      	bcc.n	800588a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005896:	4a0a      	ldr	r2, [pc, #40]	@ (80058c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005898:	4c0a      	ldr	r4, [pc, #40]	@ (80058c4 <LoopForever+0x16>)
  movs r3, #0
 800589a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800589c:	e001      	b.n	80058a2 <LoopFillZerobss>

0800589e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800589e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058a0:	3204      	adds	r2, #4

080058a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058a4:	d3fb      	bcc.n	800589e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058a6:	f00a fde7 	bl	8010478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058aa:	f7fc ff99 	bl	80027e0 <main>

080058ae <LoopForever>:

LoopForever:
    b LoopForever
 80058ae:	e7fe      	b.n	80058ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80058b0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80058b4:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80058b8:	200404c8 	.word	0x200404c8
  ldr r2, =_sidata
 80058bc:	0801eeac 	.word	0x0801eeac
  ldr r2, =_sbss
 80058c0:	200404c8 	.word	0x200404c8
  ldr r4, =_ebss
 80058c4:	20040cf0 	.word	0x20040cf0

080058c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058c8:	e7fe      	b.n	80058c8 <ADC1_IRQHandler>

080058ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058d4:	2003      	movs	r0, #3
 80058d6:	f000 f961 	bl	8005b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058da:	2000      	movs	r0, #0
 80058dc:	f000 f80e 	bl	80058fc <HAL_InitTick>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	71fb      	strb	r3, [r7, #7]
 80058ea:	e001      	b.n	80058f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058ec:	f7ff fba6 	bl	800503c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058f0:	79fb      	ldrb	r3, [r7, #7]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005908:	4b17      	ldr	r3, [pc, #92]	@ (8005968 <HAL_InitTick+0x6c>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d023      	beq.n	8005958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005910:	4b16      	ldr	r3, [pc, #88]	@ (800596c <HAL_InitTick+0x70>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <HAL_InitTick+0x6c>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800591e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f96d 	bl	8005c06 <HAL_SYSTICK_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d809      	bhi.n	800594c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005938:	2200      	movs	r2, #0
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	f000 f937 	bl	8005bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005944:	4a0a      	ldr	r2, [pc, #40]	@ (8005970 <HAL_InitTick+0x74>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e007      	b.n	800595c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e004      	b.n	800595c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
 8005956:	e001      	b.n	800595c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20040040 	.word	0x20040040
 800596c:	20040038 	.word	0x20040038
 8005970:	2004003c 	.word	0x2004003c

08005974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005978:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <HAL_IncTick+0x20>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <HAL_IncTick+0x24>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4413      	add	r3, r2
 8005984:	4a04      	ldr	r2, [pc, #16]	@ (8005998 <HAL_IncTick+0x24>)
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20040040 	.word	0x20040040
 8005998:	20040b60 	.word	0x20040b60

0800599c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  return uwTick;
 80059a0:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <HAL_GetTick+0x14>)
 80059a2:	681b      	ldr	r3, [r3, #0]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20040b60 	.word	0x20040b60

080059b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059bc:	f7ff ffee 	bl	800599c <HAL_GetTick>
 80059c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d005      	beq.n	80059da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80059ce:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <HAL_Delay+0x44>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059da:	bf00      	nop
 80059dc:	f7ff ffde 	bl	800599c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d8f7      	bhi.n	80059dc <HAL_Delay+0x28>
  {
  }
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20040040 	.word	0x20040040

080059fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <__NVIC_SetPriorityGrouping+0x44>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a2e:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <__NVIC_SetPriorityGrouping+0x44>)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	60d3      	str	r3, [r2, #12]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	e000ed00 	.word	0xe000ed00

08005a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a48:	4b04      	ldr	r3, [pc, #16]	@ (8005a5c <__NVIC_GetPriorityGrouping+0x18>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	f003 0307 	and.w	r3, r3, #7
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	e000ed00 	.word	0xe000ed00

08005a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	db0b      	blt.n	8005a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	f003 021f 	and.w	r2, r3, #31
 8005a78:	4907      	ldr	r1, [pc, #28]	@ (8005a98 <__NVIC_EnableIRQ+0x38>)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	2001      	movs	r0, #1
 8005a82:	fa00 f202 	lsl.w	r2, r0, r2
 8005a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000e100 	.word	0xe000e100

08005a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	db0a      	blt.n	8005ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	490c      	ldr	r1, [pc, #48]	@ (8005ae8 <__NVIC_SetPriority+0x4c>)
 8005ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aba:	0112      	lsls	r2, r2, #4
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	440b      	add	r3, r1
 8005ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ac4:	e00a      	b.n	8005adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4908      	ldr	r1, [pc, #32]	@ (8005aec <__NVIC_SetPriority+0x50>)
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	3b04      	subs	r3, #4
 8005ad4:	0112      	lsls	r2, r2, #4
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	440b      	add	r3, r1
 8005ada:	761a      	strb	r2, [r3, #24]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	e000e100 	.word	0xe000e100
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	@ 0x24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f1c3 0307 	rsb	r3, r3, #7
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	bf28      	it	cs
 8005b0e:	2304      	movcs	r3, #4
 8005b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d902      	bls.n	8005b20 <NVIC_EncodePriority+0x30>
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3b03      	subs	r3, #3
 8005b1e:	e000      	b.n	8005b22 <NVIC_EncodePriority+0x32>
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	401a      	ands	r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b38:	f04f 31ff 	mov.w	r1, #4294967295
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	43d9      	mvns	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b48:	4313      	orrs	r3, r2
         );
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3724      	adds	r7, #36	@ 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b68:	d301      	bcc.n	8005b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e00f      	b.n	8005b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b98 <SysTick_Config+0x40>)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b76:	210f      	movs	r1, #15
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	f7ff ff8e 	bl	8005a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <SysTick_Config+0x40>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b86:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <SysTick_Config+0x40>)
 8005b88:	2207      	movs	r2, #7
 8005b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000e010 	.word	0xe000e010

08005b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff29 	bl	80059fc <__NVIC_SetPriorityGrouping>
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bc4:	f7ff ff3e 	bl	8005a44 <__NVIC_GetPriorityGrouping>
 8005bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	6978      	ldr	r0, [r7, #20]
 8005bd0:	f7ff ff8e 	bl	8005af0 <NVIC_EncodePriority>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff ff5d 	bl	8005a9c <__NVIC_SetPriority>
}
 8005be2:	bf00      	nop
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff ff31 	bl	8005a60 <__NVIC_EnableIRQ>
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff ffa2 	bl	8005b58 <SysTick_Config>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2e:	e166      	b.n	8005efe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	2101      	movs	r1, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8158 	beq.w	8005ef8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d005      	beq.n	8005c60 <HAL_GPIO_Init+0x40>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d130      	bne.n	8005cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c96:	2201      	movs	r2, #1
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0201 	and.w	r2, r3, #1
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d017      	beq.n	8005cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	2203      	movs	r2, #3
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d123      	bne.n	8005d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	08da      	lsrs	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3208      	adds	r2, #8
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	220f      	movs	r2, #15
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	08da      	lsrs	r2, r3, #3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3208      	adds	r2, #8
 8005d4c:	6939      	ldr	r1, [r7, #16]
 8005d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4013      	ands	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 0203 	and.w	r2, r3, #3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80b2 	beq.w	8005ef8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d94:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <HAL_GPIO_Init+0x2fc>)
 8005d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d98:	4a60      	ldr	r2, [pc, #384]	@ (8005f1c <HAL_GPIO_Init+0x2fc>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005da0:	4b5e      	ldr	r3, [pc, #376]	@ (8005f1c <HAL_GPIO_Init+0x2fc>)
 8005da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005dac:	4a5c      	ldr	r2, [pc, #368]	@ (8005f20 <HAL_GPIO_Init+0x300>)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	3302      	adds	r3, #2
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	220f      	movs	r2, #15
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005dd6:	d02b      	beq.n	8005e30 <HAL_GPIO_Init+0x210>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a52      	ldr	r2, [pc, #328]	@ (8005f24 <HAL_GPIO_Init+0x304>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d025      	beq.n	8005e2c <HAL_GPIO_Init+0x20c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a51      	ldr	r2, [pc, #324]	@ (8005f28 <HAL_GPIO_Init+0x308>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01f      	beq.n	8005e28 <HAL_GPIO_Init+0x208>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a50      	ldr	r2, [pc, #320]	@ (8005f2c <HAL_GPIO_Init+0x30c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d019      	beq.n	8005e24 <HAL_GPIO_Init+0x204>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a4f      	ldr	r2, [pc, #316]	@ (8005f30 <HAL_GPIO_Init+0x310>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <HAL_GPIO_Init+0x200>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8005f34 <HAL_GPIO_Init+0x314>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00d      	beq.n	8005e1c <HAL_GPIO_Init+0x1fc>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a4d      	ldr	r2, [pc, #308]	@ (8005f38 <HAL_GPIO_Init+0x318>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <HAL_GPIO_Init+0x1f8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f3c <HAL_GPIO_Init+0x31c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d101      	bne.n	8005e14 <HAL_GPIO_Init+0x1f4>
 8005e10:	2307      	movs	r3, #7
 8005e12:	e00e      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e14:	2308      	movs	r3, #8
 8005e16:	e00c      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e18:	2306      	movs	r3, #6
 8005e1a:	e00a      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e1c:	2305      	movs	r3, #5
 8005e1e:	e008      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e20:	2304      	movs	r3, #4
 8005e22:	e006      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e24:	2303      	movs	r3, #3
 8005e26:	e004      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e002      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_GPIO_Init+0x212>
 8005e30:	2300      	movs	r3, #0
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	f002 0203 	and.w	r2, r2, #3
 8005e38:	0092      	lsls	r2, r2, #2
 8005e3a:	4093      	lsls	r3, r2
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e42:	4937      	ldr	r1, [pc, #220]	@ (8005f20 <HAL_GPIO_Init+0x300>)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	3302      	adds	r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e50:	4b3b      	ldr	r3, [pc, #236]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e74:	4a32      	ldr	r2, [pc, #200]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e7a:	4b31      	ldr	r3, [pc, #196]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e9e:	4a28      	ldr	r2, [pc, #160]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ea4:	4b26      	ldr	r3, [pc, #152]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005ece:	4b1c      	ldr	r3, [pc, #112]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ef2:	4a13      	ldr	r2, [pc, #76]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3301      	adds	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f ae91 	bne.w	8005c30 <HAL_GPIO_Init+0x10>
  }
}
 8005f0e:	bf00      	nop
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40010000 	.word	0x40010000
 8005f24:	48000400 	.word	0x48000400
 8005f28:	48000800 	.word	0x48000800
 8005f2c:	48000c00 	.word	0x48000c00
 8005f30:	48001000 	.word	0x48001000
 8005f34:	48001400 	.word	0x48001400
 8005f38:	48001800 	.word	0x48001800
 8005f3c:	48001c00 	.word	0x48001c00
 8005f40:	40010400 	.word	0x40010400

08005f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
 8005f50:	4613      	mov	r3, r2
 8005f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f54:	787b      	ldrb	r3, [r7, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f5a:	887a      	ldrh	r2, [r7, #2]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f60:	e002      	b.n	8005f68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f62:	887a      	ldrh	r2, [r7, #2]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f7e:	4b08      	ldr	r3, [pc, #32]	@ (8005fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f80:	695a      	ldr	r2, [r3, #20]
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f8a:	4a05      	ldr	r2, [pc, #20]	@ (8005fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f90:	88fb      	ldrh	r3, [r7, #6]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe f8fe 	bl	8004194 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40010400 	.word	0x40010400

08005fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e08d      	b.n	80060d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff f85a 	bl	8005084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	@ 0x24
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d107      	bne.n	800601e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	e006      	b.n	800602c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800602a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d108      	bne.n	8006046 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e007      	b.n	8006056 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	461a      	mov	r2, r3
 80060e8:	460b      	mov	r3, r1
 80060ea:	817b      	strh	r3, [r7, #10]
 80060ec:	4613      	mov	r3, r2
 80060ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	f040 80fd 	bne.w	80062f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_I2C_Master_Transmit+0x30>
 8006108:	2302      	movs	r3, #2
 800610a:	e0f6      	b.n	80062fa <HAL_I2C_Master_Transmit+0x21e>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006114:	f7ff fc42 	bl	800599c <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2319      	movs	r3, #25
 8006120:	2201      	movs	r2, #1
 8006122:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fc64 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e0e1      	b.n	80062fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2221      	movs	r2, #33	@ 0x21
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2210      	movs	r2, #16
 8006142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	893a      	ldrh	r2, [r7, #8]
 8006156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	2bff      	cmp	r3, #255	@ 0xff
 8006166:	d906      	bls.n	8006176 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	22ff      	movs	r2, #255	@ 0xff
 800616c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800616e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e007      	b.n	8006186 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006184:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d024      	beq.n	80061d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	3301      	adds	r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	8979      	ldrh	r1, [r7, #10]
 80061ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006304 <HAL_I2C_Master_Transmit+0x228>)
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fe5f 	bl	8006e94 <I2C_TransferConfig>
 80061d6:	e066      	b.n	80062a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	8979      	ldrh	r1, [r7, #10]
 80061e0:	4b48      	ldr	r3, [pc, #288]	@ (8006304 <HAL_I2C_Master_Transmit+0x228>)
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fe54 	bl	8006e94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061ec:	e05b      	b.n	80062a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	6a39      	ldr	r1, [r7, #32]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fc57 	bl	8006aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e07b      	b.n	80062fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	781a      	ldrb	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d034      	beq.n	80062a6 <HAL_I2C_Master_Transmit+0x1ca>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d130      	bne.n	80062a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2200      	movs	r2, #0
 800624c:	2180      	movs	r1, #128	@ 0x80
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fbd0 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e04d      	b.n	80062fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	2bff      	cmp	r3, #255	@ 0xff
 8006266:	d90e      	bls.n	8006286 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	22ff      	movs	r2, #255	@ 0xff
 800626c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006272:	b2da      	uxtb	r2, r3
 8006274:	8979      	ldrh	r1, [r7, #10]
 8006276:	2300      	movs	r3, #0
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fe08 	bl	8006e94 <I2C_TransferConfig>
 8006284:	e00f      	b.n	80062a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006294:	b2da      	uxtb	r2, r3
 8006296:	8979      	ldrh	r1, [r7, #10]
 8006298:	2300      	movs	r3, #0
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fdf7 	bl	8006e94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d19e      	bne.n	80061ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	6a39      	ldr	r1, [r7, #32]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fc3d 	bl	8006b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e01a      	b.n	80062fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2220      	movs	r2, #32
 80062ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <HAL_I2C_Master_Transmit+0x22c>)
 80062d8:	400b      	ands	r3, r1
 80062da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e000      	b.n	80062fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	80002000 	.word	0x80002000
 8006308:	fe00e800 	.word	0xfe00e800

0800630c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	461a      	mov	r2, r3
 8006318:	460b      	mov	r3, r1
 800631a:	817b      	strh	r3, [r7, #10]
 800631c:	4613      	mov	r3, r2
 800631e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b20      	cmp	r3, #32
 800632a:	f040 80db 	bne.w	80064e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_I2C_Master_Receive+0x30>
 8006338:	2302      	movs	r3, #2
 800633a:	e0d4      	b.n	80064e6 <HAL_I2C_Master_Receive+0x1da>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006344:	f7ff fb2a 	bl	800599c <HAL_GetTick>
 8006348:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2319      	movs	r3, #25
 8006350:	2201      	movs	r2, #1
 8006352:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fb4c 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e0bf      	b.n	80064e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2222      	movs	r2, #34	@ 0x22
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2210      	movs	r2, #16
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	893a      	ldrh	r2, [r7, #8]
 8006386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006392:	b29b      	uxth	r3, r3
 8006394:	2bff      	cmp	r3, #255	@ 0xff
 8006396:	d90e      	bls.n	80063b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	8979      	ldrh	r1, [r7, #10]
 80063a6:	4b52      	ldr	r3, [pc, #328]	@ (80064f0 <HAL_I2C_Master_Receive+0x1e4>)
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fd70 	bl	8006e94 <I2C_TransferConfig>
 80063b4:	e06d      	b.n	8006492 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	8979      	ldrh	r1, [r7, #10]
 80063c8:	4b49      	ldr	r3, [pc, #292]	@ (80064f0 <HAL_I2C_Master_Receive+0x1e4>)
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fd5f 	bl	8006e94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063d6:	e05c      	b.n	8006492 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	6a39      	ldr	r1, [r7, #32]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fbed 	bl	8006bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e07c      	b.n	80064e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d034      	beq.n	8006492 <HAL_I2C_Master_Receive+0x186>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	d130      	bne.n	8006492 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2200      	movs	r2, #0
 8006438:	2180      	movs	r1, #128	@ 0x80
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fada 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e04d      	b.n	80064e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	2bff      	cmp	r3, #255	@ 0xff
 8006452:	d90e      	bls.n	8006472 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	22ff      	movs	r2, #255	@ 0xff
 8006458:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645e:	b2da      	uxtb	r2, r3
 8006460:	8979      	ldrh	r1, [r7, #10]
 8006462:	2300      	movs	r3, #0
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fd12 	bl	8006e94 <I2C_TransferConfig>
 8006470:	e00f      	b.n	8006492 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006480:	b2da      	uxtb	r2, r3
 8006482:	8979      	ldrh	r1, [r7, #10]
 8006484:	2300      	movs	r3, #0
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fd01 	bl	8006e94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d19d      	bne.n	80063d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	6a39      	ldr	r1, [r7, #32]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fb47 	bl	8006b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e01a      	b.n	80064e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2220      	movs	r2, #32
 80064b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <HAL_I2C_Master_Receive+0x1e8>)
 80064c4:	400b      	ands	r3, r1
 80064c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	80002400 	.word	0x80002400
 80064f4:	fe00e800 	.word	0xfe00e800

080064f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	461a      	mov	r2, r3
 8006506:	4603      	mov	r3, r0
 8006508:	817b      	strh	r3, [r7, #10]
 800650a:	460b      	mov	r3, r1
 800650c:	813b      	strh	r3, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	f040 80fd 	bne.w	800671a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_I2C_Mem_Read+0x34>
 8006526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006532:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0f1      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_I2C_Mem_Read+0x4e>
 8006542:	2302      	movs	r3, #2
 8006544:	e0ea      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800654e:	f7ff fa25 	bl	800599c <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2319      	movs	r3, #25
 800655a:	2201      	movs	r2, #1
 800655c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fa47 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0d5      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2222      	movs	r2, #34	@ 0x22
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2240      	movs	r2, #64	@ 0x40
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a3a      	ldr	r2, [r7, #32]
 800658a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006598:	88f8      	ldrh	r0, [r7, #6]
 800659a:	893a      	ldrh	r2, [r7, #8]
 800659c:	8979      	ldrh	r1, [r7, #10]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	4603      	mov	r3, r0
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f9ab 	bl	8006904 <I2C_RequestMemoryRead>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0ad      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2bff      	cmp	r3, #255	@ 0xff
 80065c8:	d90e      	bls.n	80065e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	8979      	ldrh	r1, [r7, #10]
 80065d8:	4b52      	ldr	r3, [pc, #328]	@ (8006724 <HAL_I2C_Mem_Read+0x22c>)
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fc57 	bl	8006e94 <I2C_TransferConfig>
 80065e6:	e00f      	b.n	8006608 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	8979      	ldrh	r1, [r7, #10]
 80065fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006724 <HAL_I2C_Mem_Read+0x22c>)
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fc46 	bl	8006e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	2200      	movs	r2, #0
 8006610:	2104      	movs	r1, #4
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f9ee 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e07c      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d034      	beq.n	80066c8 <HAL_I2C_Mem_Read+0x1d0>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d130      	bne.n	80066c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	@ 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f9bf 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e04d      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2bff      	cmp	r3, #255	@ 0xff
 8006688:	d90e      	bls.n	80066a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006694:	b2da      	uxtb	r2, r3
 8006696:	8979      	ldrh	r1, [r7, #10]
 8006698:	2300      	movs	r3, #0
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fbf7 	bl	8006e94 <I2C_TransferConfig>
 80066a6:	e00f      	b.n	80066c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	8979      	ldrh	r1, [r7, #10]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fbe6 	bl	8006e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d19a      	bne.n	8006608 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fa2c 	bl	8006b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e01a      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2220      	movs	r2, #32
 80066ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006728 <HAL_I2C_Mem_Read+0x230>)
 80066fa:	400b      	ands	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	80002400 	.word	0x80002400
 8006728:	fe00e800 	.word	0xfe00e800

0800672c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	@ 0x28
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	460b      	mov	r3, r1
 800673a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b20      	cmp	r3, #32
 800674a:	f040 80d6 	bne.w	80068fa <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675c:	d101      	bne.n	8006762 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800675e:	2302      	movs	r3, #2
 8006760:	e0cc      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_I2C_IsDeviceReady+0x44>
 800676c:	2302      	movs	r3, #2
 800676e:	e0c5      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2224      	movs	r2, #36	@ 0x24
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_I2C_IsDeviceReady+0x72>
 800678e:	897b      	ldrh	r3, [r7, #10]
 8006790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006794:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800679c:	e006      	b.n	80067ac <HAL_I2C_IsDeviceReady+0x80>
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067a8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80067b2:	f7ff f8f3 	bl	800599c <HAL_GetTick>
 80067b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b10      	cmp	r3, #16
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80067e4:	e034      	b.n	8006850 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d01a      	beq.n	8006824 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7ff f8d5 	bl	800599c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <HAL_I2C_IsDeviceReady+0xd8>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006810:	f043 0220 	orr.w	r2, r3, #32
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e06b      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b20      	cmp	r3, #32
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b10      	cmp	r3, #16
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006850:	7ffb      	ldrb	r3, [r7, #31]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <HAL_I2C_IsDeviceReady+0x130>
 8006856:	7fbb      	ldrb	r3, [r7, #30]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0c4      	beq.n	80067e6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b10      	cmp	r3, #16
 8006868:	d01a      	beq.n	80068a0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2200      	movs	r2, #0
 8006872:	2120      	movs	r1, #32
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f8bd 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e03b      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2220      	movs	r2, #32
 800688a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	e02d      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	2120      	movs	r1, #32
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f8a2 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e020      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2210      	movs	r2, #16
 80068c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2220      	movs	r2, #32
 80068c8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3301      	adds	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	f63f af56 	bhi.w	8006786 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e6:	f043 0220 	orr.w	r2, r3, #32
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	461a      	mov	r2, r3
 8006912:	4603      	mov	r3, r0
 8006914:	817b      	strh	r3, [r7, #10]
 8006916:	460b      	mov	r3, r1
 8006918:	813b      	strh	r3, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	8979      	ldrh	r1, [r7, #10]
 8006924:	4b20      	ldr	r3, [pc, #128]	@ (80069a8 <I2C_RequestMemoryRead+0xa4>)
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fab2 	bl	8006e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	69b9      	ldr	r1, [r7, #24]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f8b6 	bl	8006aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e02c      	b.n	800699e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d105      	bne.n	8006956 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800694a:	893b      	ldrh	r3, [r7, #8]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	629a      	str	r2, [r3, #40]	@ 0x28
 8006954:	e015      	b.n	8006982 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006956:	893b      	ldrh	r3, [r7, #8]
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	b29b      	uxth	r3, r3
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	69b9      	ldr	r1, [r7, #24]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f89c 	bl	8006aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e012      	b.n	800699e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006978:	893b      	ldrh	r3, [r7, #8]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2200      	movs	r2, #0
 800698a:	2140      	movs	r1, #64	@ 0x40
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f831 	bl	80069f4 <I2C_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	80002000 	.word	0x80002000

080069ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d103      	bne.n	80069ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2200      	movs	r2, #0
 80069c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d007      	beq.n	80069e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	619a      	str	r2, [r3, #24]
  }
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a04:	e03b      	b.n	8006a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f962 	bl	8006cd4 <I2C_IsErrorOccurred>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e041      	b.n	8006a9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d02d      	beq.n	8006a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a22:	f7fe ffbb 	bl	800599c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d122      	bne.n	8006a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4013      	ands	r3, r2
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d113      	bne.n	8006a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e00f      	b.n	8006a9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d0b4      	beq.n	8006a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ab2:	e033      	b.n	8006b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f90b 	bl	8006cd4 <I2C_IsErrorOccurred>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e031      	b.n	8006b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d025      	beq.n	8006b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad0:	f7fe ff64 	bl	800599c <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d302      	bcc.n	8006ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d11a      	bne.n	8006b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d013      	beq.n	8006b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af8:	f043 0220 	orr.w	r2, r3, #32
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e007      	b.n	8006b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d1c4      	bne.n	8006ab4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b40:	e02f      	b.n	8006ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f8c4 	bl	8006cd4 <I2C_IsErrorOccurred>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e02d      	b.n	8006bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fe ff21 	bl	800599c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d11a      	bne.n	8006ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d013      	beq.n	8006ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7e:	f043 0220 	orr.w	r2, r3, #32
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e007      	b.n	8006bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	d1c8      	bne.n	8006b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006bcc:	e071      	b.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f87e 	bl	8006cd4 <I2C_IsErrorOccurred>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d13b      	bne.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d138      	bne.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d105      	bne.n	8006c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d121      	bne.n	8006c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2210      	movs	r2, #16
 8006c24:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2220      	movs	r2, #32
 8006c32:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6859      	ldr	r1, [r3, #4]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b24      	ldr	r3, [pc, #144]	@ (8006cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006c40:	400b      	ands	r3, r1
 8006c42:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
 8006c60:	e002      	b.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006c68:	f7fe fe98 	bl	800599c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d302      	bcc.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d119      	bne.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d116      	bne.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d00f      	beq.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d002      	beq.n	8006cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d083      	beq.n	8006bce <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	fe00e800 	.word	0xfe00e800

08006cd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	@ 0x28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d068      	beq.n	8006dd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2210      	movs	r2, #16
 8006d06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d08:	e049      	b.n	8006d9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d045      	beq.n	8006d9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d12:	f7fe fe43 	bl	800599c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <I2C_IsErrorOccurred+0x54>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d13a      	bne.n	8006d9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4a:	d121      	bne.n	8006d90 <I2C_IsErrorOccurred+0xbc>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d52:	d01d      	beq.n	8006d90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d01a      	beq.n	8006d90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d6a:	f7fe fe17 	bl	800599c <HAL_GetTick>
 8006d6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d70:	e00e      	b.n	8006d90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d72:	f7fe fe13 	bl	800599c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b19      	cmp	r3, #25
 8006d7e:	d907      	bls.n	8006d90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	f043 0320 	orr.w	r3, r3, #32
 8006d86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006d8e:	e006      	b.n	8006d9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d1e9      	bne.n	8006d72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d003      	beq.n	8006db4 <I2C_IsErrorOccurred+0xe0>
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0aa      	beq.n	8006d0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	f043 0304 	orr.w	r3, r3, #4
 8006dca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f043 0308 	orr.w	r3, r3, #8
 8006e0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	f043 0302 	orr.w	r3, r3, #2
 8006e2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01c      	beq.n	8006e82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fdaf 	bl	80069ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6859      	ldr	r1, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <I2C_IsErrorOccurred+0x1bc>)
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3728      	adds	r7, #40	@ 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	fe00e800 	.word	0xfe00e800

08006e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	817b      	strh	r3, [r7, #10]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ea6:	897b      	ldrh	r3, [r7, #10]
 8006ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eac:	7a7b      	ldrb	r3, [r7, #9]
 8006eae:	041b      	lsls	r3, r3, #16
 8006eb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ec2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	0d5b      	lsrs	r3, r3, #21
 8006ece:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006ed2:	4b08      	ldr	r3, [pc, #32]	@ (8006ef4 <I2C_TransferConfig+0x60>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	ea02 0103 	and.w	r1, r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	03ff63ff 	.word	0x03ff63ff

08006ef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d138      	bne.n	8006f80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e032      	b.n	8006f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	@ 0x24
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d139      	bne.n	8007018 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e033      	b.n	800701a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2224      	movs	r2, #36	@ 0x24
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006fe0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800702c:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <HAL_PWREx_GetVoltageRange+0x3c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007038:	d102      	bne.n	8007040 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800703a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800703e:	e00b      	b.n	8007058 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007040:	4b08      	ldr	r3, [pc, #32]	@ (8007064 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800704e:	d102      	bne.n	8007056 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007054:	e000      	b.n	8007058 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007056:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007058:	4618      	mov	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40007000 	.word	0x40007000

08007068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d141      	bne.n	80070fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007076:	4b4b      	ldr	r3, [pc, #300]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007082:	d131      	bne.n	80070e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007084:	4b47      	ldr	r3, [pc, #284]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708a:	4a46      	ldr	r2, [pc, #280]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007094:	4b43      	ldr	r3, [pc, #268]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800709c:	4a41      	ldr	r2, [pc, #260]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800709e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80070a4:	4b40      	ldr	r3, [pc, #256]	@ (80071a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2232      	movs	r2, #50	@ 0x32
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	4a3f      	ldr	r2, [pc, #252]	@ (80071ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	0c9b      	lsrs	r3, r3, #18
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ba:	e002      	b.n	80070c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3b01      	subs	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070c2:	4b38      	ldr	r3, [pc, #224]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ce:	d102      	bne.n	80070d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f2      	bne.n	80070bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070d6:	4b33      	ldr	r3, [pc, #204]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e2:	d158      	bne.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e057      	b.n	8007198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070e8:	4b2e      	ldr	r3, [pc, #184]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ee:	4a2d      	ldr	r2, [pc, #180]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80070f8:	e04d      	b.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007100:	d141      	bne.n	8007186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007102:	4b28      	ldr	r3, [pc, #160]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800710e:	d131      	bne.n	8007174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007110:	4b24      	ldr	r3, [pc, #144]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007116:	4a23      	ldr	r2, [pc, #140]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007120:	4b20      	ldr	r3, [pc, #128]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007128:	4a1e      	ldr	r2, [pc, #120]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800712a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800712e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007130:	4b1d      	ldr	r3, [pc, #116]	@ (80071a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2232      	movs	r2, #50	@ 0x32
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	0c9b      	lsrs	r3, r3, #18
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007146:	e002      	b.n	800714e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800714e:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800715a:	d102      	bne.n	8007162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f2      	bne.n	8007148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007162:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716e:	d112      	bne.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e011      	b.n	8007198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007174:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800717a:	4a0a      	ldr	r2, [pc, #40]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007184:	e007      	b.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007186:	4b07      	ldr	r3, [pc, #28]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800718e:	4a05      	ldr	r2, [pc, #20]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007194:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40007000 	.word	0x40007000
 80071a8:	20040038 	.word	0x20040038
 80071ac:	431bde83 	.word	0x431bde83

080071b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a04      	ldr	r2, [pc, #16]	@ (80071cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80071ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071be:	6053      	str	r3, [r2, #4]
}
 80071c0:	bf00      	nop
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40007000 	.word	0x40007000

080071d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f000 bc08 	b.w	80079f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e4:	4b96      	ldr	r3, [pc, #600]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 030c 	and.w	r3, r3, #12
 80071ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071ee:	4b94      	ldr	r3, [pc, #592]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80e4 	beq.w	80073ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <HAL_RCC_OscConfig+0x4c>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b0c      	cmp	r3, #12
 8007210:	f040 808b 	bne.w	800732a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b01      	cmp	r3, #1
 8007218:	f040 8087 	bne.w	800732a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800721c:	4b88      	ldr	r3, [pc, #544]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_RCC_OscConfig+0x64>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e3df      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	4b81      	ldr	r3, [pc, #516]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_RCC_OscConfig+0x7e>
 8007244:	4b7e      	ldr	r3, [pc, #504]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800724c:	e005      	b.n	800725a <HAL_RCC_OscConfig+0x8a>
 800724e:	4b7c      	ldr	r3, [pc, #496]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800725a:	4293      	cmp	r3, r2
 800725c:	d223      	bcs.n	80072a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fdcc 	bl	8007e00 <RCC_SetFlashLatencyFromMSIRange>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e3c0      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007272:	4b73      	ldr	r3, [pc, #460]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a72      	ldr	r2, [pc, #456]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007278:	f043 0308 	orr.w	r3, r3, #8
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	4b70      	ldr	r3, [pc, #448]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	496d      	ldr	r1, [pc, #436]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800728c:	4313      	orrs	r3, r2
 800728e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007290:	4b6b      	ldr	r3, [pc, #428]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	4968      	ldr	r1, [pc, #416]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	604b      	str	r3, [r1, #4]
 80072a4:	e025      	b.n	80072f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072a6:	4b66      	ldr	r3, [pc, #408]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a65      	ldr	r2, [pc, #404]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072ac:	f043 0308 	orr.w	r3, r3, #8
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	4b63      	ldr	r3, [pc, #396]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	4960      	ldr	r1, [pc, #384]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072c4:	4b5e      	ldr	r3, [pc, #376]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	495b      	ldr	r1, [pc, #364]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fd8c 	bl	8007e00 <RCC_SetFlashLatencyFromMSIRange>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e380      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072f2:	f000 fcc1 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4b51      	ldr	r3, [pc, #324]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	091b      	lsrs	r3, r3, #4
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	4950      	ldr	r1, [pc, #320]	@ (8007444 <HAL_RCC_OscConfig+0x274>)
 8007304:	5ccb      	ldrb	r3, [r1, r3]
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	fa22 f303 	lsr.w	r3, r2, r3
 800730e:	4a4e      	ldr	r2, [pc, #312]	@ (8007448 <HAL_RCC_OscConfig+0x278>)
 8007310:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007312:	4b4e      	ldr	r3, [pc, #312]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe faf0 	bl	80058fc <HAL_InitTick>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d052      	beq.n	80073cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	e364      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d032      	beq.n	8007398 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007332:	4b43      	ldr	r3, [pc, #268]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800733e:	f7fe fb2d 	bl	800599c <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007346:	f7fe fb29 	bl	800599c <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e34d      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007358:	4b39      	ldr	r3, [pc, #228]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007364:	4b36      	ldr	r3, [pc, #216]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a35      	ldr	r2, [pc, #212]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800736a:	f043 0308 	orr.w	r3, r3, #8
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	4b33      	ldr	r3, [pc, #204]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	4930      	ldr	r1, [pc, #192]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800737e:	4313      	orrs	r3, r2
 8007380:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007382:	4b2f      	ldr	r3, [pc, #188]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	492b      	ldr	r1, [pc, #172]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007392:	4313      	orrs	r3, r2
 8007394:	604b      	str	r3, [r1, #4]
 8007396:	e01a      	b.n	80073ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007398:	4b29      	ldr	r3, [pc, #164]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a28      	ldr	r2, [pc, #160]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800739e:	f023 0301 	bic.w	r3, r3, #1
 80073a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073a4:	f7fe fafa 	bl	800599c <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073ac:	f7fe faf6 	bl	800599c <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e31a      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073be:	4b20      	ldr	r3, [pc, #128]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCC_OscConfig+0x1dc>
 80073ca:	e000      	b.n	80073ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d073      	beq.n	80074c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d005      	beq.n	80073ec <HAL_RCC_OscConfig+0x21c>
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2b0c      	cmp	r3, #12
 80073e4:	d10e      	bne.n	8007404 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d10b      	bne.n	8007404 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ec:	4b14      	ldr	r3, [pc, #80]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d063      	beq.n	80074c0 <HAL_RCC_OscConfig+0x2f0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d15f      	bne.n	80074c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e2f7      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800740c:	d106      	bne.n	800741c <HAL_RCC_OscConfig+0x24c>
 800740e:	4b0c      	ldr	r3, [pc, #48]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a0b      	ldr	r2, [pc, #44]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	e025      	b.n	8007468 <HAL_RCC_OscConfig+0x298>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007424:	d114      	bne.n	8007450 <HAL_RCC_OscConfig+0x280>
 8007426:	4b06      	ldr	r3, [pc, #24]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a05      	ldr	r2, [pc, #20]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 800742c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a02      	ldr	r2, [pc, #8]	@ (8007440 <HAL_RCC_OscConfig+0x270>)
 8007438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e013      	b.n	8007468 <HAL_RCC_OscConfig+0x298>
 8007440:	40021000 	.word	0x40021000
 8007444:	0801eab4 	.word	0x0801eab4
 8007448:	20040038 	.word	0x20040038
 800744c:	2004003c 	.word	0x2004003c
 8007450:	4ba0      	ldr	r3, [pc, #640]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a9f      	ldr	r2, [pc, #636]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	4b9d      	ldr	r3, [pc, #628]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a9c      	ldr	r2, [pc, #624]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d013      	beq.n	8007498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fe fa94 	bl	800599c <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007478:	f7fe fa90 	bl	800599c <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b64      	cmp	r3, #100	@ 0x64
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e2b4      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800748a:	4b92      	ldr	r3, [pc, #584]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f0      	beq.n	8007478 <HAL_RCC_OscConfig+0x2a8>
 8007496:	e014      	b.n	80074c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fe fa80 	bl	800599c <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a0:	f7fe fa7c 	bl	800599c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	@ 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e2a0      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074b2:	4b88      	ldr	r3, [pc, #544]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <HAL_RCC_OscConfig+0x2d0>
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d060      	beq.n	8007590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d005      	beq.n	80074e0 <HAL_RCC_OscConfig+0x310>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b0c      	cmp	r3, #12
 80074d8:	d119      	bne.n	800750e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d116      	bne.n	800750e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074e0:	4b7c      	ldr	r3, [pc, #496]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_OscConfig+0x328>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e27d      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f8:	4b76      	ldr	r3, [pc, #472]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	061b      	lsls	r3, r3, #24
 8007506:	4973      	ldr	r1, [pc, #460]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007508:	4313      	orrs	r3, r2
 800750a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800750c:	e040      	b.n	8007590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d023      	beq.n	800755e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007516:	4b6f      	ldr	r3, [pc, #444]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a6e      	ldr	r2, [pc, #440]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800751c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007522:	f7fe fa3b 	bl	800599c <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800752a:	f7fe fa37 	bl	800599c <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e25b      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800753c:	4b65      	ldr	r3, [pc, #404]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007548:	4b62      	ldr	r3, [pc, #392]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	061b      	lsls	r3, r3, #24
 8007556:	495f      	ldr	r1, [pc, #380]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007558:	4313      	orrs	r3, r2
 800755a:	604b      	str	r3, [r1, #4]
 800755c:	e018      	b.n	8007590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800755e:	4b5d      	ldr	r3, [pc, #372]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a5c      	ldr	r2, [pc, #368]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756a:	f7fe fa17 	bl	800599c <HAL_GetTick>
 800756e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007570:	e008      	b.n	8007584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007572:	f7fe fa13 	bl	800599c <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e237      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007584:	4b53      	ldr	r3, [pc, #332]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f0      	bne.n	8007572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d03c      	beq.n	8007616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01c      	beq.n	80075de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075a4:	4b4b      	ldr	r3, [pc, #300]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80075a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075aa:	4a4a      	ldr	r2, [pc, #296]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80075ac:	f043 0301 	orr.w	r3, r3, #1
 80075b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b4:	f7fe f9f2 	bl	800599c <HAL_GetTick>
 80075b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075bc:	f7fe f9ee 	bl	800599c <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e212      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075ce:	4b41      	ldr	r3, [pc, #260]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80075d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0ef      	beq.n	80075bc <HAL_RCC_OscConfig+0x3ec>
 80075dc:	e01b      	b.n	8007616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075de:	4b3d      	ldr	r3, [pc, #244]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80075e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e4:	4a3b      	ldr	r2, [pc, #236]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ee:	f7fe f9d5 	bl	800599c <HAL_GetTick>
 80075f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075f6:	f7fe f9d1 	bl	800599c <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e1f5      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007608:	4b32      	ldr	r3, [pc, #200]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800760a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ef      	bne.n	80075f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80a6 	beq.w	8007770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007624:	2300      	movs	r3, #0
 8007626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007628:	4b2a      	ldr	r3, [pc, #168]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800762a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800762c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10d      	bne.n	8007650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007634:	4b27      	ldr	r3, [pc, #156]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007638:	4a26      	ldr	r2, [pc, #152]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800763a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800763e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007640:	4b24      	ldr	r3, [pc, #144]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007648:	60bb      	str	r3, [r7, #8]
 800764a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800764c:	2301      	movs	r3, #1
 800764e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007650:	4b21      	ldr	r3, [pc, #132]	@ (80076d8 <HAL_RCC_OscConfig+0x508>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d118      	bne.n	800768e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800765c:	4b1e      	ldr	r3, [pc, #120]	@ (80076d8 <HAL_RCC_OscConfig+0x508>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1d      	ldr	r2, [pc, #116]	@ (80076d8 <HAL_RCC_OscConfig+0x508>)
 8007662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007668:	f7fe f998 	bl	800599c <HAL_GetTick>
 800766c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800766e:	e008      	b.n	8007682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007670:	f7fe f994 	bl	800599c <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e1b8      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007682:	4b15      	ldr	r3, [pc, #84]	@ (80076d8 <HAL_RCC_OscConfig+0x508>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0f0      	beq.n	8007670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d108      	bne.n	80076a8 <HAL_RCC_OscConfig+0x4d8>
 8007696:	4b0f      	ldr	r3, [pc, #60]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769c:	4a0d      	ldr	r2, [pc, #52]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076a6:	e029      	b.n	80076fc <HAL_RCC_OscConfig+0x52c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2b05      	cmp	r3, #5
 80076ae:	d115      	bne.n	80076dc <HAL_RCC_OscConfig+0x50c>
 80076b0:	4b08      	ldr	r3, [pc, #32]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b6:	4a07      	ldr	r2, [pc, #28]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80076b8:	f043 0304 	orr.w	r3, r3, #4
 80076bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076c0:	4b04      	ldr	r3, [pc, #16]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c6:	4a03      	ldr	r2, [pc, #12]	@ (80076d4 <HAL_RCC_OscConfig+0x504>)
 80076c8:	f043 0301 	orr.w	r3, r3, #1
 80076cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076d0:	e014      	b.n	80076fc <HAL_RCC_OscConfig+0x52c>
 80076d2:	bf00      	nop
 80076d4:	40021000 	.word	0x40021000
 80076d8:	40007000 	.word	0x40007000
 80076dc:	4b9d      	ldr	r3, [pc, #628]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e2:	4a9c      	ldr	r2, [pc, #624]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80076ec:	4b99      	ldr	r3, [pc, #612]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f2:	4a98      	ldr	r2, [pc, #608]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80076f4:	f023 0304 	bic.w	r3, r3, #4
 80076f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d016      	beq.n	8007732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007704:	f7fe f94a 	bl	800599c <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800770a:	e00a      	b.n	8007722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800770c:	f7fe f946 	bl	800599c <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e168      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007722:	4b8c      	ldr	r3, [pc, #560]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0ed      	beq.n	800770c <HAL_RCC_OscConfig+0x53c>
 8007730:	e015      	b.n	800775e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007732:	f7fe f933 	bl	800599c <HAL_GetTick>
 8007736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007738:	e00a      	b.n	8007750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800773a:	f7fe f92f 	bl	800599c <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007748:	4293      	cmp	r3, r2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e151      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007750:	4b80      	ldr	r3, [pc, #512]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1ed      	bne.n	800773a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800775e:	7ffb      	ldrb	r3, [r7, #31]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d105      	bne.n	8007770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007764:	4b7b      	ldr	r3, [pc, #492]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007768:	4a7a      	ldr	r2, [pc, #488]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800776a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800776e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d03c      	beq.n	80077f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01c      	beq.n	80077be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007784:	4b73      	ldr	r3, [pc, #460]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800778a:	4a72      	ldr	r2, [pc, #456]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fe f902 	bl	800599c <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800779c:	f7fe f8fe 	bl	800599c <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e122      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077ae:	4b69      	ldr	r3, [pc, #420]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80077b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0ef      	beq.n	800779c <HAL_RCC_OscConfig+0x5cc>
 80077bc:	e01b      	b.n	80077f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077be:	4b65      	ldr	r3, [pc, #404]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80077c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077c4:	4a63      	ldr	r2, [pc, #396]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ce:	f7fe f8e5 	bl	800599c <HAL_GetTick>
 80077d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077d6:	f7fe f8e1 	bl	800599c <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e105      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80077ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1ef      	bne.n	80077d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80f9 	beq.w	80079f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	2b02      	cmp	r3, #2
 8007806:	f040 80cf 	bne.w	80079a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800780a:	4b52      	ldr	r3, [pc, #328]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f003 0203 	and.w	r2, r3, #3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	429a      	cmp	r2, r3
 800781c:	d12c      	bne.n	8007878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007828:	3b01      	subs	r3, #1
 800782a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800782c:	429a      	cmp	r2, r3
 800782e:	d123      	bne.n	8007878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800783c:	429a      	cmp	r2, r3
 800783e:	d11b      	bne.n	8007878 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800784c:	429a      	cmp	r2, r3
 800784e:	d113      	bne.n	8007878 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	3b01      	subs	r3, #1
 800785e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007860:	429a      	cmp	r2, r3
 8007862:	d109      	bne.n	8007878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	3b01      	subs	r3, #1
 8007872:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007874:	429a      	cmp	r2, r3
 8007876:	d071      	beq.n	800795c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b0c      	cmp	r3, #12
 800787c:	d068      	beq.n	8007950 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800787e:	4b35      	ldr	r3, [pc, #212]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800788a:	4b32      	ldr	r3, [pc, #200]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e0ac      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800789a:	4b2e      	ldr	r3, [pc, #184]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a2d      	ldr	r2, [pc, #180]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80078a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078a6:	f7fe f879 	bl	800599c <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ae:	f7fe f875 	bl	800599c <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e099      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078c0:	4b24      	ldr	r3, [pc, #144]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1f0      	bne.n	80078ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078cc:	4b21      	ldr	r3, [pc, #132]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	4b21      	ldr	r3, [pc, #132]	@ (8007958 <HAL_RCC_OscConfig+0x788>)
 80078d2:	4013      	ands	r3, r2
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80078dc:	3a01      	subs	r2, #1
 80078de:	0112      	lsls	r2, r2, #4
 80078e0:	4311      	orrs	r1, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80078e6:	0212      	lsls	r2, r2, #8
 80078e8:	4311      	orrs	r1, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80078ee:	0852      	lsrs	r2, r2, #1
 80078f0:	3a01      	subs	r2, #1
 80078f2:	0552      	lsls	r2, r2, #21
 80078f4:	4311      	orrs	r1, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80078fa:	0852      	lsrs	r2, r2, #1
 80078fc:	3a01      	subs	r2, #1
 80078fe:	0652      	lsls	r2, r2, #25
 8007900:	4311      	orrs	r1, r2
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007906:	06d2      	lsls	r2, r2, #27
 8007908:	430a      	orrs	r2, r1
 800790a:	4912      	ldr	r1, [pc, #72]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800790c:	4313      	orrs	r3, r2
 800790e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007910:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0f      	ldr	r2, [pc, #60]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800791a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800791c:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4a0c      	ldr	r2, [pc, #48]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007926:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007928:	f7fe f838 	bl	800599c <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007930:	f7fe f834 	bl	800599c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e058      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007942:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <HAL_RCC_OscConfig+0x784>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800794e:	e050      	b.n	80079f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e04f      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
 8007954:	40021000 	.word	0x40021000
 8007958:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800795c:	4b27      	ldr	r3, [pc, #156]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d144      	bne.n	80079f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007968:	4b24      	ldr	r3, [pc, #144]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a23      	ldr	r2, [pc, #140]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 800796e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007974:	4b21      	ldr	r3, [pc, #132]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	4a20      	ldr	r2, [pc, #128]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 800797a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800797e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007980:	f7fe f80c 	bl	800599c <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007988:	f7fe f808 	bl	800599c <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e02c      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800799a:	4b18      	ldr	r3, [pc, #96]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0f0      	beq.n	8007988 <HAL_RCC_OscConfig+0x7b8>
 80079a6:	e024      	b.n	80079f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b0c      	cmp	r3, #12
 80079ac:	d01f      	beq.n	80079ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ae:	4b13      	ldr	r3, [pc, #76]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a12      	ldr	r2, [pc, #72]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 80079b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ba:	f7fd ffef 	bl	800599c <HAL_GetTick>
 80079be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079c0:	e008      	b.n	80079d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c2:	f7fd ffeb 	bl	800599c <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d901      	bls.n	80079d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e00f      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d4:	4b09      	ldr	r3, [pc, #36]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f0      	bne.n	80079c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80079e0:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	4905      	ldr	r1, [pc, #20]	@ (80079fc <HAL_RCC_OscConfig+0x82c>)
 80079e6:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <HAL_RCC_OscConfig+0x830>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	60cb      	str	r3, [r1, #12]
 80079ec:	e001      	b.n	80079f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e000      	b.n	80079f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40021000 	.word	0x40021000
 8007a00:	feeefffc 	.word	0xfeeefffc

08007a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e11d      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a1c:	4b90      	ldr	r3, [pc, #576]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d910      	bls.n	8007a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f023 020f 	bic.w	r2, r3, #15
 8007a32:	498b      	ldr	r1, [pc, #556]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a3a:	4b89      	ldr	r3, [pc, #548]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d001      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e105      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	4b81      	ldr	r3, [pc, #516]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d908      	bls.n	8007a7a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a68:	4b7e      	ldr	r3, [pc, #504]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	497b      	ldr	r1, [pc, #492]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d079      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d11e      	bne.n	8007acc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a8e:	4b75      	ldr	r3, [pc, #468]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e0dc      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007a9e:	f000 fa09 	bl	8007eb4 <RCC_GetSysClockFreqFromPLLSource>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4a70      	ldr	r2, [pc, #448]	@ (8007c68 <HAL_RCC_ClockConfig+0x264>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d946      	bls.n	8007b38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d140      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007abe:	4a69      	ldr	r2, [pc, #420]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007ac6:	2380      	movs	r3, #128	@ 0x80
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	e035      	b.n	8007b38 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d107      	bne.n	8007ae4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ad4:	4b63      	ldr	r3, [pc, #396]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d115      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e0b9      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007aec:	4b5d      	ldr	r3, [pc, #372]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0ad      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007afc:	4b59      	ldr	r3, [pc, #356]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0a5      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007b0c:	f000 f8b4 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4a55      	ldr	r2, [pc, #340]	@ (8007c68 <HAL_RCC_ClockConfig+0x264>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d90f      	bls.n	8007b38 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007b18:	4b52      	ldr	r3, [pc, #328]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b24:	4b4f      	ldr	r3, [pc, #316]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b32:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b34:	2380      	movs	r3, #128	@ 0x80
 8007b36:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b38:	4b4a      	ldr	r3, [pc, #296]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f023 0203 	bic.w	r2, r3, #3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	4947      	ldr	r1, [pc, #284]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4a:	f7fd ff27 	bl	800599c <HAL_GetTick>
 8007b4e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b50:	e00a      	b.n	8007b68 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b52:	f7fd ff23 	bl	800599c <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e077      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b68:	4b3e      	ldr	r3, [pc, #248]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 020c 	and.w	r2, r3, #12
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d1eb      	bne.n	8007b52 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b80      	cmp	r3, #128	@ 0x80
 8007b7e:	d105      	bne.n	8007b8c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b80:	4b38      	ldr	r3, [pc, #224]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	4a37      	ldr	r2, [pc, #220]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b8a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d010      	beq.n	8007bba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	4b31      	ldr	r3, [pc, #196]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d208      	bcs.n	8007bba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	492b      	ldr	r1, [pc, #172]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bba:	4b29      	ldr	r3, [pc, #164]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d210      	bcs.n	8007bea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc8:	4b25      	ldr	r3, [pc, #148]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f023 020f 	bic.w	r2, r3, #15
 8007bd0:	4923      	ldr	r1, [pc, #140]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd8:	4b21      	ldr	r3, [pc, #132]	@ (8007c60 <HAL_RCC_ClockConfig+0x25c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d001      	beq.n	8007bea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e036      	b.n	8007c58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	4918      	ldr	r1, [pc, #96]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c14:	4b13      	ldr	r3, [pc, #76]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	4910      	ldr	r1, [pc, #64]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c28:	f000 f826 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <HAL_RCC_ClockConfig+0x260>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	490c      	ldr	r1, [pc, #48]	@ (8007c6c <HAL_RCC_ClockConfig+0x268>)
 8007c3a:	5ccb      	ldrb	r3, [r1, r3]
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
 8007c44:	4a0a      	ldr	r2, [pc, #40]	@ (8007c70 <HAL_RCC_ClockConfig+0x26c>)
 8007c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c48:	4b0a      	ldr	r3, [pc, #40]	@ (8007c74 <HAL_RCC_ClockConfig+0x270>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fe55 	bl	80058fc <HAL_InitTick>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]

  return status;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	40022000 	.word	0x40022000
 8007c64:	40021000 	.word	0x40021000
 8007c68:	04c4b400 	.word	0x04c4b400
 8007c6c:	0801eab4 	.word	0x0801eab4
 8007c70:	20040038 	.word	0x20040038
 8007c74:	2004003c 	.word	0x2004003c

08007c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b089      	sub	sp, #36	@ 0x24
 8007c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c86:	4b3e      	ldr	r3, [pc, #248]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 030c 	and.w	r3, r3, #12
 8007c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_RCC_GetSysClockFreq+0x34>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b0c      	cmp	r3, #12
 8007ca4:	d121      	bne.n	8007cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d11e      	bne.n	8007cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007cac:	4b34      	ldr	r3, [pc, #208]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cb8:	4b31      	ldr	r3, [pc, #196]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	e005      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10d      	bne.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ce8:	e00a      	b.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d102      	bne.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cf0:	4b25      	ldr	r3, [pc, #148]	@ (8007d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e004      	b.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d101      	bne.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cfc:	4b23      	ldr	r3, [pc, #140]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8007cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b0c      	cmp	r3, #12
 8007d04:	d134      	bne.n	8007d70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d06:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d003      	beq.n	8007d1e <HAL_RCC_GetSysClockFreq+0xa6>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d003      	beq.n	8007d24 <HAL_RCC_GetSysClockFreq+0xac>
 8007d1c:	e005      	b.n	8007d2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8007d20:	617b      	str	r3, [r7, #20]
      break;
 8007d22:	e005      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007d24:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8007d26:	617b      	str	r3, [r7, #20]
      break;
 8007d28:	e002      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	617b      	str	r3, [r7, #20]
      break;
 8007d2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d30:	4b13      	ldr	r3, [pc, #76]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d3e:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	fb03 f202 	mul.w	r2, r3, r2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	0e5b      	lsrs	r3, r3, #25
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	3301      	adds	r3, #1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d70:	69bb      	ldr	r3, [r7, #24]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3724      	adds	r7, #36	@ 0x24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40021000 	.word	0x40021000
 8007d84:	0801eacc 	.word	0x0801eacc
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	007a1200 	.word	0x007a1200

08007d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d94:	4b03      	ldr	r3, [pc, #12]	@ (8007da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20040038 	.word	0x20040038

08007da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007dac:	f7ff fff0 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b06      	ldr	r3, [pc, #24]	@ (8007dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0a1b      	lsrs	r3, r3, #8
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4904      	ldr	r1, [pc, #16]	@ (8007dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dbe:	5ccb      	ldrb	r3, [r1, r3]
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	0801eac4 	.word	0x0801eac4

08007dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007dd8:	f7ff ffda 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	0adb      	lsrs	r3, r3, #11
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	4904      	ldr	r1, [pc, #16]	@ (8007dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007dea:	5ccb      	ldrb	r3, [r1, r3]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	0801eac4 	.word	0x0801eac4

08007e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e0c:	4b27      	ldr	r3, [pc, #156]	@ (8007eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e18:	f7ff f906 	bl	8007028 <HAL_PWREx_GetVoltageRange>
 8007e1c:	6178      	str	r0, [r7, #20]
 8007e1e:	e014      	b.n	8007e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e20:	4b22      	ldr	r3, [pc, #136]	@ (8007eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e24:	4a21      	ldr	r2, [pc, #132]	@ (8007eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e38:	f7ff f8f6 	bl	8007028 <HAL_PWREx_GetVoltageRange>
 8007e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	4a1a      	ldr	r2, [pc, #104]	@ (8007eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e50:	d10b      	bne.n	8007e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b80      	cmp	r3, #128	@ 0x80
 8007e56:	d913      	bls.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e5c:	d902      	bls.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e5e:	2302      	movs	r3, #2
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e00d      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e64:	2301      	movs	r3, #1
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	e00a      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e6e:	d902      	bls.n	8007e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007e70:	2302      	movs	r3, #2
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	e004      	b.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b70      	cmp	r3, #112	@ 0x70
 8007e7a:	d101      	bne.n	8007e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f023 020f 	bic.w	r2, r3, #15
 8007e88:	4909      	ldr	r1, [pc, #36]	@ (8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e90:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d001      	beq.n	8007ea2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	40022000 	.word	0x40022000

08007eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007eba:	4b2d      	ldr	r3, [pc, #180]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d00b      	beq.n	8007ee2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d825      	bhi.n	8007f1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d008      	beq.n	8007ee8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d11f      	bne.n	8007f1c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007edc:	4b25      	ldr	r3, [pc, #148]	@ (8007f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007ede:	613b      	str	r3, [r7, #16]
    break;
 8007ee0:	e01f      	b.n	8007f22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007ee2:	4b25      	ldr	r3, [pc, #148]	@ (8007f78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007ee4:	613b      	str	r3, [r7, #16]
    break;
 8007ee6:	e01c      	b.n	8007f22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ee8:	4b21      	ldr	r3, [pc, #132]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d107      	bne.n	8007f04 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e005      	b.n	8007f10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f04:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	091b      	lsrs	r3, r3, #4
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007f10:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f18:	613b      	str	r3, [r7, #16]
    break;
 8007f1a:	e002      	b.n	8007f22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]
    break;
 8007f20:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f22:	4b13      	ldr	r3, [pc, #76]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	091b      	lsrs	r3, r3, #4
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f30:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	0a1b      	lsrs	r3, r3, #8
 8007f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	fb03 f202 	mul.w	r2, r3, r2
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f48:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	0e5b      	lsrs	r3, r3, #25
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	3301      	adds	r3, #1
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007f62:	683b      	ldr	r3, [r7, #0]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	40021000 	.word	0x40021000
 8007f74:	00f42400 	.word	0x00f42400
 8007f78:	007a1200 	.word	0x007a1200
 8007f7c:	0801eacc 	.word	0x0801eacc

08007f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d040      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa0:	2b80      	cmp	r3, #128	@ 0x80
 8007fa2:	d02a      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d825      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007fa8:	2b60      	cmp	r3, #96	@ 0x60
 8007faa:	d026      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fac:	2b60      	cmp	r3, #96	@ 0x60
 8007fae:	d821      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007fb0:	2b40      	cmp	r3, #64	@ 0x40
 8007fb2:	d006      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007fb4:	2b40      	cmp	r3, #64	@ 0x40
 8007fb6:	d81d      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d009      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007fc0:	e018      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007fc2:	4b89      	ldr	r3, [pc, #548]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	4a88      	ldr	r2, [pc, #544]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fcc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fce:	e015      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fb02 	bl	80085e0 <RCCEx_PLLSAI1_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fe0:	e00c      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3320      	adds	r3, #32
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fbed 	bl	80087c8 <RCCEx_PLLSAI2_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	74fb      	strb	r3, [r7, #19]
      break;
 8007ff8:	e000      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ffc:	7cfb      	ldrb	r3, [r7, #19]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008002:	4b79      	ldr	r3, [pc, #484]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008008:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008010:	4975      	ldr	r1, [pc, #468]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008018:	e001      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d047      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008032:	d030      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008038:	d82a      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800803a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800803e:	d02a      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008044:	d824      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804a:	d008      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800804c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008050:	d81e      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800805a:	d010      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800805c:	e018      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800805e:	4b62      	ldr	r3, [pc, #392]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	4a61      	ldr	r2, [pc, #388]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008068:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800806a:	e015      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3304      	adds	r3, #4
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fab4 	bl	80085e0 <RCCEx_PLLSAI1_Config>
 8008078:	4603      	mov	r3, r0
 800807a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800807c:	e00c      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3320      	adds	r3, #32
 8008082:	2100      	movs	r1, #0
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fb9f 	bl	80087c8 <RCCEx_PLLSAI2_Config>
 800808a:	4603      	mov	r3, r0
 800808c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800808e:	e003      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	74fb      	strb	r3, [r7, #19]
      break;
 8008094:	e000      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008098:	7cfb      	ldrb	r3, [r7, #19]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800809e:	4b52      	ldr	r3, [pc, #328]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ac:	494e      	ldr	r1, [pc, #312]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80080b4:	e001      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b6:	7cfb      	ldrb	r3, [r7, #19]
 80080b8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 809f 	beq.w	8008206 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c8:	2300      	movs	r3, #0
 80080ca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080cc:	4b46      	ldr	r3, [pc, #280]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80080dc:	2300      	movs	r3, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00d      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080e2:	4b41      	ldr	r3, [pc, #260]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e6:	4a40      	ldr	r2, [pc, #256]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ee:	4b3e      	ldr	r3, [pc, #248]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080fa:	2301      	movs	r3, #1
 80080fc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080fe:	4b3b      	ldr	r3, [pc, #236]	@ (80081ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a3a      	ldr	r2, [pc, #232]	@ (80081ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800810a:	f7fd fc47 	bl	800599c <HAL_GetTick>
 800810e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008110:	e009      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008112:	f7fd fc43 	bl	800599c <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d902      	bls.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	74fb      	strb	r3, [r7, #19]
        break;
 8008124:	e005      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008126:	4b31      	ldr	r3, [pc, #196]	@ (80081ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0ef      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008132:	7cfb      	ldrb	r3, [r7, #19]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d15b      	bne.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008138:	4b2b      	ldr	r3, [pc, #172]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008142:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01f      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	429a      	cmp	r2, r3
 8008154:	d019      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008156:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008160:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008162:	4b21      	ldr	r3, [pc, #132]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008168:	4a1f      	ldr	r2, [pc, #124]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800816a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800816e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008172:	4b1d      	ldr	r3, [pc, #116]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	4a1b      	ldr	r2, [pc, #108]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800817a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800817e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008182:	4a19      	ldr	r2, [pc, #100]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d016      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008194:	f7fd fc02 	bl	800599c <HAL_GetTick>
 8008198:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800819a:	e00b      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819c:	f7fd fbfe 	bl	800599c <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d902      	bls.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	74fb      	strb	r3, [r7, #19]
            break;
 80081b2:	e006      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081b4:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0ec      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80081c2:	7cfb      	ldrb	r3, [r7, #19]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10c      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081c8:	4b07      	ldr	r3, [pc, #28]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d8:	4903      	ldr	r1, [pc, #12]	@ (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80081e0:	e008      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081e2:	7cfb      	ldrb	r3, [r7, #19]
 80081e4:	74bb      	strb	r3, [r7, #18]
 80081e6:	e005      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80081e8:	40021000 	.word	0x40021000
 80081ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f0:	7cfb      	ldrb	r3, [r7, #19]
 80081f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081f4:	7c7b      	ldrb	r3, [r7, #17]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d105      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081fa:	4ba0      	ldr	r3, [pc, #640]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081fe:	4a9f      	ldr	r2, [pc, #636]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008204:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008212:	4b9a      	ldr	r3, [pc, #616]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008218:	f023 0203 	bic.w	r2, r3, #3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008220:	4996      	ldr	r1, [pc, #600]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008222:	4313      	orrs	r3, r2
 8008224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00a      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008234:	4b91      	ldr	r3, [pc, #580]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823a:	f023 020c 	bic.w	r2, r3, #12
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	498e      	ldr	r1, [pc, #568]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008256:	4b89      	ldr	r3, [pc, #548]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800825c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008264:	4985      	ldr	r1, [pc, #532]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008266:	4313      	orrs	r3, r2
 8008268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008278:	4b80      	ldr	r3, [pc, #512]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800827a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800827e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008286:	497d      	ldr	r1, [pc, #500]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008288:	4313      	orrs	r3, r2
 800828a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800829a:	4b78      	ldr	r3, [pc, #480]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a8:	4974      	ldr	r1, [pc, #464]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082bc:	4b6f      	ldr	r3, [pc, #444]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ca:	496c      	ldr	r1, [pc, #432]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082de:	4b67      	ldr	r3, [pc, #412]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ec:	4963      	ldr	r1, [pc, #396]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008300:	4b5e      	ldr	r3, [pc, #376]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008306:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800830e:	495b      	ldr	r1, [pc, #364]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008322:	4b56      	ldr	r3, [pc, #344]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008328:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008330:	4952      	ldr	r1, [pc, #328]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008344:	4b4d      	ldr	r3, [pc, #308]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800834a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008352:	494a      	ldr	r1, [pc, #296]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008366:	4b45      	ldr	r3, [pc, #276]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008374:	4941      	ldr	r1, [pc, #260]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008388:	4b3c      	ldr	r3, [pc, #240]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800838a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800838e:	f023 0203 	bic.w	r2, r3, #3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008396:	4939      	ldr	r1, [pc, #228]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008398:	4313      	orrs	r3, r2
 800839a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d028      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083aa:	4b34      	ldr	r3, [pc, #208]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083b8:	4930      	ldr	r1, [pc, #192]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083c8:	d106      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083ca:	4b2c      	ldr	r3, [pc, #176]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	4a2b      	ldr	r2, [pc, #172]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083d4:	60d3      	str	r3, [r2, #12]
 80083d6:	e011      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80083e0:	d10c      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3304      	adds	r3, #4
 80083e6:	2101      	movs	r1, #1
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f8f9 	bl	80085e0 <RCCEx_PLLSAI1_Config>
 80083ee:	4603      	mov	r3, r0
 80083f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80083f2:	7cfb      	ldrb	r3, [r7, #19]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80083f8:	7cfb      	ldrb	r3, [r7, #19]
 80083fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d04d      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800840c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008410:	d108      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008412:	4b1a      	ldr	r3, [pc, #104]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008414:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008418:	4a18      	ldr	r2, [pc, #96]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800841a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800841e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008422:	e012      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008424:	4b15      	ldr	r3, [pc, #84]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008426:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800842a:	4a14      	ldr	r2, [pc, #80]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800842c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008430:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008434:	4b11      	ldr	r3, [pc, #68]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800843a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008442:	490e      	ldr	r1, [pc, #56]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008444:	4313      	orrs	r3, r2
 8008446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800844e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008452:	d106      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008454:	4b09      	ldr	r3, [pc, #36]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	4a08      	ldr	r2, [pc, #32]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800845a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800845e:	60d3      	str	r3, [r2, #12]
 8008460:	e020      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800846a:	d109      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800846c:	4b03      	ldr	r3, [pc, #12]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4a02      	ldr	r2, [pc, #8]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008476:	60d3      	str	r3, [r2, #12]
 8008478:	e014      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800847a:	bf00      	nop
 800847c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008488:	d10c      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3304      	adds	r3, #4
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f000 f8a5 	bl	80085e0 <RCCEx_PLLSAI1_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800849a:	7cfb      	ldrb	r3, [r7, #19]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80084a0:	7cfb      	ldrb	r3, [r7, #19]
 80084a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d028      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084b0:	4b4a      	ldr	r3, [pc, #296]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084be:	4947      	ldr	r1, [pc, #284]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ce:	d106      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084d0:	4b42      	ldr	r3, [pc, #264]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	4a41      	ldr	r2, [pc, #260]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084da:	60d3      	str	r3, [r2, #12]
 80084dc:	e011      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084e6:	d10c      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3304      	adds	r3, #4
 80084ec:	2101      	movs	r1, #1
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f876 	bl	80085e0 <RCCEx_PLLSAI1_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084f8:	7cfb      	ldrb	r3, [r7, #19]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80084fe:	7cfb      	ldrb	r3, [r7, #19]
 8008500:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01e      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800850e:	4b33      	ldr	r3, [pc, #204]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008514:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800851e:	492f      	ldr	r1, [pc, #188]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008520:	4313      	orrs	r3, r2
 8008522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008530:	d10c      	bne.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f851 	bl	80085e0 <RCCEx_PLLSAI1_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008548:	7cfb      	ldrb	r3, [r7, #19]
 800854a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008558:	4b20      	ldr	r3, [pc, #128]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800855a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800855e:	f023 0204 	bic.w	r2, r3, #4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008568:	491c      	ldr	r1, [pc, #112]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800857c:	4b17      	ldr	r3, [pc, #92]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800857e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008582:	f023 0218 	bic.w	r2, r3, #24
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858c:	4913      	ldr	r1, [pc, #76]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800858e:	4313      	orrs	r3, r2
 8008590:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d017      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80085a0:	4b0e      	ldr	r3, [pc, #56]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b0:	490a      	ldr	r1, [pc, #40]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085c2:	d105      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085c4:	4b05      	ldr	r3, [pc, #20]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	4a04      	ldr	r2, [pc, #16]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80085d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40021000 	.word	0x40021000

080085e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085ee:	4b72      	ldr	r3, [pc, #456]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085fa:	4b6f      	ldr	r3, [pc, #444]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f003 0203 	and.w	r2, r3, #3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d103      	bne.n	8008612 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
       ||
 800860e:	2b00      	cmp	r3, #0
 8008610:	d142      	bne.n	8008698 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]
 8008616:	e03f      	b.n	8008698 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d018      	beq.n	8008652 <RCCEx_PLLSAI1_Config+0x72>
 8008620:	2b03      	cmp	r3, #3
 8008622:	d825      	bhi.n	8008670 <RCCEx_PLLSAI1_Config+0x90>
 8008624:	2b01      	cmp	r3, #1
 8008626:	d002      	beq.n	800862e <RCCEx_PLLSAI1_Config+0x4e>
 8008628:	2b02      	cmp	r3, #2
 800862a:	d009      	beq.n	8008640 <RCCEx_PLLSAI1_Config+0x60>
 800862c:	e020      	b.n	8008670 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800862e:	4b62      	ldr	r3, [pc, #392]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d11d      	bne.n	8008676 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800863e:	e01a      	b.n	8008676 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008640:	4b5d      	ldr	r3, [pc, #372]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008648:	2b00      	cmp	r3, #0
 800864a:	d116      	bne.n	800867a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008650:	e013      	b.n	800867a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008652:	4b59      	ldr	r3, [pc, #356]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800865e:	4b56      	ldr	r3, [pc, #344]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800866e:	e006      	b.n	800867e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
      break;
 8008674:	e004      	b.n	8008680 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008676:	bf00      	nop
 8008678:	e002      	b.n	8008680 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800867a:	bf00      	nop
 800867c:	e000      	b.n	8008680 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800867e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d108      	bne.n	8008698 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008686:	4b4c      	ldr	r3, [pc, #304]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f023 0203 	bic.w	r2, r3, #3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4949      	ldr	r1, [pc, #292]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008694:	4313      	orrs	r3, r2
 8008696:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 8086 	bne.w	80087ac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80086a0:	4b45      	ldr	r3, [pc, #276]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a44      	ldr	r2, [pc, #272]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ac:	f7fd f976 	bl	800599c <HAL_GetTick>
 80086b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086b2:	e009      	b.n	80086c8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086b4:	f7fd f972 	bl	800599c <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d902      	bls.n	80086c8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	73fb      	strb	r3, [r7, #15]
        break;
 80086c6:	e005      	b.n	80086d4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086c8:	4b3b      	ldr	r3, [pc, #236]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1ef      	bne.n	80086b4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d168      	bne.n	80087ac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d113      	bne.n	8008708 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086e0:	4b35      	ldr	r3, [pc, #212]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	4b35      	ldr	r3, [pc, #212]	@ (80087bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6892      	ldr	r2, [r2, #8]
 80086ec:	0211      	lsls	r1, r2, #8
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	68d2      	ldr	r2, [r2, #12]
 80086f2:	06d2      	lsls	r2, r2, #27
 80086f4:	4311      	orrs	r1, r2
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6852      	ldr	r2, [r2, #4]
 80086fa:	3a01      	subs	r2, #1
 80086fc:	0112      	lsls	r2, r2, #4
 80086fe:	430a      	orrs	r2, r1
 8008700:	492d      	ldr	r1, [pc, #180]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008702:	4313      	orrs	r3, r2
 8008704:	610b      	str	r3, [r1, #16]
 8008706:	e02d      	b.n	8008764 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d115      	bne.n	800873a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800870e:	4b2a      	ldr	r3, [pc, #168]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008710:	691a      	ldr	r2, [r3, #16]
 8008712:	4b2b      	ldr	r3, [pc, #172]	@ (80087c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008714:	4013      	ands	r3, r2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6892      	ldr	r2, [r2, #8]
 800871a:	0211      	lsls	r1, r2, #8
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6912      	ldr	r2, [r2, #16]
 8008720:	0852      	lsrs	r2, r2, #1
 8008722:	3a01      	subs	r2, #1
 8008724:	0552      	lsls	r2, r2, #21
 8008726:	4311      	orrs	r1, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6852      	ldr	r2, [r2, #4]
 800872c:	3a01      	subs	r2, #1
 800872e:	0112      	lsls	r2, r2, #4
 8008730:	430a      	orrs	r2, r1
 8008732:	4921      	ldr	r1, [pc, #132]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008734:	4313      	orrs	r3, r2
 8008736:	610b      	str	r3, [r1, #16]
 8008738:	e014      	b.n	8008764 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800873a:	4b1f      	ldr	r3, [pc, #124]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	4b21      	ldr	r3, [pc, #132]	@ (80087c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008740:	4013      	ands	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6892      	ldr	r2, [r2, #8]
 8008746:	0211      	lsls	r1, r2, #8
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6952      	ldr	r2, [r2, #20]
 800874c:	0852      	lsrs	r2, r2, #1
 800874e:	3a01      	subs	r2, #1
 8008750:	0652      	lsls	r2, r2, #25
 8008752:	4311      	orrs	r1, r2
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6852      	ldr	r2, [r2, #4]
 8008758:	3a01      	subs	r2, #1
 800875a:	0112      	lsls	r2, r2, #4
 800875c:	430a      	orrs	r2, r1
 800875e:	4916      	ldr	r1, [pc, #88]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008760:	4313      	orrs	r3, r2
 8008762:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008764:	4b14      	ldr	r3, [pc, #80]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a13      	ldr	r2, [pc, #76]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800876a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800876e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008770:	f7fd f914 	bl	800599c <HAL_GetTick>
 8008774:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008776:	e009      	b.n	800878c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008778:	f7fd f910 	bl	800599c <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d902      	bls.n	800878c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	73fb      	strb	r3, [r7, #15]
          break;
 800878a:	e005      	b.n	8008798 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0ef      	beq.n	8008778 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800879e:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	4904      	ldr	r1, [pc, #16]	@ (80087b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	40021000 	.word	0x40021000
 80087bc:	07ff800f 	.word	0x07ff800f
 80087c0:	ff9f800f 	.word	0xff9f800f
 80087c4:	f9ff800f 	.word	0xf9ff800f

080087c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087d6:	4b72      	ldr	r3, [pc, #456]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80087e2:	4b6f      	ldr	r3, [pc, #444]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f003 0203 	and.w	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d103      	bne.n	80087fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
       ||
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d142      	bne.n	8008880 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	73fb      	strb	r3, [r7, #15]
 80087fe:	e03f      	b.n	8008880 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d018      	beq.n	800883a <RCCEx_PLLSAI2_Config+0x72>
 8008808:	2b03      	cmp	r3, #3
 800880a:	d825      	bhi.n	8008858 <RCCEx_PLLSAI2_Config+0x90>
 800880c:	2b01      	cmp	r3, #1
 800880e:	d002      	beq.n	8008816 <RCCEx_PLLSAI2_Config+0x4e>
 8008810:	2b02      	cmp	r3, #2
 8008812:	d009      	beq.n	8008828 <RCCEx_PLLSAI2_Config+0x60>
 8008814:	e020      	b.n	8008858 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008816:	4b62      	ldr	r3, [pc, #392]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d11d      	bne.n	800885e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008826:	e01a      	b.n	800885e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008828:	4b5d      	ldr	r3, [pc, #372]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008830:	2b00      	cmp	r3, #0
 8008832:	d116      	bne.n	8008862 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008838:	e013      	b.n	8008862 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800883a:	4b59      	ldr	r3, [pc, #356]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10f      	bne.n	8008866 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008846:	4b56      	ldr	r3, [pc, #344]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008856:	e006      	b.n	8008866 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
      break;
 800885c:	e004      	b.n	8008868 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800885e:	bf00      	nop
 8008860:	e002      	b.n	8008868 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008862:	bf00      	nop
 8008864:	e000      	b.n	8008868 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008866:	bf00      	nop
    }

    if(status == HAL_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d108      	bne.n	8008880 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800886e:	4b4c      	ldr	r3, [pc, #304]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f023 0203 	bic.w	r2, r3, #3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4949      	ldr	r1, [pc, #292]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800887c:	4313      	orrs	r3, r2
 800887e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 8086 	bne.w	8008994 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008888:	4b45      	ldr	r3, [pc, #276]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a44      	ldr	r2, [pc, #272]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800888e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008894:	f7fd f882 	bl	800599c <HAL_GetTick>
 8008898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800889a:	e009      	b.n	80088b0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800889c:	f7fd f87e 	bl	800599c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d902      	bls.n	80088b0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	73fb      	strb	r3, [r7, #15]
        break;
 80088ae:	e005      	b.n	80088bc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088b0:	4b3b      	ldr	r3, [pc, #236]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1ef      	bne.n	800889c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d168      	bne.n	8008994 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d113      	bne.n	80088f0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088c8:	4b35      	ldr	r3, [pc, #212]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088ca:	695a      	ldr	r2, [r3, #20]
 80088cc:	4b35      	ldr	r3, [pc, #212]	@ (80089a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80088ce:	4013      	ands	r3, r2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6892      	ldr	r2, [r2, #8]
 80088d4:	0211      	lsls	r1, r2, #8
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	68d2      	ldr	r2, [r2, #12]
 80088da:	06d2      	lsls	r2, r2, #27
 80088dc:	4311      	orrs	r1, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6852      	ldr	r2, [r2, #4]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	0112      	lsls	r2, r2, #4
 80088e6:	430a      	orrs	r2, r1
 80088e8:	492d      	ldr	r1, [pc, #180]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	614b      	str	r3, [r1, #20]
 80088ee:	e02d      	b.n	800894c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d115      	bne.n	8008922 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088f6:	4b2a      	ldr	r3, [pc, #168]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	4b2b      	ldr	r3, [pc, #172]	@ (80089a8 <RCCEx_PLLSAI2_Config+0x1e0>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6892      	ldr	r2, [r2, #8]
 8008902:	0211      	lsls	r1, r2, #8
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6912      	ldr	r2, [r2, #16]
 8008908:	0852      	lsrs	r2, r2, #1
 800890a:	3a01      	subs	r2, #1
 800890c:	0552      	lsls	r2, r2, #21
 800890e:	4311      	orrs	r1, r2
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6852      	ldr	r2, [r2, #4]
 8008914:	3a01      	subs	r2, #1
 8008916:	0112      	lsls	r2, r2, #4
 8008918:	430a      	orrs	r2, r1
 800891a:	4921      	ldr	r1, [pc, #132]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800891c:	4313      	orrs	r3, r2
 800891e:	614b      	str	r3, [r1, #20]
 8008920:	e014      	b.n	800894c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008922:	4b1f      	ldr	r3, [pc, #124]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008924:	695a      	ldr	r2, [r3, #20]
 8008926:	4b21      	ldr	r3, [pc, #132]	@ (80089ac <RCCEx_PLLSAI2_Config+0x1e4>)
 8008928:	4013      	ands	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6892      	ldr	r2, [r2, #8]
 800892e:	0211      	lsls	r1, r2, #8
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6952      	ldr	r2, [r2, #20]
 8008934:	0852      	lsrs	r2, r2, #1
 8008936:	3a01      	subs	r2, #1
 8008938:	0652      	lsls	r2, r2, #25
 800893a:	4311      	orrs	r1, r2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6852      	ldr	r2, [r2, #4]
 8008940:	3a01      	subs	r2, #1
 8008942:	0112      	lsls	r2, r2, #4
 8008944:	430a      	orrs	r2, r1
 8008946:	4916      	ldr	r1, [pc, #88]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008948:	4313      	orrs	r3, r2
 800894a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800894c:	4b14      	ldr	r3, [pc, #80]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a13      	ldr	r2, [pc, #76]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008958:	f7fd f820 	bl	800599c <HAL_GetTick>
 800895c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800895e:	e009      	b.n	8008974 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008960:	f7fd f81c 	bl	800599c <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d902      	bls.n	8008974 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	73fb      	strb	r3, [r7, #15]
          break;
 8008972:	e005      	b.n	8008980 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008974:	4b0a      	ldr	r3, [pc, #40]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0ef      	beq.n	8008960 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008986:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	4904      	ldr	r1, [pc, #16]	@ (80089a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008990:	4313      	orrs	r3, r2
 8008992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40021000 	.word	0x40021000
 80089a4:	07ff800f 	.word	0x07ff800f
 80089a8:	ff9f800f 	.word	0xff9f800f
 80089ac:	f9ff800f 	.word	0xf9ff800f

080089b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e095      	b.n	8008aee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d108      	bne.n	80089dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089d2:	d009      	beq.n	80089e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	61da      	str	r2, [r3, #28]
 80089da:	e005      	b.n	80089e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7fc fc42 	bl	800528c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a28:	d902      	bls.n	8008a30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e002      	b.n	8008a36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008a3e:	d007      	beq.n	8008a50 <HAL_SPI_Init+0xa0>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a48:	d002      	beq.n	8008a50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	431a      	orrs	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a92:	ea42 0103 	orr.w	r1, r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	f003 0204 	and.w	r2, r3, #4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab4:	f003 0310 	and.w	r3, r3, #16
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008acc:	ea42 0103 	orr.w	r1, r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b088      	sub	sp, #32
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	603b      	str	r3, [r7, #0]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b06:	f7fc ff49 	bl	800599c <HAL_GetTick>
 8008b0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d001      	beq.n	8008b20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e15c      	b.n	8008dda <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_SPI_Transmit+0x36>
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e154      	b.n	8008dda <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_SPI_Transmit+0x48>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e14d      	b.n	8008dda <HAL_SPI_Transmit+0x2e4>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2203      	movs	r2, #3
 8008b4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	88fa      	ldrh	r2, [r7, #6]
 8008b5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	88fa      	ldrh	r2, [r7, #6]
 8008b64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b90:	d10f      	bne.n	8008bb2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bbc:	2b40      	cmp	r3, #64	@ 0x40
 8008bbe:	d007      	beq.n	8008bd0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bd8:	d952      	bls.n	8008c80 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_SPI_Transmit+0xf2>
 8008be2:	8b7b      	ldrh	r3, [r7, #26]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d145      	bne.n	8008c74 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bec:	881a      	ldrh	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf8:	1c9a      	adds	r2, r3, #2
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c0c:	e032      	b.n	8008c74 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d112      	bne.n	8008c42 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c20:	881a      	ldrh	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2c:	1c9a      	adds	r2, r3, #2
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c40:	e018      	b.n	8008c74 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c42:	f7fc feab 	bl	800599c <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d803      	bhi.n	8008c5a <HAL_SPI_Transmit+0x164>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d102      	bne.n	8008c60 <HAL_SPI_Transmit+0x16a>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e0b2      	b.n	8008dda <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1c7      	bne.n	8008c0e <HAL_SPI_Transmit+0x118>
 8008c7e:	e083      	b.n	8008d88 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <HAL_SPI_Transmit+0x198>
 8008c88:	8b7b      	ldrh	r3, [r7, #26]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d177      	bne.n	8008d7e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d912      	bls.n	8008cbe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9c:	881a      	ldrh	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	1c9a      	adds	r2, r3, #2
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b02      	subs	r3, #2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cbc:	e05f      	b.n	8008d7e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008ce4:	e04b      	b.n	8008d7e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d12b      	bne.n	8008d4c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d912      	bls.n	8008d24 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	881a      	ldrh	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0e:	1c9a      	adds	r2, r3, #2
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3b02      	subs	r3, #2
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d22:	e02c      	b.n	8008d7e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	7812      	ldrb	r2, [r2, #0]
 8008d30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d4a:	e018      	b.n	8008d7e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d4c:	f7fc fe26 	bl	800599c <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d803      	bhi.n	8008d64 <HAL_SPI_Transmit+0x26e>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d102      	bne.n	8008d6a <HAL_SPI_Transmit+0x274>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e02d      	b.n	8008dda <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1ae      	bne.n	8008ce6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 fb65 	bl	800945c <SPI_EndRxTxTransaction>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10a      	bne.n	8008dbc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b08a      	sub	sp, #40	@ 0x28
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008df0:	2301      	movs	r3, #1
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008df4:	f7fc fdd2 	bl	800599c <HAL_GetTick>
 8008df8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e00:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008e08:	887b      	ldrh	r3, [r7, #2]
 8008e0a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008e0c:	887b      	ldrh	r3, [r7, #2]
 8008e0e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e10:	7ffb      	ldrb	r3, [r7, #31]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d00c      	beq.n	8008e30 <HAL_SPI_TransmitReceive+0x4e>
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e1c:	d106      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d102      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x4a>
 8008e26:	7ffb      	ldrb	r3, [r7, #31]
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d001      	beq.n	8008e30 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e1f3      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0x60>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0x60>
 8008e3c:	887b      	ldrh	r3, [r7, #2]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e1e8      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d101      	bne.n	8008e54 <HAL_SPI_TransmitReceive+0x72>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e1e1      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d003      	beq.n	8008e70 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2205      	movs	r2, #5
 8008e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	887a      	ldrh	r2, [r7, #2]
 8008e80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	887a      	ldrh	r2, [r7, #2]
 8008e88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	887a      	ldrh	r2, [r7, #2]
 8008e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	887a      	ldrh	r2, [r7, #2]
 8008e9c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008eb2:	d802      	bhi.n	8008eba <HAL_SPI_TransmitReceive+0xd8>
 8008eb4:	8abb      	ldrh	r3, [r7, #20]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d908      	bls.n	8008ecc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	e007      	b.n	8008edc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008eda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b40      	cmp	r3, #64	@ 0x40
 8008ee8:	d007      	beq.n	8008efa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f02:	f240 8083 	bls.w	800900c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_SPI_TransmitReceive+0x132>
 8008f0e:	8afb      	ldrh	r3, [r7, #22]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d16f      	bne.n	8008ff4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f18:	881a      	ldrh	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f24:	1c9a      	adds	r2, r3, #2
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	3b01      	subs	r3, #1
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f38:	e05c      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d11b      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x19e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d016      	beq.n	8008f80 <HAL_SPI_TransmitReceive+0x19e>
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d113      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5c:	881a      	ldrh	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d11c      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x1e6>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d016      	beq.n	8008fc8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa4:	b292      	uxth	r2, r2
 8008fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fac:	1c9a      	adds	r2, r3, #2
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008fc8:	f7fc fce8 	bl	800599c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d80d      	bhi.n	8008ff4 <HAL_SPI_TransmitReceive+0x212>
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d009      	beq.n	8008ff4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e111      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d19d      	bne.n	8008f3a <HAL_SPI_TransmitReceive+0x158>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009004:	b29b      	uxth	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d197      	bne.n	8008f3a <HAL_SPI_TransmitReceive+0x158>
 800900a:	e0e5      	b.n	80091d8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_SPI_TransmitReceive+0x23a>
 8009014:	8afb      	ldrh	r3, [r7, #22]
 8009016:	2b01      	cmp	r3, #1
 8009018:	f040 80d1 	bne.w	80091be <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b01      	cmp	r3, #1
 8009024:	d912      	bls.n	800904c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902a:	881a      	ldrh	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009036:	1c9a      	adds	r2, r3, #2
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009040:	b29b      	uxth	r3, r3
 8009042:	3b02      	subs	r3, #2
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800904a:	e0b8      	b.n	80091be <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	330c      	adds	r3, #12
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009072:	e0a4      	b.n	80091be <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b02      	cmp	r3, #2
 8009080:	d134      	bne.n	80090ec <HAL_SPI_TransmitReceive+0x30a>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009086:	b29b      	uxth	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d02f      	beq.n	80090ec <HAL_SPI_TransmitReceive+0x30a>
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	2b01      	cmp	r3, #1
 8009090:	d12c      	bne.n	80090ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009096:	b29b      	uxth	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	d912      	bls.n	80090c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b02      	subs	r3, #2
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090c0:	e012      	b.n	80090e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	330c      	adds	r3, #12
 80090cc:	7812      	ldrb	r2, [r2, #0]
 80090ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090de:	b29b      	uxth	r3, r3
 80090e0:	3b01      	subs	r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d148      	bne.n	800918c <HAL_SPI_TransmitReceive+0x3aa>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d042      	beq.n	800918c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b01      	cmp	r3, #1
 8009110:	d923      	bls.n	800915a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800911c:	b292      	uxth	r2, r2
 800911e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009124:	1c9a      	adds	r2, r3, #2
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b02      	subs	r3, #2
 8009134:	b29a      	uxth	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009142:	b29b      	uxth	r3, r3
 8009144:	2b01      	cmp	r3, #1
 8009146:	d81f      	bhi.n	8009188 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009156:	605a      	str	r2, [r3, #4]
 8009158:	e016      	b.n	8009188 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f103 020c 	add.w	r2, r3, #12
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009166:	7812      	ldrb	r2, [r2, #0]
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009188:	2301      	movs	r3, #1
 800918a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800918c:	f7fc fc06 	bl	800599c <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009198:	429a      	cmp	r2, r3
 800919a:	d803      	bhi.n	80091a4 <HAL_SPI_TransmitReceive+0x3c2>
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d102      	bne.n	80091aa <HAL_SPI_TransmitReceive+0x3c8>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d109      	bne.n	80091be <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e02c      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f47f af55 	bne.w	8009074 <HAL_SPI_TransmitReceive+0x292>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f47f af4e 	bne.w	8009074 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091d8:	6a3a      	ldr	r2, [r7, #32]
 80091da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f93d 	bl	800945c <SPI_EndRxTxTransaction>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d008      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2220      	movs	r2, #32
 80091ec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e00e      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009216:	2300      	movs	r3, #0
  }
}
 8009218:	4618      	mov	r0, r3
 800921a:	3728      	adds	r7, #40	@ 0x28
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009230:	f7fc fbb4 	bl	800599c <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4413      	add	r3, r2
 800923e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009240:	f7fc fbac 	bl	800599c <HAL_GetTick>
 8009244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009246:	4b39      	ldr	r3, [pc, #228]	@ (800932c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	015b      	lsls	r3, r3, #5
 800924c:	0d1b      	lsrs	r3, r3, #20
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	fb02 f303 	mul.w	r3, r2, r3
 8009254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009256:	e054      	b.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d050      	beq.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009260:	f7fc fb9c 	bl	800599c <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	429a      	cmp	r2, r3
 800926e:	d902      	bls.n	8009276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d13d      	bne.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800928e:	d111      	bne.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009298:	d004      	beq.n	80092a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a2:	d107      	bne.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092bc:	d10f      	bne.n	80092de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e017      	b.n	8009322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3b01      	subs	r3, #1
 8009300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4013      	ands	r3, r2
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	bf0c      	ite	eq
 8009312:	2301      	moveq	r3, #1
 8009314:	2300      	movne	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	429a      	cmp	r2, r3
 800931e:	d19b      	bne.n	8009258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20040038 	.word	0x20040038

08009330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	@ 0x28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009342:	f7fc fb2b 	bl	800599c <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	4413      	add	r3, r2
 8009350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009352:	f7fc fb23 	bl	800599c <HAL_GetTick>
 8009356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	330c      	adds	r3, #12
 800935e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009360:	4b3d      	ldr	r3, [pc, #244]	@ (8009458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	00da      	lsls	r2, r3, #3
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	0d1b      	lsrs	r3, r3, #20
 8009370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009378:	e060      	b.n	800943c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009380:	d107      	bne.n	8009392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d050      	beq.n	800943c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800939a:	f7fc faff 	bl	800599c <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d902      	bls.n	80093b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d13d      	bne.n	800942c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093c8:	d111      	bne.n	80093ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093d2:	d004      	beq.n	80093de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093dc:	d107      	bne.n	80093ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093f6:	d10f      	bne.n	8009418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e010      	b.n	800944e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3b01      	subs	r3, #1
 800943a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4013      	ands	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	429a      	cmp	r2, r3
 800944a:	d196      	bne.n	800937a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3728      	adds	r7, #40	@ 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20040038 	.word	0x20040038

0800945c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af02      	add	r7, sp, #8
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2200      	movs	r2, #0
 8009470:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff ff5b 	bl	8009330 <SPI_WaitFifoStateUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d007      	beq.n	8009490 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009484:	f043 0220 	orr.w	r2, r3, #32
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e027      	b.n	80094e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2200      	movs	r2, #0
 8009498:	2180      	movs	r1, #128	@ 0x80
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fec0 	bl	8009220 <SPI_WaitFlagStateUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d007      	beq.n	80094b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094aa:	f043 0220 	orr.w	r2, r3, #32
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e014      	b.n	80094e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff ff34 	bl	8009330 <SPI_WaitFifoStateUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d007      	beq.n	80094de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d2:	f043 0220 	orr.w	r2, r3, #32
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e000      	b.n	80094e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e049      	b.n	800958e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fb ff30 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f000 fa9e 	bl	8009a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d001      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e04f      	b.n	8009650 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a23      	ldr	r2, [pc, #140]	@ (800965c <HAL_TIM_Base_Start_IT+0xc4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d01d      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x76>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095da:	d018      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x76>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009660 <HAL_TIM_Base_Start_IT+0xc8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d013      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x76>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009664 <HAL_TIM_Base_Start_IT+0xcc>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00e      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x76>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009668 <HAL_TIM_Base_Start_IT+0xd0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d009      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x76>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a1b      	ldr	r2, [pc, #108]	@ (800966c <HAL_TIM_Base_Start_IT+0xd4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d004      	beq.n	800960e <HAL_TIM_Base_Start_IT+0x76>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a19      	ldr	r2, [pc, #100]	@ (8009670 <HAL_TIM_Base_Start_IT+0xd8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d115      	bne.n	800963a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	4b17      	ldr	r3, [pc, #92]	@ (8009674 <HAL_TIM_Base_Start_IT+0xdc>)
 8009616:	4013      	ands	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b06      	cmp	r3, #6
 800961e:	d015      	beq.n	800964c <HAL_TIM_Base_Start_IT+0xb4>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009626:	d011      	beq.n	800964c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0201 	orr.w	r2, r2, #1
 8009636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009638:	e008      	b.n	800964c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0201 	orr.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e000      	b.n	800964e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800964c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	40012c00 	.word	0x40012c00
 8009660:	40000400 	.word	0x40000400
 8009664:	40000800 	.word	0x40000800
 8009668:	40000c00 	.word	0x40000c00
 800966c:	40013400 	.word	0x40013400
 8009670:	40014000 	.word	0x40014000
 8009674:	00010007 	.word	0x00010007

08009678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d020      	beq.n	80096dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d01b      	beq.n	80096dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f06f 0202 	mvn.w	r2, #2
 80096ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f9b2 	bl	8009a2c <HAL_TIM_IC_CaptureCallback>
 80096c8:	e005      	b.n	80096d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f9a4 	bl	8009a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f9b5 	bl	8009a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d020      	beq.n	8009728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01b      	beq.n	8009728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f06f 0204 	mvn.w	r2, #4
 80096f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f98c 	bl	8009a2c <HAL_TIM_IC_CaptureCallback>
 8009714:	e005      	b.n	8009722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f97e 	bl	8009a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f98f 	bl	8009a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b00      	cmp	r3, #0
 8009730:	d020      	beq.n	8009774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01b      	beq.n	8009774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0208 	mvn.w	r2, #8
 8009744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2204      	movs	r2, #4
 800974a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f966 	bl	8009a2c <HAL_TIM_IC_CaptureCallback>
 8009760:	e005      	b.n	800976e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f958 	bl	8009a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f969 	bl	8009a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b00      	cmp	r3, #0
 800977c:	d020      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01b      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f06f 0210 	mvn.w	r2, #16
 8009790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2208      	movs	r2, #8
 8009796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f940 	bl	8009a2c <HAL_TIM_IC_CaptureCallback>
 80097ac:	e005      	b.n	80097ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f932 	bl	8009a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f943 	bl	8009a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f06f 0201 	mvn.w	r2, #1
 80097dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7fb fe84 	bl	80054ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d104      	bne.n	80097f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800980a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fafd 	bl	8009e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00c      	beq.n	8009836 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 faf5 	bl	8009e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d007      	beq.n	800985a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f8fd 	bl	8009a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00c      	beq.n	800987e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d007      	beq.n	800987e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f06f 0220 	mvn.w	r2, #32
 8009876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fabd 	bl	8009df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_TIM_ConfigClockSource+0x1c>
 800989e:	2302      	movs	r3, #2
 80098a0:	e0b6      	b.n	8009a10 <HAL_TIM_ConfigClockSource+0x18a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098c0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80098c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098de:	d03e      	beq.n	800995e <HAL_TIM_ConfigClockSource+0xd8>
 80098e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e4:	f200 8087 	bhi.w	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 80098e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ec:	f000 8086 	beq.w	80099fc <HAL_TIM_ConfigClockSource+0x176>
 80098f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f4:	d87f      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 80098f6:	2b70      	cmp	r3, #112	@ 0x70
 80098f8:	d01a      	beq.n	8009930 <HAL_TIM_ConfigClockSource+0xaa>
 80098fa:	2b70      	cmp	r3, #112	@ 0x70
 80098fc:	d87b      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 80098fe:	2b60      	cmp	r3, #96	@ 0x60
 8009900:	d050      	beq.n	80099a4 <HAL_TIM_ConfigClockSource+0x11e>
 8009902:	2b60      	cmp	r3, #96	@ 0x60
 8009904:	d877      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 8009906:	2b50      	cmp	r3, #80	@ 0x50
 8009908:	d03c      	beq.n	8009984 <HAL_TIM_ConfigClockSource+0xfe>
 800990a:	2b50      	cmp	r3, #80	@ 0x50
 800990c:	d873      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 800990e:	2b40      	cmp	r3, #64	@ 0x40
 8009910:	d058      	beq.n	80099c4 <HAL_TIM_ConfigClockSource+0x13e>
 8009912:	2b40      	cmp	r3, #64	@ 0x40
 8009914:	d86f      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 8009916:	2b30      	cmp	r3, #48	@ 0x30
 8009918:	d064      	beq.n	80099e4 <HAL_TIM_ConfigClockSource+0x15e>
 800991a:	2b30      	cmp	r3, #48	@ 0x30
 800991c:	d86b      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 800991e:	2b20      	cmp	r3, #32
 8009920:	d060      	beq.n	80099e4 <HAL_TIM_ConfigClockSource+0x15e>
 8009922:	2b20      	cmp	r3, #32
 8009924:	d867      	bhi.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d05c      	beq.n	80099e4 <HAL_TIM_ConfigClockSource+0x15e>
 800992a:	2b10      	cmp	r3, #16
 800992c:	d05a      	beq.n	80099e4 <HAL_TIM_ConfigClockSource+0x15e>
 800992e:	e062      	b.n	80099f6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009940:	f000 f9b2 	bl	8009ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009952:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	609a      	str	r2, [r3, #8]
      break;
 800995c:	e04f      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800996e:	f000 f99b 	bl	8009ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009980:	609a      	str	r2, [r3, #8]
      break;
 8009982:	e03c      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009990:	461a      	mov	r2, r3
 8009992:	f000 f90f 	bl	8009bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2150      	movs	r1, #80	@ 0x50
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f968 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099a2:	e02c      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099b0:	461a      	mov	r2, r3
 80099b2:	f000 f92e 	bl	8009c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2160      	movs	r1, #96	@ 0x60
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 f958 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099c2:	e01c      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099d0:	461a      	mov	r2, r3
 80099d2:	f000 f8ef 	bl	8009bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2140      	movs	r1, #64	@ 0x40
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 f948 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099e2:	e00c      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f000 f93f 	bl	8009c72 <TIM_ITRx_SetConfig>
      break;
 80099f4:	e003      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	73fb      	strb	r3, [r7, #15]
      break;
 80099fa:	e000      	b.n	80099fe <HAL_TIM_ConfigClockSource+0x178>
      break;
 80099fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	@ (8009b94 <TIM_Base_SetConfig+0x12c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d013      	beq.n	8009aa8 <TIM_Base_SetConfig+0x40>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a86:	d00f      	beq.n	8009aa8 <TIM_Base_SetConfig+0x40>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a43      	ldr	r2, [pc, #268]	@ (8009b98 <TIM_Base_SetConfig+0x130>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00b      	beq.n	8009aa8 <TIM_Base_SetConfig+0x40>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a42      	ldr	r2, [pc, #264]	@ (8009b9c <TIM_Base_SetConfig+0x134>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d007      	beq.n	8009aa8 <TIM_Base_SetConfig+0x40>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a41      	ldr	r2, [pc, #260]	@ (8009ba0 <TIM_Base_SetConfig+0x138>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_Base_SetConfig+0x40>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a40      	ldr	r2, [pc, #256]	@ (8009ba4 <TIM_Base_SetConfig+0x13c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d108      	bne.n	8009aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a35      	ldr	r2, [pc, #212]	@ (8009b94 <TIM_Base_SetConfig+0x12c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d01f      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac8:	d01b      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a32      	ldr	r2, [pc, #200]	@ (8009b98 <TIM_Base_SetConfig+0x130>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d017      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a31      	ldr	r2, [pc, #196]	@ (8009b9c <TIM_Base_SetConfig+0x134>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a30      	ldr	r2, [pc, #192]	@ (8009ba0 <TIM_Base_SetConfig+0x138>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00f      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8009ba4 <TIM_Base_SetConfig+0x13c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00b      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2e      	ldr	r2, [pc, #184]	@ (8009ba8 <TIM_Base_SetConfig+0x140>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d007      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a2d      	ldr	r2, [pc, #180]	@ (8009bac <TIM_Base_SetConfig+0x144>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d003      	beq.n	8009b02 <TIM_Base_SetConfig+0x9a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a2c      	ldr	r2, [pc, #176]	@ (8009bb0 <TIM_Base_SetConfig+0x148>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d108      	bne.n	8009b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a16      	ldr	r2, [pc, #88]	@ (8009b94 <TIM_Base_SetConfig+0x12c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00f      	beq.n	8009b60 <TIM_Base_SetConfig+0xf8>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a18      	ldr	r2, [pc, #96]	@ (8009ba4 <TIM_Base_SetConfig+0x13c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00b      	beq.n	8009b60 <TIM_Base_SetConfig+0xf8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	@ (8009ba8 <TIM_Base_SetConfig+0x140>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d007      	beq.n	8009b60 <TIM_Base_SetConfig+0xf8>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a16      	ldr	r2, [pc, #88]	@ (8009bac <TIM_Base_SetConfig+0x144>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d003      	beq.n	8009b60 <TIM_Base_SetConfig+0xf8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	@ (8009bb0 <TIM_Base_SetConfig+0x148>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d103      	bne.n	8009b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d105      	bne.n	8009b86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	f023 0201 	bic.w	r2, r3, #1
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	611a      	str	r2, [r3, #16]
  }
}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	40012c00 	.word	0x40012c00
 8009b98:	40000400 	.word	0x40000400
 8009b9c:	40000800 	.word	0x40000800
 8009ba0:	40000c00 	.word	0x40000c00
 8009ba4:	40013400 	.word	0x40013400
 8009ba8:	40014000 	.word	0x40014000
 8009bac:	40014400 	.word	0x40014400
 8009bb0:	40014800 	.word	0x40014800

08009bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	f023 0201 	bic.w	r2, r3, #1
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f023 030a 	bic.w	r3, r3, #10
 8009bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b087      	sub	sp, #28
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	f023 0210 	bic.w	r2, r3, #16
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	031b      	lsls	r3, r3, #12
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	011b      	lsls	r3, r3, #4
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	621a      	str	r2, [r3, #32]
}
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f043 0307 	orr.w	r3, r3, #7
 8009c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	609a      	str	r2, [r3, #8]
}
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	021a      	lsls	r2, r3, #8
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	609a      	str	r2, [r3, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	371c      	adds	r7, #28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e068      	b.n	8009dd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a2e      	ldr	r2, [pc, #184]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d108      	bne.n	8009d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a1e      	ldr	r2, [pc, #120]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d01d      	beq.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d72:	d018      	beq.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a1b      	ldr	r2, [pc, #108]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d013      	beq.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a1a      	ldr	r2, [pc, #104]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00e      	beq.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a18      	ldr	r2, [pc, #96]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d009      	beq.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a13      	ldr	r2, [pc, #76]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d004      	beq.n	8009da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a14      	ldr	r2, [pc, #80]	@ (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d10c      	bne.n	8009dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	40012c00 	.word	0x40012c00
 8009de4:	40013400 	.word	0x40013400
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40000c00 	.word	0x40000c00
 8009df4:	40014000 	.word	0x40014000

08009df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e042      	b.n	8009ecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7fb f971 	bl	8005140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2224      	movs	r2, #36	@ 0x24
 8009e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0201 	bic.w	r2, r2, #1
 8009e74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fbb2 	bl	800a5e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f8b3 	bl	8009ff0 <UART_SetConfig>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d101      	bne.n	8009e94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e01b      	b.n	8009ecc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689a      	ldr	r2, [r3, #8]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fc31 	bl	800a72c <UART_CheckIdleState>
 8009eca:	4603      	mov	r3, r0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08a      	sub	sp, #40	@ 0x28
 8009ed8:	af02      	add	r7, sp, #8
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d17b      	bne.n	8009fe6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <HAL_UART_Transmit+0x26>
 8009ef4:	88fb      	ldrh	r3, [r7, #6]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e074      	b.n	8009fe8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2221      	movs	r2, #33	@ 0x21
 8009f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f0e:	f7fb fd45 	bl	800599c <HAL_GetTick>
 8009f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	88fa      	ldrh	r2, [r7, #6]
 8009f18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	88fa      	ldrh	r2, [r7, #6]
 8009f20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f2c:	d108      	bne.n	8009f40 <HAL_UART_Transmit+0x6c>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	61bb      	str	r3, [r7, #24]
 8009f3e:	e003      	b.n	8009f48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f48:	e030      	b.n	8009fac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2200      	movs	r2, #0
 8009f52:	2180      	movs	r1, #128	@ 0x80
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fc93 	bl	800a880 <UART_WaitOnFlagUntilTimeout>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d005      	beq.n	8009f6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2220      	movs	r2, #32
 8009f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e03d      	b.n	8009fe8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10b      	bne.n	8009f8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	881a      	ldrh	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f7e:	b292      	uxth	r2, r2
 8009f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	3302      	adds	r3, #2
 8009f86:	61bb      	str	r3, [r7, #24]
 8009f88:	e007      	b.n	8009f9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	781a      	ldrb	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	3301      	adds	r3, #1
 8009f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1c8      	bne.n	8009f4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2140      	movs	r1, #64	@ 0x40
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 fc5c 	bl	800a880 <UART_WaitOnFlagUntilTimeout>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e006      	b.n	8009fe8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e000      	b.n	8009fe8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009fe6:	2302      	movs	r3, #2
  }
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ff4:	b08c      	sub	sp, #48	@ 0x30
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	431a      	orrs	r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	431a      	orrs	r2, r3
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	4313      	orrs	r3, r2
 800a016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4baa      	ldr	r3, [pc, #680]	@ (800a2c8 <UART_SetConfig+0x2d8>)
 800a020:	4013      	ands	r3, r2
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	6812      	ldr	r2, [r2, #0]
 800a026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a028:	430b      	orrs	r3, r1
 800a02a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a9f      	ldr	r2, [pc, #636]	@ (800a2cc <UART_SetConfig+0x2dc>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d004      	beq.n	800a05c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a058:	4313      	orrs	r3, r2
 800a05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a066:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	6812      	ldr	r2, [r2, #0]
 800a06e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a070:	430b      	orrs	r3, r1
 800a072:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	f023 010f 	bic.w	r1, r3, #15
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a90      	ldr	r2, [pc, #576]	@ (800a2d0 <UART_SetConfig+0x2e0>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d125      	bne.n	800a0e0 <UART_SetConfig+0xf0>
 800a094:	4b8f      	ldr	r3, [pc, #572]	@ (800a2d4 <UART_SetConfig+0x2e4>)
 800a096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d81a      	bhi.n	800a0d8 <UART_SetConfig+0xe8>
 800a0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a8 <UART_SetConfig+0xb8>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0c9 	.word	0x0800a0c9
 800a0b0:	0800a0c1 	.word	0x0800a0c1
 800a0b4:	0800a0d1 	.word	0x0800a0d1
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0be:	e116      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c6:	e112      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ce:	e10e      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d6:	e10a      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0de:	e106      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a7c      	ldr	r2, [pc, #496]	@ (800a2d8 <UART_SetConfig+0x2e8>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d138      	bne.n	800a15c <UART_SetConfig+0x16c>
 800a0ea:	4b7a      	ldr	r3, [pc, #488]	@ (800a2d4 <UART_SetConfig+0x2e4>)
 800a0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0f0:	f003 030c 	and.w	r3, r3, #12
 800a0f4:	2b0c      	cmp	r3, #12
 800a0f6:	d82d      	bhi.n	800a154 <UART_SetConfig+0x164>
 800a0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a100 <UART_SetConfig+0x110>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a135 	.word	0x0800a135
 800a104:	0800a155 	.word	0x0800a155
 800a108:	0800a155 	.word	0x0800a155
 800a10c:	0800a155 	.word	0x0800a155
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a155 	.word	0x0800a155
 800a118:	0800a155 	.word	0x0800a155
 800a11c:	0800a155 	.word	0x0800a155
 800a120:	0800a13d 	.word	0x0800a13d
 800a124:	0800a155 	.word	0x0800a155
 800a128:	0800a155 	.word	0x0800a155
 800a12c:	0800a155 	.word	0x0800a155
 800a130:	0800a14d 	.word	0x0800a14d
 800a134:	2300      	movs	r3, #0
 800a136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a13a:	e0d8      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a13c:	2302      	movs	r3, #2
 800a13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a142:	e0d4      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a144:	2304      	movs	r3, #4
 800a146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14a:	e0d0      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a14c:	2308      	movs	r3, #8
 800a14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a152:	e0cc      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a154:	2310      	movs	r3, #16
 800a156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15a:	e0c8      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a5e      	ldr	r2, [pc, #376]	@ (800a2dc <UART_SetConfig+0x2ec>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d125      	bne.n	800a1b2 <UART_SetConfig+0x1c2>
 800a166:	4b5b      	ldr	r3, [pc, #364]	@ (800a2d4 <UART_SetConfig+0x2e4>)
 800a168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a16c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a170:	2b30      	cmp	r3, #48	@ 0x30
 800a172:	d016      	beq.n	800a1a2 <UART_SetConfig+0x1b2>
 800a174:	2b30      	cmp	r3, #48	@ 0x30
 800a176:	d818      	bhi.n	800a1aa <UART_SetConfig+0x1ba>
 800a178:	2b20      	cmp	r3, #32
 800a17a:	d00a      	beq.n	800a192 <UART_SetConfig+0x1a2>
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d814      	bhi.n	800a1aa <UART_SetConfig+0x1ba>
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <UART_SetConfig+0x19a>
 800a184:	2b10      	cmp	r3, #16
 800a186:	d008      	beq.n	800a19a <UART_SetConfig+0x1aa>
 800a188:	e00f      	b.n	800a1aa <UART_SetConfig+0x1ba>
 800a18a:	2300      	movs	r3, #0
 800a18c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a190:	e0ad      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a192:	2302      	movs	r3, #2
 800a194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a198:	e0a9      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a19a:	2304      	movs	r3, #4
 800a19c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1a0:	e0a5      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1a8:	e0a1      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1b0:	e09d      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a4a      	ldr	r2, [pc, #296]	@ (800a2e0 <UART_SetConfig+0x2f0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d125      	bne.n	800a208 <UART_SetConfig+0x218>
 800a1bc:	4b45      	ldr	r3, [pc, #276]	@ (800a2d4 <UART_SetConfig+0x2e4>)
 800a1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a1c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1c8:	d016      	beq.n	800a1f8 <UART_SetConfig+0x208>
 800a1ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1cc:	d818      	bhi.n	800a200 <UART_SetConfig+0x210>
 800a1ce:	2b80      	cmp	r3, #128	@ 0x80
 800a1d0:	d00a      	beq.n	800a1e8 <UART_SetConfig+0x1f8>
 800a1d2:	2b80      	cmp	r3, #128	@ 0x80
 800a1d4:	d814      	bhi.n	800a200 <UART_SetConfig+0x210>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <UART_SetConfig+0x1f0>
 800a1da:	2b40      	cmp	r3, #64	@ 0x40
 800a1dc:	d008      	beq.n	800a1f0 <UART_SetConfig+0x200>
 800a1de:	e00f      	b.n	800a200 <UART_SetConfig+0x210>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e6:	e082      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ee:	e07e      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f6:	e07a      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fe:	e076      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a200:	2310      	movs	r3, #16
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a206:	e072      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a35      	ldr	r2, [pc, #212]	@ (800a2e4 <UART_SetConfig+0x2f4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d12a      	bne.n	800a268 <UART_SetConfig+0x278>
 800a212:	4b30      	ldr	r3, [pc, #192]	@ (800a2d4 <UART_SetConfig+0x2e4>)
 800a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a21c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a220:	d01a      	beq.n	800a258 <UART_SetConfig+0x268>
 800a222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a226:	d81b      	bhi.n	800a260 <UART_SetConfig+0x270>
 800a228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a22c:	d00c      	beq.n	800a248 <UART_SetConfig+0x258>
 800a22e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a232:	d815      	bhi.n	800a260 <UART_SetConfig+0x270>
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <UART_SetConfig+0x250>
 800a238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a23c:	d008      	beq.n	800a250 <UART_SetConfig+0x260>
 800a23e:	e00f      	b.n	800a260 <UART_SetConfig+0x270>
 800a240:	2300      	movs	r3, #0
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a246:	e052      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a248:	2302      	movs	r3, #2
 800a24a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24e:	e04e      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a250:	2304      	movs	r3, #4
 800a252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a256:	e04a      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a258:	2308      	movs	r3, #8
 800a25a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25e:	e046      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a260:	2310      	movs	r3, #16
 800a262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a266:	e042      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a17      	ldr	r2, [pc, #92]	@ (800a2cc <UART_SetConfig+0x2dc>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d13a      	bne.n	800a2e8 <UART_SetConfig+0x2f8>
 800a272:	4b18      	ldr	r3, [pc, #96]	@ (800a2d4 <UART_SetConfig+0x2e4>)
 800a274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a27c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a280:	d01a      	beq.n	800a2b8 <UART_SetConfig+0x2c8>
 800a282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a286:	d81b      	bhi.n	800a2c0 <UART_SetConfig+0x2d0>
 800a288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a28c:	d00c      	beq.n	800a2a8 <UART_SetConfig+0x2b8>
 800a28e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a292:	d815      	bhi.n	800a2c0 <UART_SetConfig+0x2d0>
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <UART_SetConfig+0x2b0>
 800a298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a29c:	d008      	beq.n	800a2b0 <UART_SetConfig+0x2c0>
 800a29e:	e00f      	b.n	800a2c0 <UART_SetConfig+0x2d0>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a6:	e022      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ae:	e01e      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a2b0:	2304      	movs	r3, #4
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b6:	e01a      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a2b8:	2308      	movs	r3, #8
 800a2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2be:	e016      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2c6:	e012      	b.n	800a2ee <UART_SetConfig+0x2fe>
 800a2c8:	cfff69f3 	.word	0xcfff69f3
 800a2cc:	40008000 	.word	0x40008000
 800a2d0:	40013800 	.word	0x40013800
 800a2d4:	40021000 	.word	0x40021000
 800a2d8:	40004400 	.word	0x40004400
 800a2dc:	40004800 	.word	0x40004800
 800a2e0:	40004c00 	.word	0x40004c00
 800a2e4:	40005000 	.word	0x40005000
 800a2e8:	2310      	movs	r3, #16
 800a2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4aae      	ldr	r2, [pc, #696]	@ (800a5ac <UART_SetConfig+0x5bc>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	f040 8097 	bne.w	800a428 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2fe:	2b08      	cmp	r3, #8
 800a300:	d823      	bhi.n	800a34a <UART_SetConfig+0x35a>
 800a302:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <UART_SetConfig+0x318>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a32d 	.word	0x0800a32d
 800a30c:	0800a34b 	.word	0x0800a34b
 800a310:	0800a335 	.word	0x0800a335
 800a314:	0800a34b 	.word	0x0800a34b
 800a318:	0800a33b 	.word	0x0800a33b
 800a31c:	0800a34b 	.word	0x0800a34b
 800a320:	0800a34b 	.word	0x0800a34b
 800a324:	0800a34b 	.word	0x0800a34b
 800a328:	0800a343 	.word	0x0800a343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a32c:	f7fd fd3c 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800a330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a332:	e010      	b.n	800a356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a334:	4b9e      	ldr	r3, [pc, #632]	@ (800a5b0 <UART_SetConfig+0x5c0>)
 800a336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a338:	e00d      	b.n	800a356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a33a:	f7fd fc9d 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 800a33e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a340:	e009      	b.n	800a356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a348:	e005      	b.n	800a356 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 8130 	beq.w	800a5be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a362:	4a94      	ldr	r2, [pc, #592]	@ (800a5b4 <UART_SetConfig+0x5c4>)
 800a364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a368:	461a      	mov	r2, r3
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a370:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	4613      	mov	r3, r2
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	4413      	add	r3, r2
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d305      	bcc.n	800a38e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d903      	bls.n	800a396 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a394:	e113      	b.n	800a5be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a398:	2200      	movs	r2, #0
 800a39a:	60bb      	str	r3, [r7, #8]
 800a39c:	60fa      	str	r2, [r7, #12]
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a2:	4a84      	ldr	r2, [pc, #528]	@ (800a5b4 <UART_SetConfig+0x5c4>)
 800a3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	603b      	str	r3, [r7, #0]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3b8:	f7f6 fc5e 	bl	8000c78 <__aeabi_uldivmod>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	020b      	lsls	r3, r1, #8
 800a3ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3d2:	0202      	lsls	r2, r0, #8
 800a3d4:	6979      	ldr	r1, [r7, #20]
 800a3d6:	6849      	ldr	r1, [r1, #4]
 800a3d8:	0849      	lsrs	r1, r1, #1
 800a3da:	2000      	movs	r0, #0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	4605      	mov	r5, r0
 800a3e0:	eb12 0804 	adds.w	r8, r2, r4
 800a3e4:	eb43 0905 	adc.w	r9, r3, r5
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	469a      	mov	sl, r3
 800a3f0:	4693      	mov	fp, r2
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f6 fc3d 	bl	8000c78 <__aeabi_uldivmod>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4613      	mov	r3, r2
 800a404:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a40c:	d308      	bcc.n	800a420 <UART_SetConfig+0x430>
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a414:	d204      	bcs.n	800a420 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6a3a      	ldr	r2, [r7, #32]
 800a41c:	60da      	str	r2, [r3, #12]
 800a41e:	e0ce      	b.n	800a5be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a426:	e0ca      	b.n	800a5be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a430:	d166      	bne.n	800a500 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a432:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a436:	2b08      	cmp	r3, #8
 800a438:	d827      	bhi.n	800a48a <UART_SetConfig+0x49a>
 800a43a:	a201      	add	r2, pc, #4	@ (adr r2, 800a440 <UART_SetConfig+0x450>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a46d 	.word	0x0800a46d
 800a448:	0800a475 	.word	0x0800a475
 800a44c:	0800a48b 	.word	0x0800a48b
 800a450:	0800a47b 	.word	0x0800a47b
 800a454:	0800a48b 	.word	0x0800a48b
 800a458:	0800a48b 	.word	0x0800a48b
 800a45c:	0800a48b 	.word	0x0800a48b
 800a460:	0800a483 	.word	0x0800a483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a464:	f7fd fca0 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800a468:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a46a:	e014      	b.n	800a496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a46c:	f7fd fcb2 	bl	8007dd4 <HAL_RCC_GetPCLK2Freq>
 800a470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a472:	e010      	b.n	800a496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a474:	4b4e      	ldr	r3, [pc, #312]	@ (800a5b0 <UART_SetConfig+0x5c0>)
 800a476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a478:	e00d      	b.n	800a496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a47a:	f7fd fbfd 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 800a47e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a480:	e009      	b.n	800a496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a488:	e005      	b.n	800a496 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 8090 	beq.w	800a5be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a2:	4a44      	ldr	r2, [pc, #272]	@ (800a5b4 <UART_SetConfig+0x5c4>)
 800a4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b0:	005a      	lsls	r2, r3, #1
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	441a      	add	r2, r3
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	2b0f      	cmp	r3, #15
 800a4c8:	d916      	bls.n	800a4f8 <UART_SetConfig+0x508>
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4d0:	d212      	bcs.n	800a4f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f023 030f 	bic.w	r3, r3, #15
 800a4da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	085b      	lsrs	r3, r3, #1
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	8bfb      	ldrh	r3, [r7, #30]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	8bfa      	ldrh	r2, [r7, #30]
 800a4f4:	60da      	str	r2, [r3, #12]
 800a4f6:	e062      	b.n	800a5be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4fe:	e05e      	b.n	800a5be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a500:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a504:	2b08      	cmp	r3, #8
 800a506:	d828      	bhi.n	800a55a <UART_SetConfig+0x56a>
 800a508:	a201      	add	r2, pc, #4	@ (adr r2, 800a510 <UART_SetConfig+0x520>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	0800a55b 	.word	0x0800a55b
 800a520:	0800a54b 	.word	0x0800a54b
 800a524:	0800a55b 	.word	0x0800a55b
 800a528:	0800a55b 	.word	0x0800a55b
 800a52c:	0800a55b 	.word	0x0800a55b
 800a530:	0800a553 	.word	0x0800a553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a534:	f7fd fc38 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800a538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a53a:	e014      	b.n	800a566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a53c:	f7fd fc4a 	bl	8007dd4 <HAL_RCC_GetPCLK2Freq>
 800a540:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a542:	e010      	b.n	800a566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a544:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b0 <UART_SetConfig+0x5c0>)
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a548:	e00d      	b.n	800a566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54a:	f7fd fb95 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 800a54e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a550:	e009      	b.n	800a566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a558:	e005      	b.n	800a566 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a564:	bf00      	nop
    }

    if (pclk != 0U)
 800a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d028      	beq.n	800a5be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a570:	4a10      	ldr	r2, [pc, #64]	@ (800a5b4 <UART_SetConfig+0x5c4>)
 800a572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a576:	461a      	mov	r2, r3
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	441a      	add	r2, r3
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	2b0f      	cmp	r3, #15
 800a594:	d910      	bls.n	800a5b8 <UART_SetConfig+0x5c8>
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a59c:	d20c      	bcs.n	800a5b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60da      	str	r2, [r3, #12]
 800a5a8:	e009      	b.n	800a5be <UART_SetConfig+0x5ce>
 800a5aa:	bf00      	nop
 800a5ac:	40008000 	.word	0x40008000
 800a5b0:	00f42400 	.word	0x00f42400
 800a5b4:	0801eafc 	.word	0x0801eafc
      }
      else
      {
        ret = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3730      	adds	r7, #48	@ 0x30
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a5e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00a      	beq.n	800a656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00a      	beq.n	800a678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	430a      	orrs	r2, r1
 800a676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a67c:	f003 0310 	and.w	r3, r3, #16
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00a      	beq.n	800a69a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d01a      	beq.n	800a6fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e6:	d10a      	bne.n	800a6fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	605a      	str	r2, [r3, #4]
  }
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b098      	sub	sp, #96	@ 0x60
 800a730:	af02      	add	r7, sp, #8
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a73c:	f7fb f92e 	bl	800599c <HAL_GetTick>
 800a740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0308 	and.w	r3, r3, #8
 800a74c:	2b08      	cmp	r3, #8
 800a74e:	d12f      	bne.n	800a7b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a758:	2200      	movs	r2, #0
 800a75a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f88e 	bl	800a880 <UART_WaitOnFlagUntilTimeout>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d022      	beq.n	800a7b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a77e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a788:	647b      	str	r3, [r7, #68]	@ 0x44
 800a78a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a78e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e6      	bne.n	800a76a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e063      	b.n	800a878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d149      	bne.n	800a852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f857 	bl	800a880 <UART_WaitOnFlagUntilTimeout>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d03c      	beq.n	800a852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e6      	bne.n	800a7d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	60fb      	str	r3, [r7, #12]
   return(result);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f023 0301 	bic.w	r3, r3, #1
 800a820:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a82a:	61fa      	str	r2, [r7, #28]
 800a82c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	69b9      	ldr	r1, [r7, #24]
 800a830:	69fa      	ldr	r2, [r7, #28]
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	617b      	str	r3, [r7, #20]
   return(result);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e5      	bne.n	800a80a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e012      	b.n	800a878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2220      	movs	r2, #32
 800a856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3758      	adds	r7, #88	@ 0x58
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	4613      	mov	r3, r2
 800a88e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a890:	e04f      	b.n	800a932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a898:	d04b      	beq.n	800a932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a89a:	f7fb f87f 	bl	800599c <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d302      	bcc.n	800a8b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e04e      	b.n	800a952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 0304 	and.w	r3, r3, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d037      	beq.n	800a932 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b80      	cmp	r3, #128	@ 0x80
 800a8c6:	d034      	beq.n	800a932 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b40      	cmp	r3, #64	@ 0x40
 800a8cc:	d031      	beq.n	800a932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f003 0308 	and.w	r3, r3, #8
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d110      	bne.n	800a8fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f838 	bl	800a95a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e029      	b.n	800a952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a90c:	d111      	bne.n	800a932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f81e 	bl	800a95a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2220      	movs	r2, #32
 800a922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e00f      	b.n	800a952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	69da      	ldr	r2, [r3, #28]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4013      	ands	r3, r2
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	bf0c      	ite	eq
 800a942:	2301      	moveq	r3, #1
 800a944:	2300      	movne	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d0a0      	beq.n	800a892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b095      	sub	sp, #84	@ 0x54
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96a:	e853 3f00 	ldrex	r3, [r3]
 800a96e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	461a      	mov	r2, r3
 800a97e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a980:	643b      	str	r3, [r7, #64]	@ 0x40
 800a982:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a988:	e841 2300 	strex	r3, r2, [r1]
 800a98c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e6      	bne.n	800a962 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3308      	adds	r3, #8
 800a99a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	e853 3f00 	ldrex	r3, [r3]
 800a9a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9aa:	f023 0301 	bic.w	r3, r3, #1
 800a9ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e3      	bne.n	800a994 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d118      	bne.n	800aa06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	f023 0310 	bic.w	r3, r3, #16
 800a9e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f2:	61bb      	str	r3, [r7, #24]
 800a9f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	6979      	ldr	r1, [r7, #20]
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	613b      	str	r3, [r7, #16]
   return(result);
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e6      	bne.n	800a9d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa1a:	bf00      	nop
 800aa1c:	3754      	adds	r7, #84	@ 0x54
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d101      	bne.n	800aa3c <HAL_UARTEx_DisableFifoMode+0x16>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e027      	b.n	800aa8c <HAL_UARTEx_DisableFifoMode+0x66>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2224      	movs	r2, #36	@ 0x24
 800aa48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 0201 	bic.w	r2, r2, #1
 800aa62:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d101      	bne.n	800aab0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaac:	2302      	movs	r3, #2
 800aaae:	e02d      	b.n	800ab0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2224      	movs	r2, #36	@ 0x24
 800aabc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f022 0201 	bic.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f84f 	bl	800ab90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2220      	movs	r2, #32
 800aafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e02d      	b.n	800ab88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2224      	movs	r2, #36	@ 0x24
 800ab38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0201 	bic.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f811 	bl	800ab90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d108      	bne.n	800abb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abb0:	e031      	b.n	800ac16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abb2:	2308      	movs	r3, #8
 800abb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abb6:	2308      	movs	r3, #8
 800abb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	0e5b      	lsrs	r3, r3, #25
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	0f5b      	lsrs	r3, r3, #29
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	7b3a      	ldrb	r2, [r7, #12]
 800abde:	4911      	ldr	r1, [pc, #68]	@ (800ac24 <UARTEx_SetNbDataToProcess+0x94>)
 800abe0:	5c8a      	ldrb	r2, [r1, r2]
 800abe2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abe6:	7b3a      	ldrb	r2, [r7, #12]
 800abe8:	490f      	ldr	r1, [pc, #60]	@ (800ac28 <UARTEx_SetNbDataToProcess+0x98>)
 800abea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abec:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	7b7a      	ldrb	r2, [r7, #13]
 800abfc:	4909      	ldr	r1, [pc, #36]	@ (800ac24 <UARTEx_SetNbDataToProcess+0x94>)
 800abfe:	5c8a      	ldrb	r2, [r1, r2]
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac04:	7b7a      	ldrb	r2, [r7, #13]
 800ac06:	4908      	ldr	r1, [pc, #32]	@ (800ac28 <UARTEx_SetNbDataToProcess+0x98>)
 800ac08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	0801eb14 	.word	0x0801eb14
 800ac28:	0801eb1c 	.word	0x0801eb1c

0800ac2c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 fc8a 	bl	800c556 <VL53L0X_get_offset_calibration_data_micro_meter>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800ac46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
	...

0800ac54 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800ac54:	b5b0      	push	{r4, r5, r7, lr}
 800ac56:	b096      	sub	sp, #88	@ 0x58
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800ac62:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d107      	bne.n	800ac7a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2188      	movs	r1, #136	@ 0x88
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f004 fbe4 	bl	800f43c <VL53L0X_WrByte>
 800ac74:	4603      	mov	r3, r0
 800ac76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac88:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ac92:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a9e      	ldr	r2, [pc, #632]	@ (800af14 <VL53L0X_DataInit+0x2c0>)
 800ac9a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a9d      	ldr	r2, [pc, #628]	@ (800af18 <VL53L0X_DataInit+0x2c4>)
 800aca2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800acac:	f107 0310 	add.w	r3, r7, #16
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fac0 	bl	800b238 <VL53L0X_GetDeviceParameters>
 800acb8:	4603      	mov	r3, r0
 800acba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800acbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d112      	bne.n	800acec <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800acc6:	2300      	movs	r3, #0
 800acc8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800acca:	2300      	movs	r3, #0
 800accc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f103 0410 	add.w	r4, r3, #16
 800acd4:	f107 0510 	add.w	r5, r7, #16
 800acd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ace0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ace2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ace4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ace8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2264      	movs	r2, #100	@ 0x64
 800acf0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800acfa:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ad04:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800ad0e:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	2180      	movs	r1, #128	@ 0x80
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f004 fb8c 	bl	800f43c <VL53L0X_WrByte>
 800ad24:	4603      	mov	r3, r0
 800ad26:	461a      	mov	r2, r3
 800ad28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad32:	2201      	movs	r2, #1
 800ad34:	21ff      	movs	r1, #255	@ 0xff
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f004 fb80 	bl	800f43c <VL53L0X_WrByte>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad44:	4313      	orrs	r3, r2
 800ad46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f004 fb74 	bl	800f43c <VL53L0X_WrByte>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800ad62:	f107 030f 	add.w	r3, r7, #15
 800ad66:	461a      	mov	r2, r3
 800ad68:	2191      	movs	r1, #145	@ 0x91
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f004 fbe8 	bl	800f540 <VL53L0X_RdByte>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800ad7e:	7bfa      	ldrb	r2, [r7, #15]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ad86:	2201      	movs	r2, #1
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f004 fb56 	bl	800f43c <VL53L0X_WrByte>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	21ff      	movs	r1, #255	@ 0xff
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f004 fb4a 	bl	800f43c <VL53L0X_WrByte>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adb0:	4313      	orrs	r3, r2
 800adb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800adb6:	2200      	movs	r2, #0
 800adb8:	2180      	movs	r1, #128	@ 0x80
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f004 fb3e 	bl	800f43c <VL53L0X_WrByte>
 800adc0:	4603      	mov	r3, r0
 800adc2:	461a      	mov	r2, r3
 800adc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adc8:	4313      	orrs	r3, r2
 800adca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800adce:	2300      	movs	r3, #0
 800add0:	653b      	str	r3, [r7, #80]	@ 0x50
 800add2:	e014      	b.n	800adfe <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800add4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800add8:	2b00      	cmp	r3, #0
 800adda:	d114      	bne.n	800ae06 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800addc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adde:	b29b      	uxth	r3, r3
 800ade0:	2201      	movs	r2, #1
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fd19 	bl	800b81c <VL53L0X_SetLimitCheckEnable>
 800adea:	4603      	mov	r3, r0
 800adec:	461a      	mov	r2, r3
 800adee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adf2:	4313      	orrs	r3, r2
 800adf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800adf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adfa:	3301      	adds	r3, #1
 800adfc:	653b      	str	r3, [r7, #80]	@ 0x50
 800adfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae00:	2b05      	cmp	r3, #5
 800ae02:	dde7      	ble.n	800add4 <VL53L0X_DataInit+0x180>
 800ae04:	e000      	b.n	800ae08 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800ae06:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800ae08:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d107      	bne.n	800ae20 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ae10:	2200      	movs	r2, #0
 800ae12:	2102      	movs	r1, #2
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fd01 	bl	800b81c <VL53L0X_SetLimitCheckEnable>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ae20:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d107      	bne.n	800ae38 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2103      	movs	r1, #3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fcf5 	bl	800b81c <VL53L0X_SetLimitCheckEnable>
 800ae32:	4603      	mov	r3, r0
 800ae34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ae38:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d107      	bne.n	800ae50 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ae40:	2200      	movs	r2, #0
 800ae42:	2104      	movs	r1, #4
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fce9 	bl	800b81c <VL53L0X_SetLimitCheckEnable>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ae50:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d107      	bne.n	800ae68 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2105      	movs	r1, #5
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fcdd 	bl	800b81c <VL53L0X_SetLimitCheckEnable>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800ae68:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ae70:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800ae74:	2100      	movs	r1, #0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fd80 	bl	800b97c <VL53L0X_SetLimitCheckValue>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae82:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d108      	bne.n	800ae9c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ae8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ae8e:	2101      	movs	r1, #1
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fd73 	bl	800b97c <VL53L0X_SetLimitCheckValue>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800aea4:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 800aea8:	2102      	movs	r1, #2
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fd66 	bl	800b97c <VL53L0X_SetLimitCheckValue>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aeb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d107      	bne.n	800aece <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800aebe:	2200      	movs	r2, #0
 800aec0:	2103      	movs	r1, #3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fd5a 	bl	800b97c <VL53L0X_SetLimitCheckValue>
 800aec8:	4603      	mov	r3, r0
 800aeca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aece:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10f      	bne.n	800aef6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	22ff      	movs	r2, #255	@ 0xff
 800aeda:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aede:	22ff      	movs	r2, #255	@ 0xff
 800aee0:	2101      	movs	r1, #1
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f004 faaa 	bl	800f43c <VL53L0X_WrByte>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800aef6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d103      	bne.n	800af06 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800af06:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3758      	adds	r7, #88	@ 0x58
 800af0e:	46bd      	mov	sp, r7
 800af10:	bdb0      	pop	{r4, r5, r7, pc}
 800af12:	bf00      	nop
 800af14:	00016b85 	.word	0x00016b85
 800af18:	000970a4 	.word	0x000970a4

0800af1c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800af1c:	b5b0      	push	{r4, r5, r7, lr}
 800af1e:	b09e      	sub	sp, #120	@ 0x78
 800af20:	af02      	add	r7, sp, #8
 800af22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af24:	2300      	movs	r3, #0
 800af26:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800af2a:	f107 031c 	add.w	r3, r7, #28
 800af2e:	2240      	movs	r2, #64	@ 0x40
 800af30:	2100      	movs	r1, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f005 fa38 	bl	80103a8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800af58:	2101      	movs	r1, #1
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f002 fa3e 	bl	800d3dc <VL53L0X_get_info_from_device>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800af6c:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800af74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800af78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d80d      	bhi.n	800af9c <VL53L0X_StaticInit+0x80>
 800af80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af84:	2b01      	cmp	r3, #1
 800af86:	d102      	bne.n	800af8e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800af88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	d806      	bhi.n	800af9c <VL53L0X_StaticInit+0x80>
 800af8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10e      	bne.n	800afb4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800af96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af98:	2b0c      	cmp	r3, #12
 800af9a:	d90b      	bls.n	800afb4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800af9c:	f107 0218 	add.w	r2, r7, #24
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 fcd0 	bl	800c94c <VL53L0X_perform_ref_spad_management>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800afb2:	e009      	b.n	800afc8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800afb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afb8:	461a      	mov	r2, r3
 800afba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f001 fed1 	bl	800cd64 <VL53L0X_set_reference_spads>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800afc8:	4b93      	ldr	r3, [pc, #588]	@ (800b218 <VL53L0X_StaticInit+0x2fc>)
 800afca:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800afcc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10f      	bne.n	800aff4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800afda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800afde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d104      	bne.n	800aff0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800afec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afee:	e001      	b.n	800aff4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800aff0:	4b89      	ldr	r3, [pc, #548]	@ (800b218 <VL53L0X_StaticInit+0x2fc>)
 800aff2:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800aff4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d106      	bne.n	800b00a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800affc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f003 fb06 	bl	800e610 <VL53L0X_load_tuning_settings>
 800b004:	4603      	mov	r3, r0
 800b006:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b00a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b012:	2300      	movs	r3, #0
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	2304      	movs	r3, #4
 800b018:	2200      	movs	r2, #0
 800b01a:	2100      	movs	r1, #0
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 f8cd 	bl	800c1bc <VL53L0X_SetGpioConfig>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b028:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d121      	bne.n	800b074 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b030:	2201      	movs	r2, #1
 800b032:	21ff      	movs	r1, #255	@ 0xff
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f004 fa01 	bl	800f43c <VL53L0X_WrByte>
 800b03a:	4603      	mov	r3, r0
 800b03c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b040:	f107 031a 	add.w	r3, r7, #26
 800b044:	461a      	mov	r2, r3
 800b046:	2184      	movs	r1, #132	@ 0x84
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f004 faa3 	bl	800f594 <VL53L0X_RdWord>
 800b04e:	4603      	mov	r3, r0
 800b050:	461a      	mov	r2, r3
 800b052:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b056:	4313      	orrs	r3, r2
 800b058:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b05c:	2200      	movs	r2, #0
 800b05e:	21ff      	movs	r1, #255	@ 0xff
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f004 f9eb 	bl	800f43c <VL53L0X_WrByte>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b06e:	4313      	orrs	r3, r2
 800b070:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b074:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b07c:	8b7b      	ldrh	r3, [r7, #26]
 800b07e:	011a      	lsls	r2, r3, #4
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b086:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d108      	bne.n	800b0a0 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b08e:	f107 031c 	add.w	r3, r7, #28
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f8cf 	bl	800b238 <VL53L0X_GetDeviceParameters>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b0a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d110      	bne.n	800b0ca <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b0a8:	f107 0319 	add.w	r3, r7, #25
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f991 	bl	800b3d6 <VL53L0X_GetFractionEnable>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b0ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d103      	bne.n	800b0ca <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b0c2:	7e7a      	ldrb	r2, [r7, #25]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b0ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10e      	bne.n	800b0f0 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f103 0410 	add.w	r4, r3, #16
 800b0d8:	f107 051c 	add.w	r5, r7, #28
 800b0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b0ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b0f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d111      	bne.n	800b11c <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 800b0f8:	f107 0319 	add.w	r3, r7, #25
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	2101      	movs	r1, #1
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f004 fa1d 	bl	800f540 <VL53L0X_RdByte>
 800b106:	4603      	mov	r3, r0
 800b108:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b10c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b110:	2b00      	cmp	r3, #0
 800b112:	d103      	bne.n	800b11c <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b114:	7e7a      	ldrb	r2, [r7, #25]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b11c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b124:	2200      	movs	r2, #0
 800b126:	2100      	movs	r1, #0
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f9b1 	bl	800b490 <VL53L0X_SetSequenceStepEnable>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b134:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d107      	bne.n	800b14c <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b13c:	2200      	movs	r2, #0
 800b13e:	2102      	movs	r1, #2
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f9a5 	bl	800b490 <VL53L0X_SetSequenceStepEnable>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b14c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2203      	movs	r2, #3
 800b158:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b15c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b160:	2b00      	cmp	r3, #0
 800b162:	d109      	bne.n	800b178 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b164:	f107 0313 	add.w	r3, r7, #19
 800b168:	461a      	mov	r2, r3
 800b16a:	2100      	movs	r1, #0
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f977 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800b172:	4603      	mov	r3, r0
 800b174:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b178:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d103      	bne.n	800b188 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b180:	7cfa      	ldrb	r2, [r7, #19]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b188:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d109      	bne.n	800b1a4 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b190:	f107 0313 	add.w	r3, r7, #19
 800b194:	461a      	mov	r2, r3
 800b196:	2101      	movs	r1, #1
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f961 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d103      	bne.n	800b1b4 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b1ac:	7cfa      	ldrb	r2, [r7, #19]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b1b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 800b1bc:	f107 030c 	add.w	r3, r7, #12
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	2103      	movs	r1, #3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f002 fe89 	bl	800dedc <get_sequence_step_timeout>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d103      	bne.n	800b1e0 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b1e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d109      	bne.n	800b1fc <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 800b1e8:	f107 030c 	add.w	r3, r7, #12
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f002 fe73 	bl	800dedc <get_sequence_step_timeout>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b200:	2b00      	cmp	r3, #0
 800b202:	d103      	bne.n	800b20c <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b20c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800b210:	4618      	mov	r0, r3
 800b212:	3770      	adds	r7, #112	@ 0x70
 800b214:	46bd      	mov	sp, r7
 800b216:	bdb0      	pop	{r4, r5, r7, pc}
 800b218:	20040044 	.word	0x20040044

0800b21c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b224:	239d      	movs	r3, #157	@ 0x9d
 800b226:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b242:	2300      	movs	r3, #0
 800b244:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f8b0 	bl	800b3b0 <VL53L0X_GetDeviceMode>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d107      	bne.n	800b26c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa5e 	bl	800b724 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2200      	movs	r2, #0
 800b278:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d107      	bne.n	800b292 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	3310      	adds	r3, #16
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fa94 	bl	800b7b6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b28e:	4603      	mov	r3, r0
 800b290:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d107      	bne.n	800b2aa <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	3314      	adds	r3, #20
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7ff fcc3 	bl	800ac2c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d134      	bne.n	800b31c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60bb      	str	r3, [r7, #8]
 800b2b6:	e02a      	b.n	800b30e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d12a      	bne.n	800b316 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	b299      	uxth	r1, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fbb4 	bl	800ba40 <VL53L0X_GetLimitCheckValue>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d117      	bne.n	800b31a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	b299      	uxth	r1, r3
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	3318      	adds	r3, #24
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fb1b 	bl	800b934 <VL53L0X_GetLimitCheckEnable>
 800b2fe:	4603      	mov	r3, r0
 800b300:	461a      	mov	r2, r3
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	4313      	orrs	r3, r2
 800b306:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	3301      	adds	r3, #1
 800b30c:	60bb      	str	r3, [r7, #8]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b05      	cmp	r3, #5
 800b312:	ddd1      	ble.n	800b2b8 <VL53L0X_GetDeviceParameters+0x80>
 800b314:	e002      	b.n	800b31c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b316:	bf00      	nop
 800b318:	e000      	b.n	800b31c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b31a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d107      	bne.n	800b334 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	333c      	adds	r3, #60	@ 0x3c
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fc16 	bl	800bb5c <VL53L0X_GetWrapAroundCheckEnable>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d107      	bne.n	800b34c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	3304      	adds	r3, #4
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f879 	bl	800b43a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	2b15      	cmp	r3, #21
 800b36c:	bf8c      	ite	hi
 800b36e:	2201      	movhi	r2, #1
 800b370:	2200      	movls	r2, #0
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	2a00      	cmp	r2, #0
 800b376:	d10f      	bne.n	800b398 <VL53L0X_SetDeviceMode+0x40>
 800b378:	4a0c      	ldr	r2, [pc, #48]	@ (800b3ac <VL53L0X_SetDeviceMode+0x54>)
 800b37a:	fa22 f303 	lsr.w	r3, r2, r3
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	bf14      	ite	ne
 800b386:	2301      	movne	r3, #1
 800b388:	2300      	moveq	r3, #0
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	78fa      	ldrb	r2, [r7, #3]
 800b394:	741a      	strb	r2, [r3, #16]
		break;
 800b396:	e001      	b.n	800b39c <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b398:	23f8      	movs	r3, #248	@ 0xf8
 800b39a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	0030000b 	.word	0x0030000b

0800b3b0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7c1a      	ldrb	r2, [r3, #16]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	2109      	movs	r1, #9
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f004 f8a9 	bl	800f540 <VL53L0X_RdByte>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	b2da      	uxtb	r2, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f002 ff62 	bl	800e2ee <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f003 f82f 	bl	800e4ae <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	460b      	mov	r3, r1
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b46e:	2300      	movs	r3, #0
 800b470:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	4619      	mov	r1, r3
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f002 ff01 	bl	800e280 <VL53L0X_get_vcsel_pulse_period>
 800b47e:	4603      	mov	r3, r0
 800b480:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
 800b49c:	4613      	mov	r3, r2
 800b49e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b4ac:	f107 030f 	add.w	r3, r7, #15
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f004 f843 	bl	800f540 <VL53L0X_RdByte>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d159      	bne.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 800b4ca:	78bb      	ldrb	r3, [r7, #2]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d12b      	bne.n	800b528 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b4d0:	78fb      	ldrb	r3, [r7, #3]
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d825      	bhi.n	800b522 <VL53L0X_SetSequenceStepEnable+0x92>
 800b4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4dc <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4dc:	0800b4f1 	.word	0x0800b4f1
 800b4e0:	0800b4fb 	.word	0x0800b4fb
 800b4e4:	0800b505 	.word	0x0800b505
 800b4e8:	0800b50f 	.word	0x0800b50f
 800b4ec:	0800b519 	.word	0x0800b519
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b4f0:	7dbb      	ldrb	r3, [r7, #22]
 800b4f2:	f043 0310 	orr.w	r3, r3, #16
 800b4f6:	75bb      	strb	r3, [r7, #22]
				break;
 800b4f8:	e041      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b4fa:	7dbb      	ldrb	r3, [r7, #22]
 800b4fc:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800b500:	75bb      	strb	r3, [r7, #22]
				break;
 800b502:	e03c      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b504:	7dbb      	ldrb	r3, [r7, #22]
 800b506:	f043 0304 	orr.w	r3, r3, #4
 800b50a:	75bb      	strb	r3, [r7, #22]
				break;
 800b50c:	e037      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b50e:	7dbb      	ldrb	r3, [r7, #22]
 800b510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b514:	75bb      	strb	r3, [r7, #22]
				break;
 800b516:	e032      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b518:	7dbb      	ldrb	r3, [r7, #22]
 800b51a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b51e:	75bb      	strb	r3, [r7, #22]
				break;
 800b520:	e02d      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b522:	23fc      	movs	r3, #252	@ 0xfc
 800b524:	75fb      	strb	r3, [r7, #23]
 800b526:	e02a      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b528:	78fb      	ldrb	r3, [r7, #3]
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	d825      	bhi.n	800b57a <VL53L0X_SetSequenceStepEnable+0xea>
 800b52e:	a201      	add	r2, pc, #4	@ (adr r2, 800b534 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b549 	.word	0x0800b549
 800b538:	0800b553 	.word	0x0800b553
 800b53c:	0800b55d 	.word	0x0800b55d
 800b540:	0800b567 	.word	0x0800b567
 800b544:	0800b571 	.word	0x0800b571
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b548:	7dbb      	ldrb	r3, [r7, #22]
 800b54a:	f023 0310 	bic.w	r3, r3, #16
 800b54e:	75bb      	strb	r3, [r7, #22]
				break;
 800b550:	e015      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b552:	7dbb      	ldrb	r3, [r7, #22]
 800b554:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800b558:	75bb      	strb	r3, [r7, #22]
				break;
 800b55a:	e010      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b55c:	7dbb      	ldrb	r3, [r7, #22]
 800b55e:	f023 0304 	bic.w	r3, r3, #4
 800b562:	75bb      	strb	r3, [r7, #22]
				break;
 800b564:	e00b      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b566:	7dbb      	ldrb	r3, [r7, #22]
 800b568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b56c:	75bb      	strb	r3, [r7, #22]
				break;
 800b56e:	e006      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b570:	7dbb      	ldrb	r3, [r7, #22]
 800b572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b576:	75bb      	strb	r3, [r7, #22]
				break;
 800b578:	e001      	b.n	800b57e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b57a:	23fc      	movs	r3, #252	@ 0xfc
 800b57c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	7dba      	ldrb	r2, [r7, #22]
 800b582:	429a      	cmp	r2, r3
 800b584:	d01e      	beq.n	800b5c4 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d107      	bne.n	800b59e <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800b58e:	7dbb      	ldrb	r3, [r7, #22]
 800b590:	461a      	mov	r2, r3
 800b592:	2101      	movs	r1, #1
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f003 ff51 	bl	800f43c <VL53L0X_WrByte>
 800b59a:	4603      	mov	r3, r0
 800b59c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b59e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d103      	bne.n	800b5ae <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7dba      	ldrb	r2, [r7, #22]
 800b5aa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b5bc:	6939      	ldr	r1, [r7, #16]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff ff28 	bl	800b414 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b5c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	607b      	str	r3, [r7, #4]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	72fb      	strb	r3, [r7, #11]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b5ec:	7afb      	ldrb	r3, [r7, #11]
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d836      	bhi.n	800b660 <sequence_step_enabled+0x90>
 800b5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f8 <sequence_step_enabled+0x28>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b60d 	.word	0x0800b60d
 800b5fc:	0800b61f 	.word	0x0800b61f
 800b600:	0800b631 	.word	0x0800b631
 800b604:	0800b643 	.word	0x0800b643
 800b608:	0800b655 	.word	0x0800b655
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800b60c:	7abb      	ldrb	r3, [r7, #10]
 800b60e:	111b      	asrs	r3, r3, #4
 800b610:	b2db      	uxtb	r3, r3
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	b2da      	uxtb	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	701a      	strb	r2, [r3, #0]
		break;
 800b61c:	e022      	b.n	800b664 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800b61e:	7abb      	ldrb	r3, [r7, #10]
 800b620:	10db      	asrs	r3, r3, #3
 800b622:	b2db      	uxtb	r3, r3
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	701a      	strb	r2, [r3, #0]
		break;
 800b62e:	e019      	b.n	800b664 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800b630:	7abb      	ldrb	r3, [r7, #10]
 800b632:	109b      	asrs	r3, r3, #2
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	701a      	strb	r2, [r3, #0]
		break;
 800b640:	e010      	b.n	800b664 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800b642:	7abb      	ldrb	r3, [r7, #10]
 800b644:	119b      	asrs	r3, r3, #6
 800b646:	b2db      	uxtb	r3, r3
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	701a      	strb	r2, [r3, #0]
		break;
 800b652:	e007      	b.n	800b664 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800b654:	7abb      	ldrb	r3, [r7, #10]
 800b656:	09db      	lsrs	r3, r3, #7
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	701a      	strb	r2, [r3, #0]
		break;
 800b65e:	e001      	b.n	800b664 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b660:	23fc      	movs	r3, #252	@ 0xfc
 800b662:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b686:	f107 030e 	add.w	r3, r7, #14
 800b68a:	461a      	mov	r2, r3
 800b68c:	2101      	movs	r1, #1
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f003 ff56 	bl	800f540 <VL53L0X_RdByte>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800b698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d107      	bne.n	800b6b0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800b6a0:	7bba      	ldrb	r2, [r7, #14]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff ff92 	bl	800b5d0 <sequence_step_enabled>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d108      	bne.n	800b6ca <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800b6b8:	7bba      	ldrb	r2, [r7, #14]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	3302      	adds	r3, #2
 800b6be:	2101      	movs	r1, #1
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ff85 	bl	800b5d0 <sequence_step_enabled>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d108      	bne.n	800b6e4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800b6d2:	7bba      	ldrb	r2, [r7, #14]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	2102      	movs	r1, #2
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7ff ff78 	bl	800b5d0 <sequence_step_enabled>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d108      	bne.n	800b6fe <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800b6ec:	7bba      	ldrb	r2, [r7, #14]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	3303      	adds	r3, #3
 800b6f2:	2103      	movs	r1, #3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff ff6b 	bl	800b5d0 <sequence_step_enabled>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b6fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d108      	bne.n	800b718 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800b706:	7bba      	ldrb	r2, [r7, #14]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	3304      	adds	r3, #4
 800b70c:	2104      	movs	r1, #4
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff ff5e 	bl	800b5d0 <sequence_step_enabled>
 800b714:	4603      	mov	r3, r0
 800b716:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800b732:	f107 030c 	add.w	r3, r7, #12
 800b736:	461a      	mov	r2, r3
 800b738:	21f8      	movs	r1, #248	@ 0xf8
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f003 ff2a 	bl	800f594 <VL53L0X_RdWord>
 800b740:	4603      	mov	r3, r0
 800b742:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800b744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d108      	bne.n	800b75e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800b74c:	f107 0308 	add.w	r3, r7, #8
 800b750:	461a      	mov	r2, r3
 800b752:	2104      	movs	r1, #4
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f003 ff53 	bl	800f600 <VL53L0X_RdDWord>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10c      	bne.n	800b780 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800b766:	89bb      	ldrh	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d005      	beq.n	800b778 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	89ba      	ldrh	r2, [r7, #12]
 800b770:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b796:	2300      	movs	r3, #0
 800b798:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	7f1b      	ldrb	r3, [r3, #28]
 800b79e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	7bba      	ldrb	r2, [r7, #14]
 800b7a4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b086      	sub	sp, #24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800b7c4:	f107 030e 	add.w	r3, r7, #14
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2120      	movs	r1, #32
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f003 fee1 	bl	800f594 <VL53L0X_RdWord>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800b7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d118      	bne.n	800b810 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800b7de:	89fb      	ldrh	r3, [r7, #14]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d109      	bne.n	800b7f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	771a      	strb	r2, [r3, #28]
 800b7f6:	e00b      	b.n	800b810 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800b7f8:	89fb      	ldrh	r3, [r7, #14]
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b810:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	807b      	strh	r3, [r7, #2]
 800b828:	4613      	mov	r3, r2
 800b82a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b83c:	887b      	ldrh	r3, [r7, #2]
 800b83e:	2b05      	cmp	r3, #5
 800b840:	d902      	bls.n	800b848 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b842:	23fc      	movs	r3, #252	@ 0xfc
 800b844:	75fb      	strb	r3, [r7, #23]
 800b846:	e05b      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800b848:	787b      	ldrb	r3, [r7, #1]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800b856:	2301      	movs	r3, #1
 800b858:	73bb      	strb	r3, [r7, #14]
 800b85a:	e00a      	b.n	800b872 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b85c:	887b      	ldrh	r3, [r7, #2]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	330c      	adds	r3, #12
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800b86e:	2301      	movs	r3, #1
 800b870:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800b872:	887b      	ldrh	r3, [r7, #2]
 800b874:	2b05      	cmp	r3, #5
 800b876:	d841      	bhi.n	800b8fc <VL53L0X_SetLimitCheckEnable+0xe0>
 800b878:	a201      	add	r2, pc, #4	@ (adr r2, 800b880 <VL53L0X_SetLimitCheckEnable+0x64>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b899 	.word	0x0800b899
 800b884:	0800b8a3 	.word	0x0800b8a3
 800b888:	0800b8b9 	.word	0x0800b8b9
 800b88c:	0800b8c3 	.word	0x0800b8c3
 800b890:	0800b8cd 	.word	0x0800b8cd
 800b894:	0800b8e5 	.word	0x0800b8e5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7bfa      	ldrb	r2, [r7, #15]
 800b89c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800b8a0:	e02e      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	2144      	movs	r1, #68	@ 0x44
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f003 fde9 	bl	800f484 <VL53L0X_WrWord>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	75fb      	strb	r3, [r7, #23]

			break;
 800b8b6:	e023      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7bfa      	ldrb	r2, [r7, #15]
 800b8bc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b8c0:	e01e      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	7bfa      	ldrb	r2, [r7, #15]
 800b8c6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b8ca:	e019      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b8d2:	7b7b      	ldrb	r3, [r7, #13]
 800b8d4:	22fe      	movs	r2, #254	@ 0xfe
 800b8d6:	2160      	movs	r1, #96	@ 0x60
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f003 fdfd 	bl	800f4d8 <VL53L0X_UpdateByte>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800b8e2:	e00d      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	011b      	lsls	r3, r3, #4
 800b8e8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800b8ea:	7b7b      	ldrb	r3, [r7, #13]
 800b8ec:	22ef      	movs	r2, #239	@ 0xef
 800b8ee:	2160      	movs	r1, #96	@ 0x60
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f003 fdf1 	bl	800f4d8 <VL53L0X_UpdateByte>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800b8fa:	e001      	b.n	800b900 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8fc:	23fc      	movs	r3, #252	@ 0xfc
 800b8fe:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10f      	bne.n	800b928 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800b908:	787b      	ldrb	r3, [r7, #1]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b90e:	887b      	ldrh	r3, [r7, #2]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4413      	add	r3, r2
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800b91a:	e005      	b.n	800b928 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b91c:	887b      	ldrh	r3, [r7, #2]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4413      	add	r3, r2
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	460b      	mov	r3, r1
 800b93e:	607a      	str	r2, [r7, #4]
 800b940:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b942:	2300      	movs	r3, #0
 800b944:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b946:	897b      	ldrh	r3, [r7, #10]
 800b948:	2b05      	cmp	r3, #5
 800b94a:	d905      	bls.n	800b958 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b94c:	23fc      	movs	r3, #252	@ 0xfc
 800b94e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	e008      	b.n	800b96a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b958:	897b      	ldrh	r3, [r7, #10]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b962:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	7dba      	ldrb	r2, [r7, #22]
 800b968:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	460b      	mov	r3, r1
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b98a:	2300      	movs	r3, #0
 800b98c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800b98e:	897b      	ldrh	r3, [r7, #10]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b998:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800b99a:	7dbb      	ldrb	r3, [r7, #22]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9a0:	897b      	ldrh	r3, [r7, #10]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	330c      	adds	r3, #12
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4413      	add	r3, r2
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	605a      	str	r2, [r3, #4]
 800b9ae:	e040      	b.n	800ba32 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800b9b0:	897b      	ldrh	r3, [r7, #10]
 800b9b2:	2b05      	cmp	r3, #5
 800b9b4:	d830      	bhi.n	800ba18 <VL53L0X_SetLimitCheckValue+0x9c>
 800b9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9bc <VL53L0X_SetLimitCheckValue+0x40>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800b9d5 	.word	0x0800b9d5
 800b9c0:	0800b9dd 	.word	0x0800b9dd
 800b9c4:	0800b9f3 	.word	0x0800b9f3
 800b9c8:	0800b9fb 	.word	0x0800b9fb
 800b9cc:	0800ba03 	.word	0x0800ba03
 800b9d0:	0800ba03 	.word	0x0800ba03

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800b9da:	e01f      	b.n	800ba1c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	2144      	movs	r1, #68	@ 0x44
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f003 fd4c 	bl	800f484 <VL53L0X_WrWord>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800b9f0:	e014      	b.n	800ba1c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800b9f8:	e010      	b.n	800ba1c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800ba00:	e00c      	b.n	800ba1c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	2164      	movs	r1, #100	@ 0x64
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f003 fd39 	bl	800f484 <VL53L0X_WrWord>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ba16:	e001      	b.n	800ba1c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba18:	23fc      	movs	r3, #252	@ 0xfc
 800ba1a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ba1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d106      	bne.n	800ba32 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba24:	897b      	ldrh	r3, [r7, #10]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	330c      	adds	r3, #12
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop

0800ba40 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ba56:	897b      	ldrh	r3, [r7, #10]
 800ba58:	2b05      	cmp	r3, #5
 800ba5a:	d847      	bhi.n	800baec <VL53L0X_GetLimitCheckValue+0xac>
 800ba5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba64 <VL53L0X_GetLimitCheckValue+0x24>)
 800ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba62:	bf00      	nop
 800ba64:	0800ba7d 	.word	0x0800ba7d
 800ba68:	0800ba89 	.word	0x0800ba89
 800ba6c:	0800baaf 	.word	0x0800baaf
 800ba70:	0800babb 	.word	0x0800babb
 800ba74:	0800bac7 	.word	0x0800bac7
 800ba78:	0800bac7 	.word	0x0800bac7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba80:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	77bb      	strb	r3, [r7, #30]
		break;
 800ba86:	e033      	b.n	800baf0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ba88:	f107 0316 	add.w	r3, r7, #22
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	2144      	movs	r1, #68	@ 0x44
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f003 fd7f 	bl	800f594 <VL53L0X_RdWord>
 800ba96:	4603      	mov	r3, r0
 800ba98:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ba9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d102      	bne.n	800baa8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800baa2:	8afb      	ldrh	r3, [r7, #22]
 800baa4:	025b      	lsls	r3, r3, #9
 800baa6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800baa8:	2301      	movs	r3, #1
 800baaa:	77bb      	strb	r3, [r7, #30]
		break;
 800baac:	e020      	b.n	800baf0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	77bb      	strb	r3, [r7, #30]
		break;
 800bab8:	e01a      	b.n	800baf0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800babe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	77bb      	strb	r3, [r7, #30]
		break;
 800bac4:	e014      	b.n	800baf0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bac6:	f107 0316 	add.w	r3, r7, #22
 800baca:	461a      	mov	r2, r3
 800bacc:	2164      	movs	r1, #100	@ 0x64
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f003 fd60 	bl	800f594 <VL53L0X_RdWord>
 800bad4:	4603      	mov	r3, r0
 800bad6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bae0:	8afb      	ldrh	r3, [r7, #22]
 800bae2:	025b      	lsls	r3, r3, #9
 800bae4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	77bb      	strb	r3, [r7, #30]
		break;
 800baea:	e001      	b.n	800baf0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800baec:	23fc      	movs	r3, #252	@ 0xfc
 800baee:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800baf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d12a      	bne.n	800bb4e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800baf8:	7fbb      	ldrb	r3, [r7, #30]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d124      	bne.n	800bb48 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d110      	bne.n	800bb26 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800bb04:	897b      	ldrh	r3, [r7, #10]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	330c      	adds	r3, #12
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bb18:	897b      	ldrh	r3, [r7, #10]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bb24:	e013      	b.n	800bb4e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bb2c:	897b      	ldrh	r3, [r7, #10]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	330c      	adds	r3, #12
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	69ba      	ldr	r2, [r7, #24]
 800bb38:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bb3a:	897b      	ldrh	r3, [r7, #10]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	4413      	add	r3, r2
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800bb46:	e002      	b.n	800bb4e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb4e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3720      	adds	r7, #32
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop

0800bb5c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800bb6a:	f107 030e 	add.w	r3, r7, #14
 800bb6e:	461a      	mov	r2, r3
 800bb70:	2101      	movs	r1, #1
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f003 fce4 	bl	800f540 <VL53L0X_RdByte>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800bb7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10e      	bne.n	800bba2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800bb84:	7bba      	ldrb	r2, [r7, #14]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	da03      	bge.n	800bb9c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2201      	movs	r2, #1
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	e002      	b.n	800bba2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781a      	ldrb	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bbcc:	f107 030e 	add.w	r3, r7, #14
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fbec 	bl	800b3b0 <VL53L0X_GetDeviceMode>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d107      	bne.n	800bbf4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d104      	bne.n	800bbf4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f898 	bl	800bd20 <VL53L0X_StartMeasurement>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800bbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d104      	bne.n	800bc06 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 fb33 	bl	800d268 <VL53L0X_measurement_poll_for_completion>
 800bc02:	4603      	mov	r3, r0
 800bc04:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bc06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d103      	bne.n	800bc1c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2203      	movs	r2, #3
 800bc18:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800bc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800bc38:	2301      	movs	r3, #1
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	68b9      	ldr	r1, [r7, #8]
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f001 fad5 	bl	800d1ee <VL53L0X_perform_ref_calibration>
 800bc44:	4603      	mov	r3, r0
 800bc46:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800bc48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc60:	2300      	movs	r3, #0
 800bc62:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800bc6a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800bc6c:	7dbb      	ldrb	r3, [r7, #22]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d005      	beq.n	800bc7e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800bc72:	7dbb      	ldrb	r3, [r7, #22]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d002      	beq.n	800bc7e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800bc78:	7dbb      	ldrb	r3, [r7, #22]
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d147      	bne.n	800bd0e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800bc7e:	f107 030c 	add.w	r3, r7, #12
 800bc82:	f107 0210 	add.w	r2, r7, #16
 800bc86:	2101      	movs	r1, #1
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fbb9 	bl	800c400 <VL53L0X_GetInterruptThresholds>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800bc98:	d803      	bhi.n	800bca2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800bc9a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800bc9c:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800bca0:	d935      	bls.n	800bd0e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800bca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d131      	bne.n	800bd0e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d006      	beq.n	800bcbe <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800bcb0:	491a      	ldr	r1, [pc, #104]	@ (800bd1c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f002 fcac 	bl	800e610 <VL53L0X_load_tuning_settings>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	75fb      	strb	r3, [r7, #23]
 800bcbc:	e027      	b.n	800bd0e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800bcbe:	2204      	movs	r2, #4
 800bcc0:	21ff      	movs	r1, #255	@ 0xff
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f003 fbba 	bl	800f43c <VL53L0X_WrByte>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	461a      	mov	r2, r3
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2170      	movs	r1, #112	@ 0x70
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f003 fbb0 	bl	800f43c <VL53L0X_WrByte>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bce6:	2200      	movs	r2, #0
 800bce8:	21ff      	movs	r1, #255	@ 0xff
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f003 fba6 	bl	800f43c <VL53L0X_WrByte>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2180      	movs	r1, #128	@ 0x80
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f003 fb9c 	bl	800f43c <VL53L0X_WrByte>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800bd0e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20040138 	.word	0x20040138

0800bd20 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bd30:	f107 030e 	add.w	r3, r7, #14
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff fb3a 	bl	800b3b0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	2180      	movs	r1, #128	@ 0x80
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f003 fb7b 	bl	800f43c <VL53L0X_WrByte>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	21ff      	movs	r1, #255	@ 0xff
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f003 fb74 	bl	800f43c <VL53L0X_WrByte>
 800bd54:	4603      	mov	r3, r0
 800bd56:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f003 fb6d 	bl	800f43c <VL53L0X_WrByte>
 800bd62:	4603      	mov	r3, r0
 800bd64:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	2191      	movs	r1, #145	@ 0x91
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f003 fb63 	bl	800f43c <VL53L0X_WrByte>
 800bd76:	4603      	mov	r3, r0
 800bd78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f003 fb5c 	bl	800f43c <VL53L0X_WrByte>
 800bd84:	4603      	mov	r3, r0
 800bd86:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd88:	2200      	movs	r2, #0
 800bd8a:	21ff      	movs	r1, #255	@ 0xff
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f003 fb55 	bl	800f43c <VL53L0X_WrByte>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bd96:	2200      	movs	r2, #0
 800bd98:	2180      	movs	r1, #128	@ 0x80
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f003 fb4e 	bl	800f43c <VL53L0X_WrByte>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d054      	beq.n	800be54 <VL53L0X_StartMeasurement+0x134>
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	dc6c      	bgt.n	800be88 <VL53L0X_StartMeasurement+0x168>
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d002      	beq.n	800bdb8 <VL53L0X_StartMeasurement+0x98>
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d034      	beq.n	800be20 <VL53L0X_StartMeasurement+0x100>
 800bdb6:	e067      	b.n	800be88 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800bdb8:	2201      	movs	r2, #1
 800bdba:	2100      	movs	r1, #0
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f003 fb3d 	bl	800f43c <VL53L0X_WrByte>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800bdca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d15d      	bne.n	800be8e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d008      	beq.n	800bdee <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800bddc:	f107 030d 	add.w	r3, r7, #13
 800bde0:	461a      	mov	r2, r3
 800bde2:	2100      	movs	r1, #0
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f003 fbab 	bl	800f540 <VL53L0X_RdByte>
 800bdea:	4603      	mov	r3, r0
 800bdec:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800bdf4:	7b7a      	ldrb	r2, [r7, #13]
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800bdfc:	7bfa      	ldrb	r2, [r7, #15]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d107      	bne.n	800be12 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800be02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d103      	bne.n	800be12 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800be10:	d3e1      	bcc.n	800bdd6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800be18:	d339      	bcc.n	800be8e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800be1a:	23f9      	movs	r3, #249	@ 0xf9
 800be1c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800be1e:	e036      	b.n	800be8e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800be20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d105      	bne.n	800be34 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800be28:	2101      	movs	r1, #1
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff ff12 	bl	800bc54 <VL53L0X_CheckAndLoadInterruptSettings>
 800be30:	4603      	mov	r3, r0
 800be32:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800be34:	2202      	movs	r2, #2
 800be36:	2100      	movs	r1, #0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f003 faff 	bl	800f43c <VL53L0X_WrByte>
 800be3e:	4603      	mov	r3, r0
 800be40:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800be42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d123      	bne.n	800be92 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2204      	movs	r2, #4
 800be4e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800be52:	e01e      	b.n	800be92 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800be54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d105      	bne.n	800be68 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800be5c:	2101      	movs	r1, #1
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff fef8 	bl	800bc54 <VL53L0X_CheckAndLoadInterruptSettings>
 800be64:	4603      	mov	r3, r0
 800be66:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800be68:	2204      	movs	r2, #4
 800be6a:	2100      	movs	r1, #0
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f003 fae5 	bl	800f43c <VL53L0X_WrByte>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800be76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10b      	bne.n	800be96 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2204      	movs	r2, #4
 800be82:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800be86:	e006      	b.n	800be96 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800be88:	23f8      	movs	r3, #248	@ 0xf8
 800be8a:	75fb      	strb	r3, [r7, #23]
 800be8c:	e004      	b.n	800be98 <VL53L0X_StartMeasurement+0x178>
		break;
 800be8e:	bf00      	nop
 800be90:	e002      	b.n	800be98 <VL53L0X_StartMeasurement+0x178>
		break;
 800be92:	bf00      	nop
 800be94:	e000      	b.n	800be98 <VL53L0X_StartMeasurement+0x178>
		break;
 800be96:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800be98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800beb8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b04      	cmp	r3, #4
 800bebe:	d112      	bne.n	800bee6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800bec0:	f107 0308 	add.w	r3, r7, #8
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fb0e 	bl	800c4e8 <VL53L0X_GetInterruptMaskStatus>
 800becc:	4603      	mov	r3, r0
 800bece:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	d103      	bne.n	800bede <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2201      	movs	r2, #1
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e01c      	b.n	800bf18 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2200      	movs	r2, #0
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	e018      	b.n	800bf18 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800bee6:	f107 030d 	add.w	r3, r7, #13
 800beea:	461a      	mov	r2, r3
 800beec:	2114      	movs	r1, #20
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f003 fb26 	bl	800f540 <VL53L0X_RdByte>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800bef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10b      	bne.n	800bf18 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800bf00:	7b7b      	ldrb	r3, [r7, #13]
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e002      	b.n	800bf18 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2200      	movs	r2, #0
 800bf16:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800bf24:	b5b0      	push	{r4, r5, r7, lr}
 800bf26:	b096      	sub	sp, #88	@ 0x58
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800bf34:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800bf38:	230c      	movs	r3, #12
 800bf3a:	2114      	movs	r1, #20
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f003 fa51 	bl	800f3e4 <VL53L0X_ReadMulti>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800bf48:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f040 80c8 	bne.w	800c0e2 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2200      	movs	r2, #0
 800bf56:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800bf5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2200      	movs	r2, #0
 800bf74:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800bf76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf7a:	021b      	lsls	r3, r3, #8
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bf82:	4413      	add	r3, r2
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	025b      	lsls	r3, r3, #9
 800bf88:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf8e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800bf90:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800bfa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bfa6:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800bfac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bfb0:	021b      	lsls	r3, r3, #8
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800bfb8:	4413      	add	r3, r2
 800bfba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800bfc4:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800bfc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bfca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 800bfd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800bfdc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800bfe0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bfe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bfe6:	d046      	beq.n	800c076 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800bfe8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bfea:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800bfee:	fb02 f303 	mul.w	r3, r2, r3
 800bff2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800bff6:	4a58      	ldr	r2, [pc, #352]	@ (800c158 <VL53L0X_GetRangingMeasurementData+0x234>)
 800bff8:	fb82 1203 	smull	r1, r2, r2, r3
 800bffc:	1192      	asrs	r2, r2, #6
 800bffe:	17db      	asrs	r3, r3, #31
 800c000:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c002:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7f1b      	ldrb	r3, [r3, #28]
 800c010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d02c      	beq.n	800c076 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c01c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c01e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c022:	fb02 f303 	mul.w	r3, r2, r3
 800c026:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d10d      	bne.n	800c04a <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800c02e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c032:	2b00      	cmp	r3, #0
 800c034:	d004      	beq.n	800c040 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800c036:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800c03a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c03e:	e016      	b.n	800c06e <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800c040:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800c044:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c048:	e011      	b.n	800c06e <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c04a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c050:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c054:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c056:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800c05a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c05e:	121b      	asrs	r3, r3, #8
 800c060:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c064:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c066:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c06a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c06e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c072:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c076:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00d      	beq.n	800c09a <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c07e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c082:	089b      	lsrs	r3, r3, #2
 800c084:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c08a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	019b      	lsls	r3, r3, #6
 800c092:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	75da      	strb	r2, [r3, #23]
 800c098:	e006      	b.n	800c0a8 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800c0a0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c0a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c0ac:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800c0b0:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f002 ff44 	bl	800ef4c <VL53L0X_get_pal_range_status>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c0d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d103      	bne.n	800c0e2 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c0da:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c0e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d12f      	bne.n	800c14a <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f107 040c 	add.w	r4, r7, #12
 800c0f0:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 800c0f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c104:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c10a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c112:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c118:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c11e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c124:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c12a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c130:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800c13a:	f107 050c 	add.w	r5, r7, #12
 800c13e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c14a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3750      	adds	r7, #80	@ 0x50
 800c152:	46bd      	mov	sp, r7
 800c154:	bdb0      	pop	{r4, r5, r7, pc}
 800c156:	bf00      	nop
 800c158:	10624dd3 	.word	0x10624dd3

0800c15c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c16a:	2100      	movs	r1, #0
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff f8f3 	bl	800b358 <VL53L0X_SetDeviceMode>
 800c172:	4603      	mov	r3, r0
 800c174:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d104      	bne.n	800c188 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff fd1e 	bl	800bbc0 <VL53L0X_PerformSingleMeasurement>
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d105      	bne.n	800c19c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fec6 	bl	800bf24 <VL53L0X_GetRangingMeasurementData>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d105      	bne.n	800c1b0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f95e 	bl	800c468 <VL53L0X_ClearInterruptMask>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	70fb      	strb	r3, [r7, #3]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	70bb      	strb	r3, [r7, #2]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c1da:	78fb      	ldrb	r3, [r7, #3]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c1e0:	23f6      	movs	r3, #246	@ 0xf6
 800c1e2:	73fb      	strb	r3, [r7, #15]
 800c1e4:	e105      	b.n	800c3f2 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c1e6:	78bb      	ldrb	r3, [r7, #2]
 800c1e8:	2b14      	cmp	r3, #20
 800c1ea:	d110      	bne.n	800c20e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c1ec:	7e3b      	ldrb	r3, [r7, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d102      	bne.n	800c1f8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c1f2:	2310      	movs	r3, #16
 800c1f4:	73bb      	strb	r3, [r7, #14]
 800c1f6:	e001      	b.n	800c1fc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	461a      	mov	r2, r3
 800c200:	2184      	movs	r1, #132	@ 0x84
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f003 f91a 	bl	800f43c <VL53L0X_WrByte>
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]
 800c20c:	e0f1      	b.n	800c3f2 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c20e:	78bb      	ldrb	r3, [r7, #2]
 800c210:	2b15      	cmp	r3, #21
 800c212:	f040 8097 	bne.w	800c344 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c216:	2201      	movs	r2, #1
 800c218:	21ff      	movs	r1, #255	@ 0xff
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f003 f90e 	bl	800f43c <VL53L0X_WrByte>
 800c220:	4603      	mov	r3, r0
 800c222:	461a      	mov	r2, r3
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4313      	orrs	r3, r2
 800c228:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c22a:	2200      	movs	r2, #0
 800c22c:	2100      	movs	r1, #0
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f003 f904 	bl	800f43c <VL53L0X_WrByte>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c23e:	2200      	movs	r2, #0
 800c240:	21ff      	movs	r1, #255	@ 0xff
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f003 f8fa 	bl	800f43c <VL53L0X_WrByte>
 800c248:	4603      	mov	r3, r0
 800c24a:	461a      	mov	r2, r3
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	4313      	orrs	r3, r2
 800c250:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c252:	2201      	movs	r2, #1
 800c254:	2180      	movs	r1, #128	@ 0x80
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f003 f8f0 	bl	800f43c <VL53L0X_WrByte>
 800c25c:	4603      	mov	r3, r0
 800c25e:	461a      	mov	r2, r3
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	4313      	orrs	r3, r2
 800c264:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c266:	2202      	movs	r2, #2
 800c268:	2185      	movs	r1, #133	@ 0x85
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f003 f8e6 	bl	800f43c <VL53L0X_WrByte>
 800c270:	4603      	mov	r3, r0
 800c272:	461a      	mov	r2, r3
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	4313      	orrs	r3, r2
 800c278:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c27a:	2204      	movs	r2, #4
 800c27c:	21ff      	movs	r1, #255	@ 0xff
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f003 f8dc 	bl	800f43c <VL53L0X_WrByte>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c28e:	2200      	movs	r2, #0
 800c290:	21cd      	movs	r1, #205	@ 0xcd
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f003 f8d2 	bl	800f43c <VL53L0X_WrByte>
 800c298:	4603      	mov	r3, r0
 800c29a:	461a      	mov	r2, r3
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c2a2:	2211      	movs	r2, #17
 800c2a4:	21cc      	movs	r1, #204	@ 0xcc
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f003 f8c8 	bl	800f43c <VL53L0X_WrByte>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c2b6:	2207      	movs	r2, #7
 800c2b8:	21ff      	movs	r1, #255	@ 0xff
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f003 f8be 	bl	800f43c <VL53L0X_WrByte>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	21be      	movs	r1, #190	@ 0xbe
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f003 f8b4 	bl	800f43c <VL53L0X_WrByte>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c2de:	2206      	movs	r2, #6
 800c2e0:	21ff      	movs	r1, #255	@ 0xff
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f003 f8aa 	bl	800f43c <VL53L0X_WrByte>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c2f2:	2209      	movs	r2, #9
 800c2f4:	21cc      	movs	r1, #204	@ 0xcc
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f003 f8a0 	bl	800f43c <VL53L0X_WrByte>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	461a      	mov	r2, r3
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	4313      	orrs	r3, r2
 800c304:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c306:	2200      	movs	r2, #0
 800c308:	21ff      	movs	r1, #255	@ 0xff
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f003 f896 	bl	800f43c <VL53L0X_WrByte>
 800c310:	4603      	mov	r3, r0
 800c312:	461a      	mov	r2, r3
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	4313      	orrs	r3, r2
 800c318:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c31a:	2201      	movs	r2, #1
 800c31c:	21ff      	movs	r1, #255	@ 0xff
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f003 f88c 	bl	800f43c <VL53L0X_WrByte>
 800c324:	4603      	mov	r3, r0
 800c326:	461a      	mov	r2, r3
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c32e:	2200      	movs	r2, #0
 800c330:	2100      	movs	r1, #0
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f003 f882 	bl	800f43c <VL53L0X_WrByte>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	4313      	orrs	r3, r2
 800c340:	73fb      	strb	r3, [r7, #15]
 800c342:	e056      	b.n	800c3f2 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d120      	bne.n	800c38e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800c34c:	787b      	ldrb	r3, [r7, #1]
 800c34e:	2b04      	cmp	r3, #4
 800c350:	d81b      	bhi.n	800c38a <VL53L0X_SetGpioConfig+0x1ce>
 800c352:	a201      	add	r2, pc, #4	@ (adr r2, 800c358 <VL53L0X_SetGpioConfig+0x19c>)
 800c354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c358:	0800c36d 	.word	0x0800c36d
 800c35c:	0800c373 	.word	0x0800c373
 800c360:	0800c379 	.word	0x0800c379
 800c364:	0800c37f 	.word	0x0800c37f
 800c368:	0800c385 	.word	0x0800c385
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73bb      	strb	r3, [r7, #14]
				break;
 800c370:	e00d      	b.n	800c38e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c372:	2301      	movs	r3, #1
 800c374:	73bb      	strb	r3, [r7, #14]
				break;
 800c376:	e00a      	b.n	800c38e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c378:	2302      	movs	r3, #2
 800c37a:	73bb      	strb	r3, [r7, #14]
				break;
 800c37c:	e007      	b.n	800c38e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c37e:	2303      	movs	r3, #3
 800c380:	73bb      	strb	r3, [r7, #14]
				break;
 800c382:	e004      	b.n	800c38e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c384:	2304      	movs	r3, #4
 800c386:	73bb      	strb	r3, [r7, #14]
				break;
 800c388:	e001      	b.n	800c38e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800c38a:	23f5      	movs	r3, #245	@ 0xf5
 800c38c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d107      	bne.n	800c3a6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	461a      	mov	r2, r3
 800c39a:	210a      	movs	r1, #10
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f003 f84d 	bl	800f43c <VL53L0X_WrByte>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10f      	bne.n	800c3ce <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c3ae:	7e3b      	ldrb	r3, [r7, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d102      	bne.n	800c3ba <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73bb      	strb	r3, [r7, #14]
 800c3b8:	e001      	b.n	800c3be <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800c3ba:	2310      	movs	r3, #16
 800c3bc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	22ef      	movs	r2, #239	@ 0xef
 800c3c2:	2184      	movs	r1, #132	@ 0x84
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f003 f887 	bl	800f4d8 <VL53L0X_UpdateByte>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d103      	bne.n	800c3de <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	787a      	ldrb	r2, [r7, #1]
 800c3da:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d105      	bne.n	800c3f2 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f83d 	bl	800c468 <VL53L0X_ClearInterruptMask>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop

0800c400 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	607a      	str	r2, [r7, #4]
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	460b      	mov	r3, r1
 800c40e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c414:	f107 0314 	add.w	r3, r7, #20
 800c418:	461a      	mov	r2, r3
 800c41a:	210e      	movs	r1, #14
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f003 f8b9 	bl	800f594 <VL53L0X_RdWord>
 800c422:	4603      	mov	r3, r0
 800c424:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c426:	8abb      	ldrh	r3, [r7, #20]
 800c428:	045a      	lsls	r2, r3, #17
 800c42a:	4b0e      	ldr	r3, [pc, #56]	@ (800c464 <VL53L0X_GetInterruptThresholds+0x64>)
 800c42c:	4013      	ands	r3, r2
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10e      	bne.n	800c458 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c43a:	f107 0314 	add.w	r3, r7, #20
 800c43e:	461a      	mov	r2, r3
 800c440:	210c      	movs	r1, #12
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f003 f8a6 	bl	800f594 <VL53L0X_RdWord>
 800c448:	4603      	mov	r3, r0
 800c44a:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c44c:	8abb      	ldrh	r3, [r7, #20]
 800c44e:	045a      	lsls	r2, r3, #17
 800c450:	4b04      	ldr	r3, [pc, #16]	@ (800c464 <VL53L0X_GetInterruptThresholds+0x64>)
 800c452:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c458:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	1ffe0000 	.word	0x1ffe0000

0800c468 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c472:	2300      	movs	r3, #0
 800c474:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c47a:	2201      	movs	r2, #1
 800c47c:	210b      	movs	r1, #11
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f002 ffdc 	bl	800f43c <VL53L0X_WrByte>
 800c484:	4603      	mov	r3, r0
 800c486:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c488:	2200      	movs	r2, #0
 800c48a:	210b      	movs	r1, #11
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f002 ffd5 	bl	800f43c <VL53L0X_WrByte>
 800c492:	4603      	mov	r3, r0
 800c494:	461a      	mov	r2, r3
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	4313      	orrs	r3, r2
 800c49a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c49c:	f107 030d 	add.w	r3, r7, #13
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	2113      	movs	r1, #19
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f003 f84b 	bl	800f540 <VL53L0X_RdByte>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c4ba:	7b7b      	ldrb	r3, [r7, #13]
 800c4bc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d006      	beq.n	800c4d2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d803      	bhi.n	800c4d2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0d3      	beq.n	800c47a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d901      	bls.n	800c4dc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c4d8:	23f4      	movs	r3, #244	@ 0xf4
 800c4da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c4f6:	f107 030e 	add.w	r3, r7, #14
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	2113      	movs	r1, #19
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f003 f81e 	bl	800f540 <VL53L0X_RdByte>
 800c504:	4603      	mov	r3, r0
 800c506:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800c508:	7bbb      	ldrb	r3, [r7, #14]
 800c50a:	f003 0207 	and.w	r2, r3, #7
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	f003 0318 	and.w	r3, r3, #24
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c51c:	23fa      	movs	r3, #250	@ 0xfa
 800c51e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c538:	2300      	movs	r3, #0
 800c53a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 fa03 	bl	800c94c <VL53L0X_perform_ref_spad_management>
 800c546:	4603      	mov	r3, r0
 800c548:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800c54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3718      	adds	r7, #24
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800c564:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800c568:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800c56a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c56e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	461a      	mov	r2, r3
 800c576:	2128      	movs	r1, #40	@ 0x28
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f003 f80b 	bl	800f594 <VL53L0X_RdWord>
 800c57e:	4603      	mov	r3, r0
 800c580:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800c582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d11e      	bne.n	800c5c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800c58a:	893b      	ldrh	r3, [r7, #8]
 800c58c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c590:	b29b      	uxth	r3, r3
 800c592:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800c594:	893b      	ldrh	r3, [r7, #8]
 800c596:	461a      	mov	r2, r3
 800c598:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	dd0b      	ble.n	800c5b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800c5a0:	893a      	ldrh	r2, [r7, #8]
 800c5a2:	897b      	ldrh	r3, [r7, #10]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	b21b      	sxth	r3, r3
 800c5aa:	461a      	mov	r2, r3
					* 250;
 800c5ac:	23fa      	movs	r3, #250	@ 0xfa
 800c5ae:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e007      	b.n	800c5c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800c5b8:	893b      	ldrh	r3, [r7, #8]
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	461a      	mov	r2, r3
 800c5be:	23fa      	movs	r3, #250	@ 0xfa
 800c5c0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800c5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b08b      	sub	sp, #44	@ 0x2c
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800c5e2:	2308      	movs	r3, #8
 800c5e4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5fa:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	69ba      	ldr	r2, [r7, #24]
 800c600:	fbb3 f2f2 	udiv	r2, r3, r2
 800c604:	69b9      	ldr	r1, [r7, #24]
 800c606:	fb01 f202 	mul.w	r2, r1, r2
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	627b      	str	r3, [r7, #36]	@ 0x24
 800c612:	e030      	b.n	800c676 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800c614:	2300      	movs	r3, #0
 800c616:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	4413      	add	r3, r2
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800c622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	429a      	cmp	r2, r3
 800c628:	d11e      	bne.n	800c668 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800c62a:	7ffa      	ldrb	r2, [r7, #31]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	fa42 f303 	asr.w	r3, r2, r3
 800c632:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800c638:	e016      	b.n	800c668 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800c63a:	7ffb      	ldrb	r3, [r7, #31]
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <get_next_good_spad+0x88>
				success = 1;
 800c644:	2301      	movs	r3, #1
 800c646:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	69ba      	ldr	r2, [r7, #24]
 800c64c:	fb03 f202 	mul.w	r2, r3, r2
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	4413      	add	r3, r2
 800c654:	461a      	mov	r2, r3
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	601a      	str	r2, [r3, #0]
				break;
 800c65a:	e009      	b.n	800c670 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800c65c:	7ffb      	ldrb	r3, [r7, #31]
 800c65e:	085b      	lsrs	r3, r3, #1
 800c660:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	3301      	adds	r3, #1
 800c666:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800c668:	6a3a      	ldr	r2, [r7, #32]
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d3e4      	bcc.n	800c63a <get_next_good_spad+0x66>
				coarseIndex++) {
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	3301      	adds	r3, #1
 800c674:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800c676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d202      	bcs.n	800c684 <get_next_good_spad+0xb0>
 800c67e:	7fbb      	ldrb	r3, [r7, #30]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0c7      	beq.n	800c614 <get_next_good_spad+0x40>
		}
	}
}
 800c684:	bf00      	nop
 800c686:	372c      	adds	r7, #44	@ 0x2c
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800c698:	2301      	movs	r3, #1
 800c69a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	099b      	lsrs	r3, r3, #6
 800c6a0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800c6a2:	4a07      	ldr	r2, [pc, #28]	@ (800c6c0 <is_aperture+0x30>)
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <is_aperture+0x22>
		isAperture = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	200402f0 	.word	0x200402f0

0800c6c4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b089      	sub	sp, #36	@ 0x24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800c6d4:	2308      	movs	r3, #8
 800c6d6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6ea:	69b9      	ldr	r1, [r7, #24]
 800c6ec:	fb01 f202 	mul.w	r2, r1, r2
 800c6f0:	1a9b      	subs	r3, r3, r2
 800c6f2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d302      	bcc.n	800c702 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c6fc:	23ce      	movs	r3, #206	@ 0xce
 800c6fe:	77fb      	strb	r3, [r7, #31]
 800c700:	e010      	b.n	800c724 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	4413      	add	r3, r2
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	b25a      	sxtb	r2, r3
 800c70c:	2101      	movs	r1, #1
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	fa01 f303 	lsl.w	r3, r1, r3
 800c714:	b25b      	sxtb	r3, r3
 800c716:	4313      	orrs	r3, r2
 800c718:	b259      	sxtb	r1, r3
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	4413      	add	r3, r2
 800c720:	b2ca      	uxtb	r2, r1
 800c722:	701a      	strb	r2, [r3, #0]

	return status;
 800c724:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3724      	adds	r7, #36	@ 0x24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800c73e:	2306      	movs	r3, #6
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	21b0      	movs	r1, #176	@ 0xb0
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f002 fe1d 	bl	800f384 <VL53L0X_WriteMulti>
 800c74a:	4603      	mov	r3, r0
 800c74c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800c74e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800c764:	2306      	movs	r3, #6
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	21b0      	movs	r1, #176	@ 0xb0
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f002 fe3a 	bl	800f3e4 <VL53L0X_ReadMulti>
 800c770:	4603      	mov	r3, r0
 800c772:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800c774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b08c      	sub	sp, #48	@ 0x30
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	607a      	str	r2, [r7, #4]
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	460b      	mov	r3, r1
 800c78e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c790:	2300      	movs	r3, #0
 800c792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800c796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c798:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800c79a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c79c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c79e:	2300      	movs	r3, #0
 800c7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7a2:	e02b      	b.n	800c7fc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800c7a4:	f107 031c 	add.w	r3, r7, #28
 800c7a8:	6a3a      	ldr	r2, [r7, #32]
 800c7aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ff11 	bl	800c5d4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b8:	d103      	bne.n	800c7c2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c7ba:	23ce      	movs	r3, #206	@ 0xce
 800c7bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800c7c0:	e020      	b.n	800c804 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c8:	4413      	add	r3, r2
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff ff60 	bl	800c690 <is_aperture>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d003      	beq.n	800c7e2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c7da:	23ce      	movs	r3, #206	@ 0xce
 800c7dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800c7e0:	e010      	b.n	800c804 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800c7e6:	6a3a      	ldr	r2, [r7, #32]
 800c7e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7ea:	6838      	ldr	r0, [r7, #0]
 800c7ec:	f7ff ff6a 	bl	800c6c4 <enable_spad_bit>
		currentSpad++;
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c800:	429a      	cmp	r2, r3
 800c802:	d3cf      	bcc.n	800c7a4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800c804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c806:	6a3a      	ldr	r2, [r7, #32]
 800c808:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800c80a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d106      	bne.n	800c820 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff ff8d 	bl	800c734 <set_ref_spad_map>
 800c81a:	4603      	mov	r3, r0
 800c81c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800c820:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c824:	2b00      	cmp	r3, #0
 800c826:	d121      	bne.n	800c86c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	4619      	mov	r1, r3
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7ff ff93 	bl	800c75a <get_ref_spad_map>
 800c834:	4603      	mov	r3, r0
 800c836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800c83e:	e011      	b.n	800c864 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c844:	4413      	add	r3, r2
 800c846:	781a      	ldrb	r2, [r3, #0]
 800c848:	f107 0114 	add.w	r1, r7, #20
 800c84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84e:	440b      	add	r3, r1
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	429a      	cmp	r2, r3
 800c854:	d003      	beq.n	800c85e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c856:	23ce      	movs	r3, #206	@ 0xce
 800c858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800c85c:	e006      	b.n	800c86c <enable_ref_spads+0xec>
			}
			i++;
 800c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c860:	3301      	adds	r3, #1
 800c862:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 800c864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c868:	429a      	cmp	r2, r3
 800c86a:	d3e9      	bcc.n	800c840 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800c86c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c870:	4618      	mov	r0, r3
 800c872:	3730      	adds	r7, #48	@ 0x30
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08a      	sub	sp, #40	@ 0x28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c882:	2300      	movs	r3, #0
 800c884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c898:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d107      	bne.n	800c8b0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800c8a0:	22c0      	movs	r2, #192	@ 0xc0
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f002 fdc9 	bl	800f43c <VL53L0X_WrByte>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c8b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d108      	bne.n	800c8ca <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c8b8:	f107 0308 	add.w	r3, r7, #8
 800c8bc:	4619      	mov	r1, r3
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff fc4c 	bl	800c15c <VL53L0X_PerformSingleRangingMeasurement>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c8ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d107      	bne.n	800c8e2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	21ff      	movs	r1, #255	@ 0xff
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f002 fdb0 	bl	800f43c <VL53L0X_WrByte>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800c8e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d107      	bne.n	800c8fa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	21b6      	movs	r1, #182	@ 0xb6
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f002 fe50 	bl	800f594 <VL53L0X_RdWord>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d107      	bne.n	800c912 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c902:	2200      	movs	r2, #0
 800c904:	21ff      	movs	r1, #255	@ 0xff
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f002 fd98 	bl	800f43c <VL53L0X_WrByte>
 800c90c:	4603      	mov	r3, r0
 800c90e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800c912:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c916:	2b00      	cmp	r3, #0
 800c918:	d112      	bne.n	800c940 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c91a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c91e:	461a      	mov	r2, r3
 800c920:	2101      	movs	r1, #1
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f002 fd8a 	bl	800f43c <VL53L0X_WrByte>
 800c928:	4603      	mov	r3, r0
 800c92a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c92e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c932:	2b00      	cmp	r3, #0
 800c934:	d104      	bne.n	800c940 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c93c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800c940:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c944:	4618      	mov	r0, r3
 800c946:	3728      	adds	r7, #40	@ 0x28
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c94c:	b590      	push	{r4, r7, lr}
 800c94e:	b09d      	sub	sp, #116	@ 0x74
 800c950:	af06      	add	r7, sp, #24
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c958:	2300      	movs	r3, #0
 800c95a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c95e:	23b4      	movs	r3, #180	@ 0xb4
 800c960:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 800c964:	2303      	movs	r3, #3
 800c966:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800c968:	232c      	movs	r3, #44	@ 0x2c
 800c96a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c978:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800c97c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800c986:	2306      	movs	r3, #6
 800c988:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800c9b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9b6:	e009      	b.n	800c9cc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9bc:	4413      	add	r3, r2
 800c9be:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c9c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d3f1      	bcc.n	800c9b8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	21ff      	movs	r1, #255	@ 0xff
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f002 fd2f 	bl	800f43c <VL53L0X_WrByte>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800c9e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d107      	bne.n	800c9fc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	214f      	movs	r1, #79	@ 0x4f
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f002 fd23 	bl	800f43c <VL53L0X_WrByte>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c9fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d107      	bne.n	800ca14 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800ca04:	222c      	movs	r2, #44	@ 0x2c
 800ca06:	214e      	movs	r1, #78	@ 0x4e
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f002 fd17 	bl	800f43c <VL53L0X_WrByte>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ca14:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d107      	bne.n	800ca2c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	21ff      	movs	r1, #255	@ 0xff
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f002 fd0b 	bl	800f43c <VL53L0X_WrByte>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ca2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d109      	bne.n	800ca48 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800ca34:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800ca38:	461a      	mov	r2, r3
 800ca3a:	21b6      	movs	r1, #182	@ 0xb6
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f002 fcfd 	bl	800f43c <VL53L0X_WrByte>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800ca48:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d107      	bne.n	800ca60 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800ca50:	2200      	movs	r2, #0
 800ca52:	2180      	movs	r1, #128	@ 0x80
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f002 fcf1 	bl	800f43c <VL53L0X_WrByte>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800ca60:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800ca68:	f107 0210 	add.w	r2, r7, #16
 800ca6c:	f107 0111 	add.w	r1, r7, #17
 800ca70:	2300      	movs	r3, #0
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 fbbb 	bl	800d1ee <VL53L0X_perform_ref_calibration>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d121      	bne.n	800caca <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800ca8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca8c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800ca92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca94:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800caa2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800caa6:	f107 0218 	add.w	r2, r7, #24
 800caaa:	9204      	str	r2, [sp, #16]
 800caac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caae:	9203      	str	r2, [sp, #12]
 800cab0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cab2:	9202      	str	r2, [sp, #8]
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	4623      	mov	r3, r4
 800cabc:	4602      	mov	r2, r0
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff fe5e 	bl	800c780 <enable_ref_spads>
 800cac4:	4603      	mov	r3, r0
 800cac6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800caca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d174      	bne.n	800cbbc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800cad6:	f107 0312 	add.w	r3, r7, #18
 800cada:	4619      	mov	r1, r3
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff fecb 	bl	800c878 <perform_ref_signal_measurement>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800caec:	2b00      	cmp	r3, #0
 800caee:	d161      	bne.n	800cbb4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800caf0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800caf2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d25d      	bcs.n	800cbb4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800caf8:	2300      	movs	r3, #0
 800cafa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cafc:	e009      	b.n	800cb12 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800cb0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb0e:	3301      	adds	r3, #1
 800cb10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d3f1      	bcc.n	800cafe <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800cb1a:	e002      	b.n	800cb22 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800cb1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb1e:	3301      	adds	r3, #1
 800cb20:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800cb22:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800cb26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb28:	4413      	add	r3, r2
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fdb0 	bl	800c690 <is_aperture>
 800cb30:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d103      	bne.n	800cb3e <VL53L0X_perform_ref_spad_management+0x1f2>
 800cb36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d3ee      	bcc.n	800cb1c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800cb42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb44:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800cb52:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800cb56:	f107 0218 	add.w	r2, r7, #24
 800cb5a:	9204      	str	r2, [sp, #16]
 800cb5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb5e:	9203      	str	r2, [sp, #12]
 800cb60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb62:	9202      	str	r2, [sp, #8]
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	4623      	mov	r3, r4
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fe06 	bl	800c780 <enable_ref_spads>
 800cb74:	4603      	mov	r3, r0
 800cb76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cb7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d11b      	bne.n	800cbba <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800cb86:	f107 0312 	add.w	r3, r7, #18
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff fe73 	bl	800c878 <perform_ref_signal_measurement>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800cb98:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10c      	bne.n	800cbba <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800cba0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800cba2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d208      	bcs.n	800cbba <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800cbae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800cbb2:	e002      	b.n	800cbba <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbb8:	e000      	b.n	800cbbc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800cbba:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cbbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f040 80af 	bne.w	800cd24 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800cbc6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800cbc8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	f240 80aa 	bls.w	800cd24 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800cbd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbd2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800cbd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800cbe0:	f107 031c 	add.w	r3, r7, #28
 800cbe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f003 fc75 	bl	80104d6 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800cbec:	8a7b      	ldrh	r3, [r7, #18]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfb8      	it	lt
 800cbf8:	425b      	neglt	r3, r3
 800cbfa:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800cc02:	e086      	b.n	800cd12 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc12:	f7ff fcdf 	bl	800c5d4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1c:	d103      	bne.n	800cc26 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc1e:	23ce      	movs	r3, #206	@ 0xce
 800cc20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800cc24:	e07e      	b.n	800cd24 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800cc26:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7ff fd2e 	bl	800c690 <is_aperture>
 800cc34:	4603      	mov	r3, r0
 800cc36:	461a      	mov	r2, r3
 800cc38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d003      	beq.n	800cc46 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800cc44:	e06e      	b.n	800cd24 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800cc46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc48:	3301      	adds	r3, #1
 800cc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800cc56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fd32 	bl	800c6c4 <enable_spad_bit>
 800cc60:	4603      	mov	r3, r0
 800cc62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800cc66:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10c      	bne.n	800cc88 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800cc6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc70:	3301      	adds	r3, #1
 800cc72:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f7ff fd59 	bl	800c734 <set_ref_spad_map>
 800cc82:	4603      	mov	r3, r0
 800cc84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800cc88:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d146      	bne.n	800cd1e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800cc90:	f107 0312 	add.w	r3, r7, #18
 800cc94:	4619      	mov	r1, r3
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f7ff fdee 	bl	800c878 <perform_ref_signal_measurement>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800cca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d13b      	bne.n	800cd22 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800ccaa:	8a7b      	ldrh	r3, [r7, #18]
 800ccac:	461a      	mov	r2, r3
 800ccae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	bfb8      	it	lt
 800ccb6:	425b      	neglt	r3, r3
 800ccb8:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800ccba:	8a7b      	ldrh	r3, [r7, #18]
 800ccbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d21c      	bcs.n	800ccfc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ccc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d914      	bls.n	800ccf4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ccca:	f107 031c 	add.w	r3, r7, #28
 800ccce:	4619      	mov	r1, r3
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7ff fd2f 	bl	800c734 <set_ref_spad_map>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800cce2:	f107 011c 	add.w	r1, r7, #28
 800cce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce8:	4618      	mov	r0, r3
 800ccea:	f003 fbf4 	bl	80104d6 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800ccee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfa:	e00a      	b.n	800cd12 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfe:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800cd06:	f107 031c 	add.w	r3, r7, #28
 800cd0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f003 fbe2 	bl	80104d6 <memcpy>
		while (!complete) {
 800cd12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f43f af74 	beq.w	800cc04 <VL53L0X_perform_ref_spad_management+0x2b8>
 800cd1c:	e002      	b.n	800cd24 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cd1e:	bf00      	nop
 800cd20:	e000      	b.n	800cd24 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800cd22:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cd24:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d115      	bne.n	800cd58 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd30:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800cd38:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	781a      	ldrb	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800cd58:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	375c      	adds	r7, #92	@ 0x5c
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd90      	pop	{r4, r7, pc}

0800cd64 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800cd64:	b590      	push	{r4, r7, lr}
 800cd66:	b093      	sub	sp, #76	@ 0x4c
 800cd68:	af06      	add	r7, sp, #24
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd72:	2300      	movs	r3, #0
 800cd74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800cd7c:	23b4      	movs	r3, #180	@ 0xb4
 800cd7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800cd82:	2306      	movs	r3, #6
 800cd84:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800cd86:	232c      	movs	r3, #44	@ 0x2c
 800cd88:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	21ff      	movs	r1, #255	@ 0xff
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f002 fb54 	bl	800f43c <VL53L0X_WrByte>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800cd9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d107      	bne.n	800cdb2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800cda2:	2200      	movs	r2, #0
 800cda4:	214f      	movs	r1, #79	@ 0x4f
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f002 fb48 	bl	800f43c <VL53L0X_WrByte>
 800cdac:	4603      	mov	r3, r0
 800cdae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cdb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d107      	bne.n	800cdca <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800cdba:	222c      	movs	r2, #44	@ 0x2c
 800cdbc:	214e      	movs	r1, #78	@ 0x4e
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f002 fb3c 	bl	800f43c <VL53L0X_WrByte>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cdca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d107      	bne.n	800cde2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	21ff      	movs	r1, #255	@ 0xff
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f002 fb30 	bl	800f43c <VL53L0X_WrByte>
 800cddc:	4603      	mov	r3, r0
 800cdde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800cde2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d109      	bne.n	800cdfe <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800cdea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cdee:	461a      	mov	r2, r3
 800cdf0:	21b6      	movs	r1, #182	@ 0xb6
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f002 fb22 	bl	800f43c <VL53L0X_WrByte>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800cdfe:	2300      	movs	r3, #0
 800ce00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce02:	e009      	b.n	800ce18 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce08:	4413      	add	r3, r2
 800ce0a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ce0e:	2200      	movs	r2, #0
 800ce10:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ce12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce14:	3301      	adds	r3, #1
 800ce16:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d3f1      	bcc.n	800ce04 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d011      	beq.n	800ce4a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ce26:	e002      	b.n	800ce2e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ce2e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ce32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce34:	4413      	add	r3, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff fc2a 	bl	800c690 <is_aperture>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d103      	bne.n	800ce4a <VL53L0X_set_reference_spads+0xe6>
 800ce42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d3ee      	bcc.n	800ce28 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800ce56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ce5a:	79f9      	ldrb	r1, [r7, #7]
 800ce5c:	f107 0214 	add.w	r2, r7, #20
 800ce60:	9204      	str	r2, [sp, #16]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	9203      	str	r2, [sp, #12]
 800ce66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce68:	9202      	str	r2, [sp, #8]
 800ce6a:	9301      	str	r3, [sp, #4]
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	4623      	mov	r3, r4
 800ce72:	4602      	mov	r2, r0
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f7ff fc83 	bl	800c780 <enable_ref_spads>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800ce80:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10c      	bne.n	800cea2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	79fa      	ldrb	r2, [r7, #7]
 800ce9e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800cea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3734      	adds	r7, #52	@ 0x34
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd90      	pop	{r4, r7, pc}

0800ceae <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ceba:	2300      	movs	r3, #0
 800cebc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10a      	bne.n	800cedc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800cec6:	78fb      	ldrb	r3, [r7, #3]
 800cec8:	f043 0301 	orr.w	r3, r3, #1
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	461a      	mov	r2, r3
 800ced0:	2100      	movs	r1, #0
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f002 fab2 	bl	800f43c <VL53L0X_WrByte>
 800ced8:	4603      	mov	r3, r0
 800ceda:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800cedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d104      	bne.n	800ceee <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f9bf 	bl	800d268 <VL53L0X_measurement_poll_for_completion>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ceee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d105      	bne.n	800cf02 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cef6:	2100      	movs	r1, #0
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff fab5 	bl	800c468 <VL53L0X_ClearInterruptMask>
 800cefe:	4603      	mov	r3, r0
 800cf00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cf02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f002 fa94 	bl	800f43c <VL53L0X_WrByte>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73fb      	strb	r3, [r7, #15]

	return Status;
 800cf18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	4611      	mov	r1, r2
 800cf30:	461a      	mov	r2, r3
 800cf32:	4603      	mov	r3, r0
 800cf34:	70fb      	strb	r3, [r7, #3]
 800cf36:	460b      	mov	r3, r1
 800cf38:	70bb      	strb	r3, [r7, #2]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf46:	2201      	movs	r2, #1
 800cf48:	21ff      	movs	r1, #255	@ 0xff
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f002 fa76 	bl	800f43c <VL53L0X_WrByte>
 800cf50:	4603      	mov	r3, r0
 800cf52:	461a      	mov	r2, r3
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f002 fa6c 	bl	800f43c <VL53L0X_WrByte>
 800cf64:	4603      	mov	r3, r0
 800cf66:	461a      	mov	r2, r3
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cf6e:	2200      	movs	r2, #0
 800cf70:	21ff      	movs	r1, #255	@ 0xff
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f002 fa62 	bl	800f43c <VL53L0X_WrByte>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800cf82:	78fb      	ldrb	r3, [r7, #3]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d01e      	beq.n	800cfc6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800cf88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d009      	beq.n	800cfa4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800cf90:	69ba      	ldr	r2, [r7, #24]
 800cf92:	21cb      	movs	r1, #203	@ 0xcb
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f002 fad3 	bl	800f540 <VL53L0X_RdByte>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800cfa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d02a      	beq.n	800d002 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800cfac:	f107 030e 	add.w	r3, r7, #14
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	21ee      	movs	r1, #238	@ 0xee
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f002 fac3 	bl	800f540 <VL53L0X_RdByte>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	73fb      	strb	r3, [r7, #15]
 800cfc4:	e01d      	b.n	800d002 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800cfc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00a      	beq.n	800cfe4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800cfce:	78bb      	ldrb	r3, [r7, #2]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	21cb      	movs	r1, #203	@ 0xcb
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f002 fa31 	bl	800f43c <VL53L0X_WrByte>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	461a      	mov	r2, r3
 800cfde:	7bfb      	ldrb	r3, [r7, #15]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800cfe4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00a      	beq.n	800d002 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800cfec:	787b      	ldrb	r3, [r7, #1]
 800cfee:	2280      	movs	r2, #128	@ 0x80
 800cff0:	21ee      	movs	r1, #238	@ 0xee
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f002 fa70 	bl	800f4d8 <VL53L0X_UpdateByte>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	4313      	orrs	r3, r2
 800d000:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d002:	2201      	movs	r2, #1
 800d004:	21ff      	movs	r1, #255	@ 0xff
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f002 fa18 	bl	800f43c <VL53L0X_WrByte>
 800d00c:	4603      	mov	r3, r0
 800d00e:	461a      	mov	r2, r3
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	4313      	orrs	r3, r2
 800d014:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d016:	2201      	movs	r2, #1
 800d018:	2100      	movs	r1, #0
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f002 fa0e 	bl	800f43c <VL53L0X_WrByte>
 800d020:	4603      	mov	r3, r0
 800d022:	461a      	mov	r2, r3
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	4313      	orrs	r3, r2
 800d028:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d02a:	2200      	movs	r2, #0
 800d02c:	21ff      	movs	r1, #255	@ 0xff
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f002 fa04 	bl	800f43c <VL53L0X_WrByte>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d03e:	7bbb      	ldrb	r3, [r7, #14]
 800d040:	f023 0310 	bic.w	r3, r3, #16
 800d044:	b2da      	uxtb	r2, r3
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	701a      	strb	r2, [r3, #0]

	return Status;
 800d04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b08a      	sub	sp, #40	@ 0x28
 800d05a:	af04      	add	r7, sp, #16
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	60b9      	str	r1, [r7, #8]
 800d060:	4611      	mov	r1, r2
 800d062:	461a      	mov	r2, r3
 800d064:	460b      	mov	r3, r1
 800d066:	71fb      	strb	r3, [r7, #7]
 800d068:	4613      	mov	r3, r2
 800d06a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d06c:	2300      	movs	r3, #0
 800d06e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d080:	79bb      	ldrb	r3, [r7, #6]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d003      	beq.n	800d08e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d08c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d08e:	2201      	movs	r2, #1
 800d090:	2101      	movs	r1, #1
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f002 f9d2 	bl	800f43c <VL53L0X_WrByte>
 800d098:	4603      	mov	r3, r0
 800d09a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d09c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d105      	bne.n	800d0b0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d0a4:	2140      	movs	r1, #64	@ 0x40
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f7ff ff01 	bl	800ceae <VL53L0X_perform_single_ref_calibration>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d115      	bne.n	800d0e4 <VL53L0X_perform_vhv_calibration+0x8e>
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d112      	bne.n	800d0e4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d0be:	7d39      	ldrb	r1, [r7, #20]
 800d0c0:	7d7a      	ldrb	r2, [r7, #21]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9303      	str	r3, [sp, #12]
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	9302      	str	r3, [sp, #8]
 800d0ca:	f107 0313 	add.w	r3, r7, #19
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f7ff ff23 	bl	800cf24 <VL53L0X_ref_calibration_io>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	75fb      	strb	r3, [r7, #23]
 800d0e2:	e002      	b.n	800d0ea <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d112      	bne.n	800d118 <VL53L0X_perform_vhv_calibration+0xc2>
 800d0f2:	79bb      	ldrb	r3, [r7, #6]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00f      	beq.n	800d118 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d0f8:	7dbb      	ldrb	r3, [r7, #22]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f002 f99c 	bl	800f43c <VL53L0X_WrByte>
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d103      	bne.n	800d118 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	7dba      	ldrb	r2, [r7, #22]
 800d114:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800d118:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3718      	adds	r7, #24
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08a      	sub	sp, #40	@ 0x28
 800d128:	af04      	add	r7, sp, #16
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4611      	mov	r1, r2
 800d130:	461a      	mov	r2, r3
 800d132:	460b      	mov	r3, r1
 800d134:	71fb      	strb	r3, [r7, #7]
 800d136:	4613      	mov	r3, r2
 800d138:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d13a:	2300      	movs	r3, #0
 800d13c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d14a:	79bb      	ldrb	r3, [r7, #6]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d156:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d158:	2202      	movs	r2, #2
 800d15a:	2101      	movs	r1, #1
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f002 f96d 	bl	800f43c <VL53L0X_WrByte>
 800d162:	4603      	mov	r3, r0
 800d164:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d105      	bne.n	800d17a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d16e:	2100      	movs	r1, #0
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff fe9c 	bl	800ceae <VL53L0X_perform_single_ref_calibration>
 800d176:	4603      	mov	r3, r0
 800d178:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d115      	bne.n	800d1ae <VL53L0X_perform_phase_calibration+0x8a>
 800d182:	79fb      	ldrb	r3, [r7, #7]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d112      	bne.n	800d1ae <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d188:	7d39      	ldrb	r1, [r7, #20]
 800d18a:	7d7a      	ldrb	r2, [r7, #21]
 800d18c:	2301      	movs	r3, #1
 800d18e:	9303      	str	r3, [sp, #12]
 800d190:	2300      	movs	r3, #0
 800d192:	9302      	str	r3, [sp, #8]
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	f107 0313 	add.w	r3, r7, #19
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	460b      	mov	r3, r1
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f7ff febe 	bl	800cf24 <VL53L0X_ref_calibration_io>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	75fb      	strb	r3, [r7, #23]
 800d1ac:	e002      	b.n	800d1b4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d1b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d112      	bne.n	800d1e2 <VL53L0X_perform_phase_calibration+0xbe>
 800d1bc:	79bb      	ldrb	r3, [r7, #6]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00f      	beq.n	800d1e2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d1c2:	7dbb      	ldrb	r3, [r7, #22]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f002 f937 	bl	800f43c <VL53L0X_WrByte>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d103      	bne.n	800d1e2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	7dba      	ldrb	r2, [r7, #22]
 800d1de:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800d1e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d20a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	2300      	movs	r3, #0
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff ff1f 	bl	800d056 <VL53L0X_perform_vhv_calibration>
 800d218:	4603      	mov	r3, r0
 800d21a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d21c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d107      	bne.n	800d234 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d224:	78fa      	ldrb	r2, [r7, #3]
 800d226:	2300      	movs	r3, #0
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff ff7a 	bl	800d124 <VL53L0X_perform_phase_calibration>
 800d230:	4603      	mov	r3, r0
 800d232:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d234:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10f      	bne.n	800d25c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d23c:	7dbb      	ldrb	r3, [r7, #22]
 800d23e:	461a      	mov	r2, r3
 800d240:	2101      	movs	r1, #1
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f002 f8fa 	bl	800f43c <VL53L0X_WrByte>
 800d248:	4603      	mov	r3, r0
 800d24a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d24c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d103      	bne.n	800d25c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	7dba      	ldrb	r2, [r7, #22]
 800d258:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800d25c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d270:	2300      	movs	r3, #0
 800d272:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d27c:	f107 030f 	add.w	r3, r7, #15
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7fe fe0e 	bl	800bea4 <VL53L0X_GetMeasurementDataReady>
 800d288:	4603      	mov	r3, r0
 800d28a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d110      	bne.n	800d2b6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d00f      	beq.n	800d2ba <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	3301      	adds	r3, #1
 800d29e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800d2a6:	d302      	bcc.n	800d2ae <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d2a8:	23f9      	movs	r3, #249	@ 0xf9
 800d2aa:	75fb      	strb	r3, [r7, #23]
			break;
 800d2ac:	e006      	b.n	800d2bc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f002 f9e2 	bl	800f678 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d2b4:	e7e2      	b.n	800d27c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d2b6:	bf00      	nop
 800d2b8:	e000      	b.n	800d2bc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d2ba:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d2bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d2d6:	79fb      	ldrb	r3, [r7, #7]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b085      	sub	sp, #20
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d2fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d2fe:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d300:	e002      	b.n	800d308 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	089b      	lsrs	r3, r3, #2
 800d306:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d8f8      	bhi.n	800d302 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d310:	e017      	b.n	800d342 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	4413      	add	r3, r2
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d30b      	bcc.n	800d336 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	4413      	add	r3, r2
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	4413      	add	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	e002      	b.n	800d33c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	085b      	lsrs	r3, r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	089b      	lsrs	r3, r3, #2
 800d340:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e4      	bne.n	800d312 <VL53L0X_isqrt+0x24>
	}

	return res;
 800d348:	68fb      	ldr	r3, [r7, #12]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d35e:	2300      	movs	r3, #0
 800d360:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d362:	2200      	movs	r2, #0
 800d364:	2183      	movs	r1, #131	@ 0x83
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f002 f868 	bl	800f43c <VL53L0X_WrByte>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461a      	mov	r2, r3
 800d370:	7dfb      	ldrb	r3, [r7, #23]
 800d372:	4313      	orrs	r3, r2
 800d374:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d11e      	bne.n	800d3bc <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d382:	f107 030f 	add.w	r3, r7, #15
 800d386:	461a      	mov	r2, r3
 800d388:	2183      	movs	r1, #131	@ 0x83
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f002 f8d8 	bl	800f540 <VL53L0X_RdByte>
 800d390:	4603      	mov	r3, r0
 800d392:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d394:	7bfb      	ldrb	r3, [r7, #15]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <VL53L0X_device_read_strobe+0x5a>
 800d39a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800d3ae:	d3e8      	bcc.n	800d382 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800d3b6:	d301      	bcc.n	800d3bc <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d3b8:	23f9      	movs	r3, #249	@ 0xf9
 800d3ba:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d3bc:	2201      	movs	r2, #1
 800d3be:	2183      	movs	r1, #131	@ 0x83
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f002 f83b 	bl	800f43c <VL53L0X_WrByte>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d3d0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b098      	sub	sp, #96	@ 0x60
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d40c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800d410:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d424:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d428:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d42c:	2b07      	cmp	r3, #7
 800d42e:	f000 8408 	beq.w	800dc42 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d432:	2201      	movs	r2, #1
 800d434:	2180      	movs	r1, #128	@ 0x80
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f002 f800 	bl	800f43c <VL53L0X_WrByte>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d444:	4313      	orrs	r3, r2
 800d446:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d44a:	2201      	movs	r2, #1
 800d44c:	21ff      	movs	r1, #255	@ 0xff
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f001 fff4 	bl	800f43c <VL53L0X_WrByte>
 800d454:	4603      	mov	r3, r0
 800d456:	461a      	mov	r2, r3
 800d458:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d45c:	4313      	orrs	r3, r2
 800d45e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d462:	2200      	movs	r2, #0
 800d464:	2100      	movs	r1, #0
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 ffe8 	bl	800f43c <VL53L0X_WrByte>
 800d46c:	4603      	mov	r3, r0
 800d46e:	461a      	mov	r2, r3
 800d470:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d474:	4313      	orrs	r3, r2
 800d476:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d47a:	2206      	movs	r2, #6
 800d47c:	21ff      	movs	r1, #255	@ 0xff
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f001 ffdc 	bl	800f43c <VL53L0X_WrByte>
 800d484:	4603      	mov	r3, r0
 800d486:	461a      	mov	r2, r3
 800d488:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d48c:	4313      	orrs	r3, r2
 800d48e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d492:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800d496:	461a      	mov	r2, r3
 800d498:	2183      	movs	r1, #131	@ 0x83
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f002 f850 	bl	800f540 <VL53L0X_RdByte>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d4ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d4b2:	f043 0304 	orr.w	r3, r3, #4
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	2183      	movs	r1, #131	@ 0x83
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 ffbd 	bl	800f43c <VL53L0X_WrByte>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800d4d0:	2207      	movs	r2, #7
 800d4d2:	21ff      	movs	r1, #255	@ 0xff
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f001 ffb1 	bl	800f43c <VL53L0X_WrByte>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	461a      	mov	r2, r3
 800d4de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	2181      	movs	r1, #129	@ 0x81
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 ffa5 	bl	800f43c <VL53L0X_WrByte>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f002 f8b9 	bl	800f678 <VL53L0X_PollingDelay>
 800d506:	4603      	mov	r3, r0
 800d508:	461a      	mov	r2, r3
 800d50a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d50e:	4313      	orrs	r3, r2
 800d510:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d514:	2201      	movs	r2, #1
 800d516:	2180      	movs	r1, #128	@ 0x80
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f001 ff8f 	bl	800f43c <VL53L0X_WrByte>
 800d51e:	4603      	mov	r3, r0
 800d520:	461a      	mov	r2, r3
 800d522:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d526:	4313      	orrs	r3, r2
 800d528:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800d52c:	78fb      	ldrb	r3, [r7, #3]
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 8098 	beq.w	800d668 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d538:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d53c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d540:	2b00      	cmp	r3, #0
 800d542:	f040 8091 	bne.w	800d668 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800d546:	226b      	movs	r2, #107	@ 0x6b
 800d548:	2194      	movs	r1, #148	@ 0x94
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f001 ff76 	bl	800f43c <VL53L0X_WrByte>
 800d550:	4603      	mov	r3, r0
 800d552:	461a      	mov	r2, r3
 800d554:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d558:	4313      	orrs	r3, r2
 800d55a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff fef9 	bl	800d356 <VL53L0X_device_read_strobe>
 800d564:	4603      	mov	r3, r0
 800d566:	461a      	mov	r2, r3
 800d568:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d56c:	4313      	orrs	r3, r2
 800d56e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d572:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d576:	461a      	mov	r2, r3
 800d578:	2190      	movs	r1, #144	@ 0x90
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f002 f840 	bl	800f600 <VL53L0X_RdDWord>
 800d580:	4603      	mov	r3, r0
 800d582:	461a      	mov	r2, r3
 800d584:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d588:	4313      	orrs	r3, r2
 800d58a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800d58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d590:	0a1b      	lsrs	r3, r3, #8
 800d592:	b2db      	uxtb	r3, r3
 800d594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d598:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	0bdb      	lsrs	r3, r3, #15
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800d5aa:	2224      	movs	r2, #36	@ 0x24
 800d5ac:	2194      	movs	r1, #148	@ 0x94
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f001 ff44 	bl	800f43c <VL53L0X_WrByte>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff fec7 	bl	800d356 <VL53L0X_device_read_strobe>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d5d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d5da:	461a      	mov	r2, r3
 800d5dc:	2190      	movs	r1, #144	@ 0x90
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f002 f80e 	bl	800f600 <VL53L0X_RdDWord>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	0e1b      	lsrs	r3, r3, #24
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	0c1b      	lsrs	r3, r3, #16
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	0a1b      	lsrs	r3, r3, #8
 800d606:	b2db      	uxtb	r3, r3
 800d608:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800d610:	2225      	movs	r2, #37	@ 0x25
 800d612:	2194      	movs	r1, #148	@ 0x94
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f001 ff11 	bl	800f43c <VL53L0X_WrByte>
 800d61a:	4603      	mov	r3, r0
 800d61c:	461a      	mov	r2, r3
 800d61e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d622:	4313      	orrs	r3, r2
 800d624:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7ff fe94 	bl	800d356 <VL53L0X_device_read_strobe>
 800d62e:	4603      	mov	r3, r0
 800d630:	461a      	mov	r2, r3
 800d632:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d636:	4313      	orrs	r3, r2
 800d638:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d63c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d640:	461a      	mov	r2, r3
 800d642:	2190      	movs	r1, #144	@ 0x90
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f001 ffdb 	bl	800f600 <VL53L0X_RdDWord>
 800d64a:	4603      	mov	r3, r0
 800d64c:	461a      	mov	r2, r3
 800d64e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d652:	4313      	orrs	r3, r2
 800d654:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800d658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65a:	0e1b      	lsrs	r3, r3, #24
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	0c1b      	lsrs	r3, r3, #16
 800d664:	b2db      	uxtb	r3, r3
 800d666:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800d668:	78fb      	ldrb	r3, [r7, #3]
 800d66a:	f003 0302 	and.w	r3, r3, #2
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f000 8189 	beq.w	800d986 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d674:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d678:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f040 8182 	bne.w	800d986 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800d682:	2202      	movs	r2, #2
 800d684:	2194      	movs	r1, #148	@ 0x94
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f001 fed8 	bl	800f43c <VL53L0X_WrByte>
 800d68c:	4603      	mov	r3, r0
 800d68e:	461a      	mov	r2, r3
 800d690:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d694:	4313      	orrs	r3, r2
 800d696:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7ff fe5b 	bl	800d356 <VL53L0X_device_read_strobe>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800d6ae:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	2190      	movs	r1, #144	@ 0x90
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 ff42 	bl	800f540 <VL53L0X_RdByte>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	461a      	mov	r2, r3
 800d6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d6ca:	227b      	movs	r2, #123	@ 0x7b
 800d6cc:	2194      	movs	r1, #148	@ 0x94
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f001 feb4 	bl	800f43c <VL53L0X_WrByte>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff fe37 	bl	800d356 <VL53L0X_device_read_strobe>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800d6f6:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	2190      	movs	r1, #144	@ 0x90
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f001 ff1e 	bl	800f540 <VL53L0X_RdByte>
 800d704:	4603      	mov	r3, r0
 800d706:	461a      	mov	r2, r3
 800d708:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d70c:	4313      	orrs	r3, r2
 800d70e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800d712:	2277      	movs	r2, #119	@ 0x77
 800d714:	2194      	movs	r1, #148	@ 0x94
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 fe90 	bl	800f43c <VL53L0X_WrByte>
 800d71c:	4603      	mov	r3, r0
 800d71e:	461a      	mov	r2, r3
 800d720:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d724:	4313      	orrs	r3, r2
 800d726:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fe13 	bl	800d356 <VL53L0X_device_read_strobe>
 800d730:	4603      	mov	r3, r0
 800d732:	461a      	mov	r2, r3
 800d734:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d738:	4313      	orrs	r3, r2
 800d73a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d73e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d742:	461a      	mov	r2, r3
 800d744:	2190      	movs	r1, #144	@ 0x90
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 ff5a 	bl	800f600 <VL53L0X_RdDWord>
 800d74c:	4603      	mov	r3, r0
 800d74e:	461a      	mov	r2, r3
 800d750:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d754:	4313      	orrs	r3, r2
 800d756:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800d75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75c:	0e5b      	lsrs	r3, r3, #25
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d764:	b2db      	uxtb	r3, r3
 800d766:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	0c9b      	lsrs	r3, r3, #18
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d772:	b2db      	uxtb	r3, r3
 800d774:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	0adb      	lsrs	r3, r3, #11
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d780:	b2db      	uxtb	r3, r3
 800d782:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800d784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d786:	091b      	lsrs	r3, r3, #4
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d794:	b2db      	uxtb	r3, r3
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d7a4:	2278      	movs	r2, #120	@ 0x78
 800d7a6:	2194      	movs	r1, #148	@ 0x94
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 fe47 	bl	800f43c <VL53L0X_WrByte>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff fdca 	bl	800d356 <VL53L0X_device_read_strobe>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d7d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	2190      	movs	r1, #144	@ 0x90
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f001 ff11 	bl	800f600 <VL53L0X_RdDWord>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ee:	0f5b      	lsrs	r3, r3, #29
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7f6:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d7f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7fc:	4413      	add	r3, r2
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d804:	0d9b      	lsrs	r3, r3, #22
 800d806:	b2db      	uxtb	r3, r3
 800d808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	0bdb      	lsrs	r3, r3, #15
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d820:	0a1b      	lsrs	r3, r3, #8
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82e:	085b      	lsrs	r3, r3, #1
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d836:	b2db      	uxtb	r3, r3
 800d838:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	019b      	lsls	r3, r3, #6
 800d840:	b2db      	uxtb	r3, r3
 800d842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d84c:	2279      	movs	r2, #121	@ 0x79
 800d84e:	2194      	movs	r1, #148	@ 0x94
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f001 fdf3 	bl	800f43c <VL53L0X_WrByte>
 800d856:	4603      	mov	r3, r0
 800d858:	461a      	mov	r2, r3
 800d85a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d85e:	4313      	orrs	r3, r2
 800d860:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff fd76 	bl	800d356 <VL53L0X_device_read_strobe>
 800d86a:	4603      	mov	r3, r0
 800d86c:	461a      	mov	r2, r3
 800d86e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d872:	4313      	orrs	r3, r2
 800d874:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d878:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d87c:	461a      	mov	r2, r3
 800d87e:	2190      	movs	r1, #144	@ 0x90
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 febd 	bl	800f600 <VL53L0X_RdDWord>
 800d886:	4603      	mov	r3, r0
 800d888:	461a      	mov	r2, r3
 800d88a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d88e:	4313      	orrs	r3, r2
 800d890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d896:	0e9b      	lsrs	r3, r3, #26
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d89e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d8a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8a4:	4413      	add	r3, r2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	0cdb      	lsrs	r3, r3, #19
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ba:	0b1b      	lsrs	r3, r3, #12
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c8:	095b      	lsrs	r3, r3, #5
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d8e6:	227a      	movs	r2, #122	@ 0x7a
 800d8e8:	2194      	movs	r1, #148	@ 0x94
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 fda6 	bl	800f43c <VL53L0X_WrByte>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff fd29 	bl	800d356 <VL53L0X_device_read_strobe>
 800d904:	4603      	mov	r3, r0
 800d906:	461a      	mov	r2, r3
 800d908:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d90c:	4313      	orrs	r3, r2
 800d90e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d912:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d916:	461a      	mov	r2, r3
 800d918:	2190      	movs	r1, #144	@ 0x90
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f001 fe70 	bl	800f600 <VL53L0X_RdDWord>
 800d920:	4603      	mov	r3, r0
 800d922:	461a      	mov	r2, r3
 800d924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d928:	4313      	orrs	r3, r2
 800d92a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d930:	0f9b      	lsrs	r3, r3, #30
 800d932:	b2db      	uxtb	r3, r3
 800d934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d938:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d93a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d93e:	4413      	add	r3, r2
 800d940:	b2db      	uxtb	r3, r3
 800d942:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d946:	0ddb      	lsrs	r3, r3, #23
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	0c1b      	lsrs	r3, r3, #16
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d962:	0a5b      	lsrs	r3, r3, #9
 800d964:	b2db      	uxtb	r3, r3
 800d966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d972:	089b      	lsrs	r3, r3, #2
 800d974:	b2db      	uxtb	r3, r3
 800d976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800d980:	2300      	movs	r3, #0
 800d982:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800d986:	78fb      	ldrb	r3, [r7, #3]
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 80f1 	beq.w	800db74 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d992:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d996:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f040 80ea 	bne.w	800db74 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d9a0:	227b      	movs	r2, #123	@ 0x7b
 800d9a2:	2194      	movs	r1, #148	@ 0x94
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f001 fd49 	bl	800f43c <VL53L0X_WrByte>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff fccc 	bl	800d356 <VL53L0X_device_read_strobe>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d9cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	2190      	movs	r1, #144	@ 0x90
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f001 fe13 	bl	800f600 <VL53L0X_RdDWord>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	461a      	mov	r2, r3
 800d9de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d9e8:	227c      	movs	r2, #124	@ 0x7c
 800d9ea:	2194      	movs	r1, #148	@ 0x94
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f001 fd25 	bl	800f43c <VL53L0X_WrByte>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff fca8 	bl	800d356 <VL53L0X_device_read_strobe>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da0e:	4313      	orrs	r3, r2
 800da10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800da14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da18:	461a      	mov	r2, r3
 800da1a:	2190      	movs	r1, #144	@ 0x90
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f001 fdef 	bl	800f600 <VL53L0X_RdDWord>
 800da22:	4603      	mov	r3, r0
 800da24:	461a      	mov	r2, r3
 800da26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da2a:	4313      	orrs	r3, r2
 800da2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800da30:	2273      	movs	r2, #115	@ 0x73
 800da32:	2194      	movs	r1, #148	@ 0x94
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 fd01 	bl	800f43c <VL53L0X_WrByte>
 800da3a:	4603      	mov	r3, r0
 800da3c:	461a      	mov	r2, r3
 800da3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da42:	4313      	orrs	r3, r2
 800da44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff fc84 	bl	800d356 <VL53L0X_device_read_strobe>
 800da4e:	4603      	mov	r3, r0
 800da50:	461a      	mov	r2, r3
 800da52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da56:	4313      	orrs	r3, r2
 800da58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800da5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800da60:	461a      	mov	r2, r3
 800da62:	2190      	movs	r1, #144	@ 0x90
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f001 fdcb 	bl	800f600 <VL53L0X_RdDWord>
 800da6a:	4603      	mov	r3, r0
 800da6c:	461a      	mov	r2, r3
 800da6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da72:	4313      	orrs	r3, r2
 800da74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800da78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800da80:	2274      	movs	r2, #116	@ 0x74
 800da82:	2194      	movs	r1, #148	@ 0x94
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f001 fcd9 	bl	800f43c <VL53L0X_WrByte>
 800da8a:	4603      	mov	r3, r0
 800da8c:	461a      	mov	r2, r3
 800da8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da92:	4313      	orrs	r3, r2
 800da94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff fc5c 	bl	800d356 <VL53L0X_device_read_strobe>
 800da9e:	4603      	mov	r3, r0
 800daa0:	461a      	mov	r2, r3
 800daa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800daa6:	4313      	orrs	r3, r2
 800daa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800daac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dab0:	461a      	mov	r2, r3
 800dab2:	2190      	movs	r1, #144	@ 0x90
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f001 fda3 	bl	800f600 <VL53L0X_RdDWord>
 800daba:	4603      	mov	r3, r0
 800dabc:	461a      	mov	r2, r3
 800dabe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dac2:	4313      	orrs	r3, r2
 800dac4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daca:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800dacc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dace:	4313      	orrs	r3, r2
 800dad0:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800dad2:	2275      	movs	r2, #117	@ 0x75
 800dad4:	2194      	movs	r1, #148	@ 0x94
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f001 fcb0 	bl	800f43c <VL53L0X_WrByte>
 800dadc:	4603      	mov	r3, r0
 800dade:	461a      	mov	r2, r3
 800dae0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dae4:	4313      	orrs	r3, r2
 800dae6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff fc33 	bl	800d356 <VL53L0X_device_read_strobe>
 800daf0:	4603      	mov	r3, r0
 800daf2:	461a      	mov	r2, r3
 800daf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800daf8:	4313      	orrs	r3, r2
 800dafa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dafe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800db02:	461a      	mov	r2, r3
 800db04:	2190      	movs	r1, #144	@ 0x90
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f001 fd7a 	bl	800f600 <VL53L0X_RdDWord>
 800db0c:	4603      	mov	r3, r0
 800db0e:	461a      	mov	r2, r3
 800db10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db14:	4313      	orrs	r3, r2
 800db16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800db1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800db1e:	b29b      	uxth	r3, r3
 800db20:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800db22:	2276      	movs	r2, #118	@ 0x76
 800db24:	2194      	movs	r1, #148	@ 0x94
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f001 fc88 	bl	800f43c <VL53L0X_WrByte>
 800db2c:	4603      	mov	r3, r0
 800db2e:	461a      	mov	r2, r3
 800db30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db34:	4313      	orrs	r3, r2
 800db36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7ff fc0b 	bl	800d356 <VL53L0X_device_read_strobe>
 800db40:	4603      	mov	r3, r0
 800db42:	461a      	mov	r2, r3
 800db44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db48:	4313      	orrs	r3, r2
 800db4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800db52:	461a      	mov	r2, r3
 800db54:	2190      	movs	r1, #144	@ 0x90
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f001 fd52 	bl	800f600 <VL53L0X_RdDWord>
 800db5c:	4603      	mov	r3, r0
 800db5e:	461a      	mov	r2, r3
 800db60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db64:	4313      	orrs	r3, r2
 800db66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800db6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6c:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800db6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db70:	4313      	orrs	r3, r2
 800db72:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800db74:	2200      	movs	r2, #0
 800db76:	2181      	movs	r1, #129	@ 0x81
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f001 fc5f 	bl	800f43c <VL53L0X_WrByte>
 800db7e:	4603      	mov	r3, r0
 800db80:	461a      	mov	r2, r3
 800db82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db86:	4313      	orrs	r3, r2
 800db88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800db8c:	2206      	movs	r2, #6
 800db8e:	21ff      	movs	r1, #255	@ 0xff
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f001 fc53 	bl	800f43c <VL53L0X_WrByte>
 800db96:	4603      	mov	r3, r0
 800db98:	461a      	mov	r2, r3
 800db9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db9e:	4313      	orrs	r3, r2
 800dba0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dba4:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800dba8:	461a      	mov	r2, r3
 800dbaa:	2183      	movs	r1, #131	@ 0x83
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f001 fcc7 	bl	800f540 <VL53L0X_RdByte>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800dbc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbc4:	f023 0304 	bic.w	r3, r3, #4
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	2183      	movs	r1, #131	@ 0x83
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f001 fc34 	bl	800f43c <VL53L0X_WrByte>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	21ff      	movs	r1, #255	@ 0xff
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f001 fc28 	bl	800f43c <VL53L0X_WrByte>
 800dbec:	4603      	mov	r3, r0
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f001 fc1c 	bl	800f43c <VL53L0X_WrByte>
 800dc04:	4603      	mov	r3, r0
 800dc06:	461a      	mov	r2, r3
 800dc08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800dc12:	2200      	movs	r2, #0
 800dc14:	21ff      	movs	r1, #255	@ 0xff
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f001 fc10 	bl	800f43c <VL53L0X_WrByte>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	461a      	mov	r2, r3
 800dc20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc24:	4313      	orrs	r3, r2
 800dc26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2180      	movs	r1, #128	@ 0x80
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f001 fc04 	bl	800f43c <VL53L0X_WrByte>
 800dc34:	4603      	mov	r3, r0
 800dc36:	461a      	mov	r2, r3
 800dc38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800dc42:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f040 808f 	bne.w	800dd6a <VL53L0X_get_info_from_device+0x98e>
 800dc4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dc50:	2b07      	cmp	r3, #7
 800dc52:	f000 808a 	beq.w	800dd6a <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800dc56:	78fb      	ldrb	r3, [r7, #3]
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d024      	beq.n	800dcaa <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dc60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dc64:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d11e      	bne.n	800dcaa <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800dc72:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800dc7c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dc80:	2300      	movs	r3, #0
 800dc82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc84:	e00e      	b.n	800dca4 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800dc86:	f107 0208 	add.w	r2, r7, #8
 800dc8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc8c:	4413      	add	r3, r2
 800dc8e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc94:	4413      	add	r3, r2
 800dc96:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800dc9a:	460a      	mov	r2, r1
 800dc9c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800dc9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dca0:	3301      	adds	r3, #1
 800dca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dca6:	2b05      	cmp	r3, #5
 800dca8:	dded      	ble.n	800dc86 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800dcaa:	78fb      	ldrb	r3, [r7, #3]
 800dcac:	f003 0302 	and.w	r3, r3, #2
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d018      	beq.n	800dce6 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800dcb4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dcb8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d112      	bne.n	800dce6 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dcc0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dcca:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	33f3      	adds	r3, #243	@ 0xf3
 800dcd8:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800dcda:	f107 0310 	add.w	r3, r7, #16
 800dcde:	4619      	mov	r1, r3
 800dce0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dce2:	f002 fbf0 	bl	80104c6 <strcpy>

		}

		if (((option & 4) == 4) &&
 800dce6:	78fb      	ldrb	r3, [r7, #3]
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d030      	beq.n	800dd52 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dcf0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dcf4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d12a      	bne.n	800dd52 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dcfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800dd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd0e:	025b      	lsls	r3, r3, #9
 800dd10:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd16:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800dd20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d011      	beq.n	800dd4a <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800dd26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd2a:	1ad3      	subs	r3, r2, r3
 800dd2c:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800dd2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dd34:	fb02 f303 	mul.w	r3, r2, r3
 800dd38:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800dd3a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800dd3e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800dd42:	425b      	negs	r3, r3
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800dd4a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800dd52:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800dd56:	78fb      	ldrb	r3, [r7, #3]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800dd60:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dd6a:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3760      	adds	r7, #96	@ 0x60
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b087      	sub	sp, #28
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	460b      	mov	r3, r1
 800dd80:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800dd82:	f240 6277 	movw	r2, #1655	@ 0x677
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800dd8e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800dd92:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800dd94:	78fb      	ldrb	r3, [r7, #3]
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	fb02 f303 	mul.w	r3, r2, r3
 800dda2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800dda4:	68bb      	ldr	r3, [r7, #8]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b087      	sub	sp, #28
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d015      	beq.n	800ddf8 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ddd2:	e005      	b.n	800dde0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	085b      	lsrs	r3, r3, #1
 800ddd8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800ddda:	89fb      	ldrh	r3, [r7, #14]
 800dddc:	3301      	adds	r3, #1
 800ddde:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	2bff      	cmp	r3, #255	@ 0xff
 800dde4:	d8f6      	bhi.n	800ddd4 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800dde6:	89fb      	ldrh	r3, [r7, #14]
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800ddf4:	4413      	add	r3, r2
 800ddf6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800ddf8:	8afb      	ldrh	r3, [r7, #22]

}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800de06:	b480      	push	{r7}
 800de08:	b085      	sub	sp, #20
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	4603      	mov	r3, r0
 800de0e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800de14:	88fb      	ldrh	r3, [r7, #6]
 800de16:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800de18:	88fa      	ldrh	r2, [r7, #6]
 800de1a:	0a12      	lsrs	r2, r2, #8
 800de1c:	b292      	uxth	r2, r2
 800de1e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800de20:	3301      	adds	r3, #1
 800de22:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800de24:	68fb      	ldr	r3, [r7, #12]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
	...

0800de34 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b088      	sub	sp, #32
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800de46:	79fb      	ldrb	r3, [r7, #7]
 800de48:	4619      	mov	r1, r3
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7ff ff93 	bl	800dd76 <VL53L0X_calc_macro_period_ps>
 800de50:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800de58:	4a0a      	ldr	r2, [pc, #40]	@ (800de84 <VL53L0X_calc_timeout_mclks+0x50>)
 800de5a:	fba2 2303 	umull	r2, r3, r2, r3
 800de5e:	099b      	lsrs	r3, r3, #6
 800de60:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800de68:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	085b      	lsrs	r3, r3, #1
 800de70:	441a      	add	r2, r3
	timeout_period_mclks =
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	fbb2 f3f3 	udiv	r3, r2, r3
 800de78:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800de7a:	69fb      	ldr	r3, [r7, #28]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3720      	adds	r7, #32
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	10624dd3 	.word	0x10624dd3

0800de88 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	807b      	strh	r3, [r7, #2]
 800de94:	4613      	mov	r3, r2
 800de96:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800de9c:	787b      	ldrb	r3, [r7, #1]
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ff68 	bl	800dd76 <VL53L0X_calc_macro_period_ps>
 800dea6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800deae:	4a0a      	ldr	r2, [pc, #40]	@ (800ded8 <VL53L0X_calc_timeout_us+0x50>)
 800deb0:	fba2 2303 	umull	r2, r3, r2, r3
 800deb4:	099b      	lsrs	r3, r3, #6
 800deb6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800deb8:	887b      	ldrh	r3, [r7, #2]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	fb02 f303 	mul.w	r3, r2, r3
 800dec0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800dec4:	4a04      	ldr	r2, [pc, #16]	@ (800ded8 <VL53L0X_calc_timeout_us+0x50>)
 800dec6:	fba2 2303 	umull	r2, r3, r2, r3
 800deca:	099b      	lsrs	r3, r3, #6
 800decc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800dece:	697b      	ldr	r3, [r7, #20]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	10624dd3 	.word	0x10624dd3

0800dedc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08c      	sub	sp, #48	@ 0x30
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	460b      	mov	r3, r1
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800deea:	2300      	movs	r3, #0
 800deec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800df02:	7afb      	ldrb	r3, [r7, #11]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d005      	beq.n	800df14 <get_sequence_step_timeout+0x38>
 800df08:	7afb      	ldrb	r3, [r7, #11]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d002      	beq.n	800df14 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800df0e:	7afb      	ldrb	r3, [r7, #11]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d127      	bne.n	800df64 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df14:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800df18:	461a      	mov	r2, r3
 800df1a:	2100      	movs	r1, #0
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f7fd fa9f 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800df22:	4603      	mov	r3, r0
 800df24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800df28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d109      	bne.n	800df44 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800df30:	f107 0320 	add.w	r3, r7, #32
 800df34:	461a      	mov	r2, r3
 800df36:	2146      	movs	r1, #70	@ 0x46
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f001 fb01 	bl	800f540 <VL53L0X_RdByte>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800df44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff ff5c 	bl	800de06 <VL53L0X_decode_timeout>
 800df4e:	4603      	mov	r3, r0
 800df50:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800df52:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800df56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df58:	4619      	mov	r1, r3
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff ff94 	bl	800de88 <VL53L0X_calc_timeout_us>
 800df60:	62b8      	str	r0, [r7, #40]	@ 0x28
 800df62:	e092      	b.n	800e08a <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800df64:	7afb      	ldrb	r3, [r7, #11]
 800df66:	2b03      	cmp	r3, #3
 800df68:	d135      	bne.n	800dfd6 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df6a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800df6e:	461a      	mov	r2, r3
 800df70:	2100      	movs	r1, #0
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7fd fa74 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800df78:	4603      	mov	r3, r0
 800df7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800df7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800df82:	2b00      	cmp	r3, #0
 800df84:	f040 8081 	bne.w	800e08a <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800df88:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800df8c:	461a      	mov	r2, r3
 800df8e:	2100      	movs	r1, #0
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f7fd fa65 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800df96:	4603      	mov	r3, r0
 800df98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800df9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d109      	bne.n	800dfb8 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800dfa4:	f107 031e 	add.w	r3, r7, #30
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	2151      	movs	r1, #81	@ 0x51
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f001 faf1 	bl	800f594 <VL53L0X_RdWord>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dfb8:	8bfb      	ldrh	r3, [r7, #30]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff ff23 	bl	800de06 <VL53L0X_decode_timeout>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800dfc4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800dfc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfca:	4619      	mov	r1, r3
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7ff ff5b 	bl	800de88 <VL53L0X_calc_timeout_us>
 800dfd2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dfd4:	e059      	b.n	800e08a <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800dfd6:	7afb      	ldrb	r3, [r7, #11]
 800dfd8:	2b04      	cmp	r3, #4
 800dfda:	d156      	bne.n	800e08a <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dfdc:	f107 0314 	add.w	r3, r7, #20
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7fd fb46 	bl	800b674 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d01d      	beq.n	800e02e <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dff2:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800dff6:	461a      	mov	r2, r3
 800dff8:	2100      	movs	r1, #0
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7fd fa30 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800e000:	4603      	mov	r3, r0
 800e002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e006:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10f      	bne.n	800e02e <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800e00e:	f107 031e 	add.w	r3, r7, #30
 800e012:	461a      	mov	r2, r3
 800e014:	2151      	movs	r1, #81	@ 0x51
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f001 fabc 	bl	800f594 <VL53L0X_RdWord>
 800e01c:	4603      	mov	r3, r0
 800e01e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e022:	8bfb      	ldrh	r3, [r7, #30]
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff feee 	bl	800de06 <VL53L0X_decode_timeout>
 800e02a:	4603      	mov	r3, r0
 800e02c:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e02e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e032:	2b00      	cmp	r3, #0
 800e034:	d109      	bne.n	800e04a <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e036:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800e03a:	461a      	mov	r2, r3
 800e03c:	2101      	movs	r1, #1
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f7fd fa0e 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800e044:	4603      	mov	r3, r0
 800e046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e04a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10f      	bne.n	800e072 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800e052:	f107 031c 	add.w	r3, r7, #28
 800e056:	461a      	mov	r2, r3
 800e058:	2171      	movs	r1, #113	@ 0x71
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f001 fa9a 	bl	800f594 <VL53L0X_RdWord>
 800e060:	4603      	mov	r3, r0
 800e062:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e066:	8bbb      	ldrh	r3, [r7, #28]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fecc 	bl	800de06 <VL53L0X_decode_timeout>
 800e06e:	4603      	mov	r3, r0
 800e070:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e072:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e074:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e07a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800e07e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e080:	4619      	mov	r1, r3
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff ff00 	bl	800de88 <VL53L0X_calc_timeout_us>
 800e088:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e08e:	601a      	str	r2, [r3, #0]

	return Status;
 800e090:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e094:	4618      	mov	r0, r3
 800e096:	3730      	adds	r7, #48	@ 0x30
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08a      	sub	sp, #40	@ 0x28
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e0b0:	7afb      	ldrb	r3, [r7, #11]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d005      	beq.n	800e0c2 <set_sequence_step_timeout+0x26>
 800e0b6:	7afb      	ldrb	r3, [r7, #11]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d002      	beq.n	800e0c2 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e0bc:	7afb      	ldrb	r3, [r7, #11]
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d138      	bne.n	800e134 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e0c2:	f107 031b 	add.w	r3, r7, #27
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7fd f9c8 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e0d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d11a      	bne.n	800e114 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e0de:	7efb      	ldrb	r3, [r7, #27]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	6879      	ldr	r1, [r7, #4]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7ff fea5 	bl	800de34 <VL53L0X_calc_timeout_mclks>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e0ee:	8bbb      	ldrh	r3, [r7, #28]
 800e0f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0f4:	d903      	bls.n	800e0fe <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e0f6:	23ff      	movs	r3, #255	@ 0xff
 800e0f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e0fc:	e004      	b.n	800e108 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e0fe:	8bbb      	ldrh	r3, [r7, #28]
 800e100:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e102:	3b01      	subs	r3, #1
 800e104:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e114:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f040 80ab 	bne.w	800e274 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e11e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e122:	461a      	mov	r2, r3
 800e124:	2146      	movs	r1, #70	@ 0x46
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f001 f988 	bl	800f43c <VL53L0X_WrByte>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e132:	e09f      	b.n	800e274 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e134:	7afb      	ldrb	r3, [r7, #11]
 800e136:	2b03      	cmp	r3, #3
 800e138:	d135      	bne.n	800e1a6 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e13a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d11b      	bne.n	800e17a <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e142:	f107 031b 	add.w	r3, r7, #27
 800e146:	461a      	mov	r2, r3
 800e148:	2100      	movs	r1, #0
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7fd f988 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800e150:	4603      	mov	r3, r0
 800e152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e156:	7efb      	ldrb	r3, [r7, #27]
 800e158:	461a      	mov	r2, r3
 800e15a:	6879      	ldr	r1, [r7, #4]
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7ff fe69 	bl	800de34 <VL53L0X_calc_timeout_mclks>
 800e162:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e164:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff fe22 	bl	800ddb2 <VL53L0X_encode_timeout>
 800e16e:	4603      	mov	r3, r0
 800e170:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e172:	8b3a      	ldrh	r2, [r7, #24]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e17a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d108      	bne.n	800e194 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e182:	8b3b      	ldrh	r3, [r7, #24]
 800e184:	461a      	mov	r2, r3
 800e186:	2151      	movs	r1, #81	@ 0x51
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f001 f97b 	bl	800f484 <VL53L0X_WrWord>
 800e18e:	4603      	mov	r3, r0
 800e190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e194:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d16b      	bne.n	800e274 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800e1a4:	e066      	b.n	800e274 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e1a6:	7afb      	ldrb	r3, [r7, #11]
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	d160      	bne.n	800e26e <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e1ac:	f107 0310 	add.w	r3, r7, #16
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f7fd fa5e 	bl	800b674 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e1bc:	7cfb      	ldrb	r3, [r7, #19]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d01d      	beq.n	800e1fe <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e1c2:	f107 031b 	add.w	r3, r7, #27
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7fd f948 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e1d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10f      	bne.n	800e1fe <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e1de:	f107 0318 	add.w	r3, r7, #24
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	2151      	movs	r1, #81	@ 0x51
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f001 f9d4 	bl	800f594 <VL53L0X_RdWord>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e1f2:	8b3b      	ldrh	r3, [r7, #24]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7ff fe06 	bl	800de06 <VL53L0X_decode_timeout>
 800e1fa:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e1fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e1fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e202:	2b00      	cmp	r3, #0
 800e204:	d109      	bne.n	800e21a <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e206:	f107 031b 	add.w	r3, r7, #27
 800e20a:	461a      	mov	r2, r3
 800e20c:	2101      	movs	r1, #1
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7fd f926 	bl	800b460 <VL53L0X_GetVcselPulsePeriod>
 800e214:	4603      	mov	r3, r0
 800e216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e21a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d128      	bne.n	800e274 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e222:	7efb      	ldrb	r3, [r7, #27]
 800e224:	461a      	mov	r2, r3
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f7ff fe03 	bl	800de34 <VL53L0X_calc_timeout_mclks>
 800e22e:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e230:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e232:	6a3a      	ldr	r2, [r7, #32]
 800e234:	4413      	add	r3, r2
 800e236:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e238:	6a38      	ldr	r0, [r7, #32]
 800e23a:	f7ff fdba 	bl	800ddb2 <VL53L0X_encode_timeout>
 800e23e:	4603      	mov	r3, r0
 800e240:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e242:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e246:	2b00      	cmp	r3, #0
 800e248:	d108      	bne.n	800e25c <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e24a:	8bfb      	ldrh	r3, [r7, #30]
 800e24c:	461a      	mov	r2, r3
 800e24e:	2171      	movs	r1, #113	@ 0x71
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f001 f917 	bl	800f484 <VL53L0X_WrWord>
 800e256:	4603      	mov	r3, r0
 800e258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e260:	2b00      	cmp	r3, #0
 800e262:	d107      	bne.n	800e274 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800e26c:	e002      	b.n	800e274 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e26e:	23fc      	movs	r3, #252	@ 0xfc
 800e270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800e274:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3728      	adds	r7, #40	@ 0x28
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	460b      	mov	r3, r1
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e28e:	2300      	movs	r3, #0
 800e290:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800e292:	7afb      	ldrb	r3, [r7, #11]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <VL53L0X_get_vcsel_pulse_period+0x1e>
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d00a      	beq.n	800e2b2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800e29c:	e013      	b.n	800e2c6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e29e:	f107 0316 	add.w	r3, r7, #22
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	2150      	movs	r1, #80	@ 0x50
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f001 f94a 	bl	800f540 <VL53L0X_RdByte>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e2b0:	e00b      	b.n	800e2ca <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e2b2:	f107 0316 	add.w	r3, r7, #22
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	2170      	movs	r1, #112	@ 0x70
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f001 f940 	bl	800f540 <VL53L0X_RdByte>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e2c4:	e001      	b.n	800e2ca <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e2c6:	23fc      	movs	r3, #252	@ 0xfc
 800e2c8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800e2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d107      	bne.n	800e2e2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800e2d2:	7dbb      	ldrb	r3, [r7, #22]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fe fff7 	bl	800d2c8 <VL53L0X_decode_vcsel_period>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	701a      	strb	r2, [r3, #0]

	return Status;
 800e2e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b092      	sub	sp, #72	@ 0x48
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e2fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e302:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e304:	f240 7376 	movw	r3, #1910	@ 0x776
 800e308:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e30a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800e30e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e310:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800e314:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e316:	f240 234e 	movw	r3, #590	@ 0x24e
 800e31a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e31c:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800e320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e322:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800e326:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e328:	f240 2326 	movw	r3, #550	@ 0x226
 800e32c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e332:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800e336:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e33c:	683a      	ldr	r2, [r7, #0]
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	429a      	cmp	r2, r3
 800e342:	d205      	bcs.n	800e350 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e344:	23fc      	movs	r3, #252	@ 0xfc
 800e346:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800e34a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e34e:	e0aa      	b.n	800e4a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e354:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e35c:	f107 0314 	add.w	r3, r7, #20
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7fd f986 	bl	800b674 <VL53L0X_GetSequenceStepEnables>
 800e368:	4603      	mov	r3, r0
 800e36a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800e36e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e372:	2b00      	cmp	r3, #0
 800e374:	d15b      	bne.n	800e42e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800e376:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d105      	bne.n	800e388 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800e37c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d102      	bne.n	800e388 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800e382:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800e384:	2b00      	cmp	r3, #0
 800e386:	d052      	beq.n	800e42e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e388:	f107 0310 	add.w	r3, r7, #16
 800e38c:	461a      	mov	r2, r3
 800e38e:	2102      	movs	r1, #2
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff fda3 	bl	800dedc <get_sequence_step_timeout>
 800e396:	4603      	mov	r3, r0
 800e398:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e39c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800e3a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e3a8:	e07d      	b.n	800e4a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e3aa:	7d3b      	ldrb	r3, [r7, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00f      	beq.n	800e3d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e3b0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e3b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3b4:	4413      	add	r3, r2
 800e3b6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e3b8:	69fa      	ldr	r2, [r7, #28]
 800e3ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d204      	bcs.n	800e3ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e3c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3c8:	e002      	b.n	800e3d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e3ca:	23fc      	movs	r3, #252	@ 0xfc
 800e3cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800e3d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800e3d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e3dc:	e063      	b.n	800e4a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800e3de:	7dbb      	ldrb	r3, [r7, #22]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d011      	beq.n	800e408 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e8:	4413      	add	r3, r2
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e3ee:	69fa      	ldr	r2, [r7, #28]
 800e3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d204      	bcs.n	800e400 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e3f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3fe:	e016      	b.n	800e42e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e400:	23fc      	movs	r3, #252	@ 0xfc
 800e402:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e406:	e012      	b.n	800e42e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800e408:	7d7b      	ldrb	r3, [r7, #21]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00f      	beq.n	800e42e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e412:	4413      	add	r3, r2
 800e414:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e416:	69fa      	ldr	r2, [r7, #28]
 800e418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d204      	bcs.n	800e428 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e41e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	643b      	str	r3, [r7, #64]	@ 0x40
 800e426:	e002      	b.n	800e42e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e428:	23fc      	movs	r3, #252	@ 0xfc
 800e42a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e42e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e436:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e43a:	e034      	b.n	800e4a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800e43c:	7dfb      	ldrb	r3, [r7, #23]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d019      	beq.n	800e476 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800e442:	f107 030c 	add.w	r3, r7, #12
 800e446:	461a      	mov	r2, r3
 800e448:	2103      	movs	r1, #3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7ff fd46 	bl	800dedc <get_sequence_step_timeout>
 800e450:	4603      	mov	r3, r0
 800e452:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e45a:	4413      	add	r3, r2
 800e45c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e45e:	69fa      	ldr	r2, [r7, #28]
 800e460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e462:	429a      	cmp	r2, r3
 800e464:	d204      	bcs.n	800e470 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800e466:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e46e:	e002      	b.n	800e476 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e470:	23fc      	movs	r3, #252	@ 0xfc
 800e472:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800e476:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d111      	bne.n	800e4a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800e47e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00e      	beq.n	800e4a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800e484:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800e48c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e48e:	2104      	movs	r1, #4
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7ff fe03 	bl	800e09c <set_sequence_step_timeout>
 800e496:	4603      	mov	r3, r0
 800e498:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800e4a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3748      	adds	r7, #72	@ 0x48
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b090      	sub	sp, #64	@ 0x40
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e4be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e4c2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e4c4:	f240 7376 	movw	r3, #1910	@ 0x776
 800e4c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800e4ca:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800e4ce:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e4d0:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800e4d4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800e4d6:	f240 234e 	movw	r3, #590	@ 0x24e
 800e4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800e4dc:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800e4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e4e2:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800e4e6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e4e8:	f240 2326 	movw	r3, #550	@ 0x226
 800e4ec:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800e4f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f6:	441a      	add	r2, r3
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e4fc:	f107 0318 	add.w	r3, r7, #24
 800e500:	4619      	mov	r1, r3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7fd f8b6 	bl	800b674 <VL53L0X_GetSequenceStepEnables>
 800e508:	4603      	mov	r3, r0
 800e50a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800e50e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800e516:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e51a:	e075      	b.n	800e608 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800e51c:	7e3b      	ldrb	r3, [r7, #24]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d105      	bne.n	800e52e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800e522:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800e524:	2b00      	cmp	r3, #0
 800e526:	d102      	bne.n	800e52e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800e528:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d030      	beq.n	800e590 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800e52e:	f107 0310 	add.w	r3, r7, #16
 800e532:	461a      	mov	r2, r3
 800e534:	2102      	movs	r1, #2
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7ff fcd0 	bl	800dedc <get_sequence_step_timeout>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800e542:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e546:	2b00      	cmp	r3, #0
 800e548:	d122      	bne.n	800e590 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800e54a:	7e3b      	ldrb	r3, [r7, #24]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d007      	beq.n	800e560 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e554:	6939      	ldr	r1, [r7, #16]
 800e556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e558:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e55a:	441a      	add	r2, r3
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800e560:	7ebb      	ldrb	r3, [r7, #26]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800e56a:	6939      	ldr	r1, [r7, #16]
 800e56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e56e:	440b      	add	r3, r1
 800e570:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e572:	441a      	add	r2, r3
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	601a      	str	r2, [r3, #0]
 800e578:	e00a      	b.n	800e590 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800e57a:	7e7b      	ldrb	r3, [r7, #25]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e584:	6939      	ldr	r1, [r7, #16]
 800e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e588:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e58a:	441a      	add	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e590:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e594:	2b00      	cmp	r3, #0
 800e596:	d114      	bne.n	800e5c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800e598:	7efb      	ldrb	r3, [r7, #27]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d011      	beq.n	800e5c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800e59e:	f107 030c 	add.w	r3, r7, #12
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	2103      	movs	r1, #3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff fc98 	bl	800dedc <get_sequence_step_timeout>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800e5b6:	68f9      	ldr	r1, [r7, #12]
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ba:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800e5bc:	441a      	add	r2, r3
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e5c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d114      	bne.n	800e5f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800e5ca:	7f3b      	ldrb	r3, [r7, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d011      	beq.n	800e5f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800e5d0:	f107 0314 	add.w	r3, r7, #20
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	2104      	movs	r1, #4
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff fc7f 	bl	800dedc <get_sequence_step_timeout>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800e5e8:	6979      	ldr	r1, [r7, #20]
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800e5ee:	441a      	add	r2, r3
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e5f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d103      	bne.n	800e604 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e604:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3740      	adds	r7, #64	@ 0x40
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e61a:	2300      	movs	r3, #0
 800e61c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e622:	e0c6      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4413      	add	r3, r2
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	3301      	adds	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800e634:	7cfb      	ldrb	r3, [r7, #19]
 800e636:	2bff      	cmp	r3, #255	@ 0xff
 800e638:	f040 808d 	bne.w	800e756 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	4413      	add	r3, r2
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	747b      	strb	r3, [r7, #17]
			Index++;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	3301      	adds	r3, #1
 800e64a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800e64c:	7c7b      	ldrb	r3, [r7, #17]
 800e64e:	2b03      	cmp	r3, #3
 800e650:	d87e      	bhi.n	800e750 <VL53L0X_load_tuning_settings+0x140>
 800e652:	a201      	add	r2, pc, #4	@ (adr r2, 800e658 <VL53L0X_load_tuning_settings+0x48>)
 800e654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e658:	0800e669 	.word	0x0800e669
 800e65c:	0800e6a3 	.word	0x0800e6a3
 800e660:	0800e6dd 	.word	0x0800e6dd
 800e664:	0800e717 	.word	0x0800e717
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	4413      	add	r3, r2
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	743b      	strb	r3, [r7, #16]
				Index++;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	3301      	adds	r3, #1
 800e676:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	683a      	ldr	r2, [r7, #0]
 800e67c:	4413      	add	r3, r2
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	3301      	adds	r3, #1
 800e686:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e688:	7c3b      	ldrb	r3, [r7, #16]
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	021b      	lsls	r3, r3, #8
 800e68e:	b29a      	uxth	r2, r3
 800e690:	7bfb      	ldrb	r3, [r7, #15]
 800e692:	b29b      	uxth	r3, r3
 800e694:	4413      	add	r3, r2
 800e696:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	89ba      	ldrh	r2, [r7, #12]
 800e69c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800e6a0:	e087      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	743b      	strb	r3, [r7, #16]
				Index++;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e6c2:	7c3b      	ldrb	r3, [r7, #16]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	021b      	lsls	r3, r3, #8
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	4413      	add	r3, r2
 800e6d0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	89ba      	ldrh	r2, [r7, #12]
 800e6d6:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800e6da:	e06a      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	743b      	strb	r3, [r7, #16]
				Index++;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e6fc:	7c3b      	ldrb	r3, [r7, #16]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	021b      	lsls	r3, r3, #8
 800e702:	b29a      	uxth	r2, r3
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	b29b      	uxth	r3, r3
 800e708:	4413      	add	r3, r2
 800e70a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	89ba      	ldrh	r2, [r7, #12]
 800e710:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800e714:	e04d      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	683a      	ldr	r2, [r7, #0]
 800e71a:	4413      	add	r3, r2
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	743b      	strb	r3, [r7, #16]
				Index++;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	3301      	adds	r3, #1
 800e724:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	683a      	ldr	r2, [r7, #0]
 800e72a:	4413      	add	r3, r2
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	3301      	adds	r3, #1
 800e734:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e736:	7c3b      	ldrb	r3, [r7, #16]
 800e738:	b29b      	uxth	r3, r3
 800e73a:	021b      	lsls	r3, r3, #8
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	b29b      	uxth	r3, r3
 800e742:	4413      	add	r3, r2
 800e744:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	89ba      	ldrh	r2, [r7, #12]
 800e74a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800e74e:	e030      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e750:	23fc      	movs	r3, #252	@ 0xfc
 800e752:	77fb      	strb	r3, [r7, #31]
 800e754:	e02d      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800e756:	7cfb      	ldrb	r3, [r7, #19]
 800e758:	2b04      	cmp	r3, #4
 800e75a:	d828      	bhi.n	800e7ae <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	683a      	ldr	r2, [r7, #0]
 800e760:	4413      	add	r3, r2
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	74bb      	strb	r3, [r7, #18]
			Index++;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	3301      	adds	r3, #1
 800e76a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800e76c:	2300      	movs	r3, #0
 800e76e:	61bb      	str	r3, [r7, #24]
 800e770:	e00f      	b.n	800e792 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	683a      	ldr	r2, [r7, #0]
 800e776:	4413      	add	r3, r2
 800e778:	7819      	ldrb	r1, [r3, #0]
 800e77a:	f107 0208 	add.w	r2, r7, #8
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	4413      	add	r3, r2
 800e782:	460a      	mov	r2, r1
 800e784:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	3301      	adds	r3, #1
 800e78a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	3301      	adds	r3, #1
 800e790:	61bb      	str	r3, [r7, #24]
 800e792:	7cfb      	ldrb	r3, [r7, #19]
 800e794:	69ba      	ldr	r2, [r7, #24]
 800e796:	429a      	cmp	r2, r3
 800e798:	dbeb      	blt.n	800e772 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800e79a:	7cfb      	ldrb	r3, [r7, #19]
 800e79c:	f107 0208 	add.w	r2, r7, #8
 800e7a0:	7cb9      	ldrb	r1, [r7, #18]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fdee 	bl	800f384 <VL53L0X_WriteMulti>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	77fb      	strb	r3, [r7, #31]
 800e7ac:	e001      	b.n	800e7b2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7ae:	23fc      	movs	r3, #252	@ 0xfc
 800e7b0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	683a      	ldr	r2, [r7, #0]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d004      	beq.n	800e7c8 <VL53L0X_load_tuning_settings+0x1b8>
 800e7be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f43f af2e 	beq.w	800e624 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e7c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3720      	adds	r7, #32
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e7ea:	f107 0313 	add.w	r3, r7, #19
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f7fc ffcb 	bl	800b78c <VL53L0X_GetXTalkCompensationEnable>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e7fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d111      	bne.n	800e826 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e802:	7cfb      	ldrb	r3, [r7, #19]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00e      	beq.n	800e826 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6a1b      	ldr	r3, [r3, #32]
 800e80c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	8a9b      	ldrh	r3, [r3, #20]
 800e812:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	fb02 f303 	mul.w	r3, r2, r3
 800e81a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	3380      	adds	r3, #128	@ 0x80
 800e820:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e826:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3720      	adds	r7, #32
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b086      	sub	sp, #24
 800e836:	af00      	add	r7, sp, #0
 800e838:	60f8      	str	r0, [r7, #12]
 800e83a:	60b9      	str	r1, [r7, #8]
 800e83c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e83e:	2300      	movs	r3, #0
 800e840:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e84a:	f107 0310 	add.w	r3, r7, #16
 800e84e:	461a      	mov	r2, r3
 800e850:	68b9      	ldr	r1, [r7, #8]
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f7ff ffbe 	bl	800e7d4 <VL53L0X_get_total_xtalk_rate>
 800e858:	4603      	mov	r3, r0
 800e85a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e85c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d105      	bne.n	800e870 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	441a      	add	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	601a      	str	r2, [r3, #0]

	return Status;
 800e870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b09a      	sub	sp, #104	@ 0x68
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800e88a:	2312      	movs	r3, #18
 800e88c:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800e88e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e892:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800e894:	2342      	movs	r3, #66	@ 0x42
 800e896:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800e898:	2306      	movs	r3, #6
 800e89a:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800e89c:	2307      	movs	r3, #7
 800e89e:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800e8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800e8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800e8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8ba:	fb02 f303 	mul.w	r3, r2, r3
 800e8be:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800e8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c2:	3380      	adds	r3, #128	@ 0x80
 800e8c4:	0a1b      	lsrs	r3, r3, #8
 800e8c6:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800e8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e8cc:	fb02 f303 	mul.w	r3, r2, r3
 800e8d0:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d01a      	beq.n	800e912 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	029b      	lsls	r3, r3, #10
 800e8e0:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800e8e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8e8:	4413      	add	r3, r2
 800e8ea:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800e8ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f4:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800e8f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	4413      	add	r3, r2
 800e8fe:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800e900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e902:	fb03 f303 	mul.w	r3, r3, r3
 800e906:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800e908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e90a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e90e:	0c1b      	lsrs	r3, r3, #16
 800e910:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e916:	fb02 f303 	mul.w	r3, r2, r3
 800e91a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800e91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e922:	0c1b      	lsrs	r3, r3, #16
 800e924:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800e926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e928:	fb03 f303 	mul.w	r3, r3, r3
 800e92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800e92e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e930:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e934:	0c1b      	lsrs	r3, r3, #16
 800e936:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800e938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e93a:	085a      	lsrs	r2, r3, #1
 800e93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93e:	441a      	add	r2, r3
 800e940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e942:	fbb2 f3f3 	udiv	r3, r2, r3
 800e946:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800e948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e94c:	fb02 f303 	mul.w	r3, r2, r3
 800e950:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800e952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e958:	d302      	bcc.n	800e960 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800e95a:	4b54      	ldr	r3, [pc, #336]	@ (800eaac <VL53L0X_calc_dmax+0x230>)
 800e95c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e95e:	e015      	b.n	800e98c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800e960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e962:	085a      	lsrs	r2, r3, #1
 800e964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e966:	441a      	add	r2, r3
 800e968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e96e:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800e970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e974:	fb02 f303 	mul.w	r3, r2, r3
 800e978:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800e97a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e97c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e980:	0c1b      	lsrs	r3, r3, #16
 800e982:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800e984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e986:	fb03 f303 	mul.w	r3, r3, r3
 800e98a:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800e98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e98e:	039b      	lsls	r3, r3, #14
 800e990:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e994:	4a46      	ldr	r2, [pc, #280]	@ (800eab0 <VL53L0X_calc_dmax+0x234>)
 800e996:	fba2 2303 	umull	r2, r3, r2, r3
 800e99a:	099b      	lsrs	r3, r3, #6
 800e99c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a0:	fb03 f303 	mul.w	r3, r3, r3
 800e9a4:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800e9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9a8:	fb03 f303 	mul.w	r3, r3, r3
 800e9ac:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800e9ae:	6a3b      	ldr	r3, [r7, #32]
 800e9b0:	3308      	adds	r3, #8
 800e9b2:	091b      	lsrs	r3, r3, #4
 800e9b4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800e9b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800e9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	005b      	lsls	r3, r3, #1
 800e9c4:	4413      	add	r3, r2
 800e9c6:	011b      	lsls	r3, r3, #4
 800e9c8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e9d0:	0b9b      	lsrs	r3, r3, #14
 800e9d2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e9d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9d8:	4413      	add	r3, r2
 800e9da:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e9dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9de:	085b      	lsrs	r3, r3, #1
 800e9e0:	69ba      	ldr	r2, [r7, #24]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ee:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	039b      	lsls	r3, r3, #14
 800e9f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	085b      	lsrs	r3, r3, #1
 800e9fa:	69ba      	ldr	r2, [r7, #24]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ea00:	69ba      	ldr	r2, [r7, #24]
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea08:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea0e:	fb02 f303 	mul.w	r3, r2, r3
 800ea12:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ea1a:	4a25      	ldr	r2, [pc, #148]	@ (800eab0 <VL53L0X_calc_dmax+0x234>)
 800ea1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea20:	099b      	lsrs	r3, r3, #6
 800ea22:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	011b      	lsls	r3, r3, #4
 800ea28:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ea30:	4a1f      	ldr	r2, [pc, #124]	@ (800eab0 <VL53L0X_calc_dmax+0x234>)
 800ea32:	fba2 2303 	umull	r2, r3, r2, r3
 800ea36:	099b      	lsrs	r3, r3, #6
 800ea38:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ea3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea3c:	3380      	adds	r3, #128	@ 0x80
 800ea3e:	0a1b      	lsrs	r3, r3, #8
 800ea40:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d008      	beq.n	800ea5a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	085a      	lsrs	r2, r3, #1
 800ea4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea4e:	441a      	add	r2, r3
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea56:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea58:	e001      	b.n	800ea5e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ea5e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea60:	f7fe fc45 	bl	800d2ee <VL53L0X_isqrt>
 800ea64:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d008      	beq.n	800ea7e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	085a      	lsrs	r2, r3, #1
 800ea70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea72:	441a      	add	r2, r3
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea7c:	e001      	b.n	800ea82 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ea82:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ea84:	f7fe fc33 	bl	800d2ee <VL53L0X_isqrt>
 800ea88:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800ea8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea8c:	693a      	ldr	r2, [r7, #16]
 800ea8e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d902      	bls.n	800ea9e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800ea98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea9c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ea9e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3768      	adds	r7, #104	@ 0x68
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	fff00000 	.word	0xfff00000
 800eab0:	10624dd3 	.word	0x10624dd3

0800eab4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b0b4      	sub	sp, #208	@ 0xd0
 800eab8:	af04      	add	r7, sp, #16
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800eac2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800eac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800eaca:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800eace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ead2:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800ead6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800eada:	f241 235c 	movw	r3, #4700	@ 0x125c
 800eade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800eae2:	4b9e      	ldr	r3, [pc, #632]	@ (800ed5c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800eae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800eae8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800eaec:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800eaee:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800eaf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eaf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eafa:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800eafc:	4b98      	ldr	r3, [pc, #608]	@ (800ed60 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800eafe:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800eb00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb04:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800eb06:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800eb0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800eb0c:	f240 6377 	movw	r3, #1655	@ 0x677
 800eb10:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb12:	2300      	movs	r3, #0
 800eb14:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6a1b      	ldr	r3, [r3, #32]
 800eb1c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb26:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800eb2a:	0c1b      	lsrs	r3, r3, #16
 800eb2c:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800eb34:	f107 0310 	add.w	r3, r7, #16
 800eb38:	461a      	mov	r2, r3
 800eb3a:	68b9      	ldr	r1, [r7, #8]
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7ff fe78 	bl	800e832 <VL53L0X_get_total_signal_rate>
 800eb42:	4603      	mov	r3, r0
 800eb44:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	68b9      	ldr	r1, [r7, #8]
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f7ff fe3f 	bl	800e7d4 <VL53L0X_get_total_xtalk_rate>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb62:	fb02 f303 	mul.w	r3, r2, r3
 800eb66:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800eb68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb6a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800eb6e:	0c1b      	lsrs	r3, r3, #16
 800eb70:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb78:	fb02 f303 	mul.w	r3, r2, r3
 800eb7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800eb80:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800eb84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d902      	bls.n	800eb90 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800eb8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800eb90:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d168      	bne.n	800ec6a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800eb9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800eba8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ebac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7ff f93c 	bl	800de34 <VL53L0X_calc_timeout_mclks>
 800ebbc:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ebc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800ebce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ebd2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f7ff f929 	bl	800de34 <VL53L0X_calc_timeout_mclks>
 800ebe2:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800ebea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ebee:	2b08      	cmp	r3, #8
 800ebf0:	d102      	bne.n	800ebf8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800ebf2:	2302      	movs	r3, #2
 800ebf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800ebf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ebfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800ebfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ec02:	fb02 f303 	mul.w	r3, r2, r3
 800ec06:	02db      	lsls	r3, r3, #11
 800ec08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ec0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec10:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ec14:	4a53      	ldr	r2, [pc, #332]	@ (800ed64 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ec16:	fba2 2303 	umull	r2, r3, r2, r3
 800ec1a:	099b      	lsrs	r3, r3, #6
 800ec1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800ec20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ec26:	fb02 f303 	mul.w	r3, r2, r3
 800ec2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ec2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec32:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ec36:	4a4b      	ldr	r2, [pc, #300]	@ (800ed64 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ec38:	fba2 2303 	umull	r2, r3, r2, r3
 800ec3c:	099b      	lsrs	r3, r3, #6
 800ec3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	3380      	adds	r3, #128	@ 0x80
 800ec46:	0a1b      	lsrs	r3, r3, #8
 800ec48:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ec50:	fb02 f303 	mul.w	r3, r2, r3
 800ec54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ec58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ec5c:	3380      	adds	r3, #128	@ 0x80
 800ec5e:	0a1b      	lsrs	r3, r3, #8
 800ec60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ec6a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d002      	beq.n	800ec78 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800ec72:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800ec76:	e15e      	b.n	800ef36 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800ec78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10c      	bne.n	800ec98 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ec84:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ec8c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2200      	movs	r2, #0
 800ec94:	601a      	str	r2, [r3, #0]
 800ec96:	e14c      	b.n	800ef32 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800ec98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d102      	bne.n	800eca6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800eca0:	2301      	movs	r3, #1
 800eca2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800eca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ecaa:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ecac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecae:	041a      	lsls	r2, r3, #16
 800ecb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ecba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ecbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d902      	bls.n	800ecca <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800ecc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ecca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ecce:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ecd2:	fb02 f303 	mul.w	r3, r2, r3
 800ecd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ecda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ecde:	4613      	mov	r3, r2
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	4413      	add	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe fb01 	bl	800d2ee <VL53L0X_isqrt>
 800ecec:	4603      	mov	r3, r0
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	891b      	ldrh	r3, [r3, #8]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ecfa:	fb02 f303 	mul.w	r3, r2, r3
 800ecfe:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ed00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed02:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ed04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed08:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ed0a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ed0c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ed10:	4a14      	ldr	r2, [pc, #80]	@ (800ed64 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ed12:	fba2 2303 	umull	r2, r3, r2, r3
 800ed16:	099b      	lsrs	r3, r3, #6
 800ed18:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ed1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed1c:	041b      	lsls	r3, r3, #16
 800ed1e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ed22:	4a10      	ldr	r2, [pc, #64]	@ (800ed64 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ed24:	fba2 2303 	umull	r2, r3, r2, r3
 800ed28:	099b      	lsrs	r3, r3, #6
 800ed2a:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ed2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed2e:	021b      	lsls	r3, r3, #8
 800ed30:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ed32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	bfb8      	it	lt
 800ed3e:	425b      	neglt	r3, r3
 800ed40:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ed42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed44:	021b      	lsls	r3, r3, #8
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	7e1b      	ldrb	r3, [r3, #24]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00b      	beq.n	800ed68 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800ed50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ed54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ed58:	e033      	b.n	800edc2 <VL53L0X_calc_sigma_estimate+0x30e>
 800ed5a:	bf00      	nop
 800ed5c:	028f87ae 	.word	0x028f87ae
 800ed60:	0006999a 	.word	0x0006999a
 800ed64:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ed68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ed76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed78:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800ed7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed80:	fb02 f303 	mul.w	r3, r2, r3
 800ed84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ed88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ed8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed8e:	4413      	add	r3, r2
 800ed90:	0c1b      	lsrs	r3, r3, #16
 800ed92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ed96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed9a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800ed9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800eda2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eda6:	085b      	lsrs	r3, r3, #1
 800eda8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800edac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edb0:	fb03 f303 	mul.w	r3, r3, r3
 800edb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800edb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edbc:	0b9b      	lsrs	r3, r3, #14
 800edbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800edc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800edc8:	fb02 f303 	mul.w	r3, r2, r3
 800edcc:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800edce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800edd4:	0c1b      	lsrs	r3, r3, #16
 800edd6:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800edd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edda:	fb03 f303 	mul.w	r3, r3, r3
 800edde:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800ede0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ede4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ede6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800edec:	0c1b      	lsrs	r3, r3, #16
 800edee:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf2:	fb03 f303 	mul.w	r3, r3, r3
 800edf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800edf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfc:	4413      	add	r3, r2
 800edfe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ee00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee02:	f7fe fa74 	bl	800d2ee <VL53L0X_isqrt>
 800ee06:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0a:	041b      	lsls	r3, r3, #16
 800ee0c:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee10:	3332      	adds	r3, #50	@ 0x32
 800ee12:	4a4b      	ldr	r2, [pc, #300]	@ (800ef40 <VL53L0X_calc_sigma_estimate+0x48c>)
 800ee14:	fba2 2303 	umull	r2, r3, r2, r3
 800ee18:	095a      	lsrs	r2, r3, #5
 800ee1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ee24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee28:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800ee2c:	fb02 f303 	mul.w	r3, r2, r3
 800ee30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ee34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee38:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800ee42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee46:	4a3f      	ldr	r2, [pc, #252]	@ (800ef44 <VL53L0X_calc_sigma_estimate+0x490>)
 800ee48:	fba2 2303 	umull	r2, r3, r2, r3
 800ee4c:	0b5b      	lsrs	r3, r3, #13
 800ee4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ee52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ee56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d902      	bls.n	800ee62 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ee5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ee5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800ee62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ee66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800ee70:	4a35      	ldr	r2, [pc, #212]	@ (800ef48 <VL53L0X_calc_sigma_estimate+0x494>)
 800ee72:	fba2 2303 	umull	r2, r3, r2, r3
 800ee76:	099b      	lsrs	r3, r3, #6
 800ee78:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800ee7a:	6a3b      	ldr	r3, [r7, #32]
 800ee7c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800ee7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ee82:	441a      	add	r2, r3
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fa2f 	bl	800d2ee <VL53L0X_isqrt>
 800ee90:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	021b      	lsls	r3, r3, #8
 800ee96:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ee9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ef48 <VL53L0X_calc_sigma_estimate+0x494>)
 800eea0:	fba2 2303 	umull	r2, r3, r2, r3
 800eea4:	099b      	lsrs	r3, r3, #6
 800eea6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800eea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eeac:	fb03 f303 	mul.w	r3, r3, r3
 800eeb0:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	fb03 f303 	mul.w	r3, r3, r3
 800eeb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800eeba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eebe:	4413      	add	r3, r2
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe fa14 	bl	800d2ee <VL53L0X_isqrt>
 800eec6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eece:	fb02 f303 	mul.w	r3, r2, r3
 800eed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800eed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d009      	beq.n	800eef0 <VL53L0X_calc_sigma_estimate+0x43c>
 800eedc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d005      	beq.n	800eef0 <VL53L0X_calc_sigma_estimate+0x43c>
 800eee4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800eee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d903      	bls.n	800eef8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800eef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eef4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800eefe:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800ef0a:	6939      	ldr	r1, [r7, #16]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	9303      	str	r3, [sp, #12]
 800ef10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ef14:	9302      	str	r3, [sp, #8]
 800ef16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ef1a:	9301      	str	r3, [sp, #4]
 800ef1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f7ff fca8 	bl	800e87c <VL53L0X_calc_dmax>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ef32:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	37c0      	adds	r7, #192	@ 0xc0
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	51eb851f 	.word	0x51eb851f
 800ef44:	d1b71759 	.word	0xd1b71759
 800ef48:	10624dd3 	.word	0x10624dd3

0800ef4c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b090      	sub	sp, #64	@ 0x40
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	607a      	str	r2, [r7, #4]
 800ef56:	461a      	mov	r2, r3
 800ef58:	460b      	mov	r3, r1
 800ef5a:	72fb      	strb	r3, [r7, #11]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef60:	2300      	movs	r3, #0
 800ef62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ef84:	2300      	movs	r3, #0
 800ef86:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800ef96:	2300      	movs	r3, #0
 800ef98:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ef9e:	7afb      	ldrb	r3, [r7, #11]
 800efa0:	10db      	asrs	r3, r3, #3
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	f003 030f 	and.w	r3, r3, #15
 800efa8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800efac:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d017      	beq.n	800efe4 <VL53L0X_get_pal_range_status+0x98>
 800efb4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efb8:	2b05      	cmp	r3, #5
 800efba:	d013      	beq.n	800efe4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800efbc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efc0:	2b07      	cmp	r3, #7
 800efc2:	d00f      	beq.n	800efe4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800efc4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efc8:	2b0c      	cmp	r3, #12
 800efca:	d00b      	beq.n	800efe4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800efcc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efd0:	2b0d      	cmp	r3, #13
 800efd2:	d007      	beq.n	800efe4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800efd4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efd8:	2b0e      	cmp	r3, #14
 800efda:	d003      	beq.n	800efe4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800efdc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800efe0:	2b0f      	cmp	r3, #15
 800efe2:	d103      	bne.n	800efec <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800efe4:	2301      	movs	r3, #1
 800efe6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800efea:	e002      	b.n	800eff2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800efec:	2300      	movs	r3, #0
 800efee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800eff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d109      	bne.n	800f00e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800effa:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800effe:	461a      	mov	r2, r3
 800f000:	2100      	movs	r1, #0
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7fc fc96 	bl	800b934 <VL53L0X_GetLimitCheckEnable>
 800f008:	4603      	mov	r3, r0
 800f00a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f00e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f012:	2b00      	cmp	r3, #0
 800f014:	d02e      	beq.n	800f074 <VL53L0X_get_pal_range_status+0x128>
 800f016:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d12a      	bne.n	800f074 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800f01e:	f107 0310 	add.w	r3, r7, #16
 800f022:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f026:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f7ff fd43 	bl	800eab4 <VL53L0X_calc_sigma_estimate>
 800f02e:	4603      	mov	r3, r0
 800f030:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800f034:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d103      	bne.n	800f044 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	b29a      	uxth	r2, r3
 800f040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f042:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800f044:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d113      	bne.n	800f074 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800f04c:	f107 0320 	add.w	r3, r7, #32
 800f050:	461a      	mov	r2, r3
 800f052:	2100      	movs	r1, #0
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f7fc fcf3 	bl	800ba40 <VL53L0X_GetLimitCheckValue>
 800f05a:	4603      	mov	r3, r0
 800f05c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800f060:	6a3b      	ldr	r3, [r7, #32]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d006      	beq.n	800f074 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800f066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f068:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d902      	bls.n	800f074 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800f06e:	2301      	movs	r3, #1
 800f070:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f074:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d109      	bne.n	800f090 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f07c:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800f080:	461a      	mov	r2, r3
 800f082:	2102      	movs	r1, #2
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f7fc fc55 	bl	800b934 <VL53L0X_GetLimitCheckEnable>
 800f08a:	4603      	mov	r3, r0
 800f08c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800f090:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f094:	2b00      	cmp	r3, #0
 800f096:	d044      	beq.n	800f122 <VL53L0X_get_pal_range_status+0x1d6>
 800f098:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d140      	bne.n	800f122 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f0a0:	f107 031c 	add.w	r3, r7, #28
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	2102      	movs	r1, #2
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f7fc fcc9 	bl	800ba40 <VL53L0X_GetLimitCheckValue>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800f0b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d107      	bne.n	800f0cc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f0bc:	2201      	movs	r2, #1
 800f0be:	21ff      	movs	r1, #255	@ 0xff
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f9bb 	bl	800f43c <VL53L0X_WrByte>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800f0cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d109      	bne.n	800f0e8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800f0d4:	f107 0316 	add.w	r3, r7, #22
 800f0d8:	461a      	mov	r2, r3
 800f0da:	21b6      	movs	r1, #182	@ 0xb6
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 fa59 	bl	800f594 <VL53L0X_RdWord>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800f0e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d107      	bne.n	800f100 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	21ff      	movs	r1, #255	@ 0xff
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f000 f9a1 	bl	800f43c <VL53L0X_WrByte>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f100:	8afb      	ldrh	r3, [r7, #22]
 800f102:	025b      	lsls	r3, r3, #9
 800f104:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f10a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800f114:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800f116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f118:	429a      	cmp	r2, r3
 800f11a:	d902      	bls.n	800f122 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800f11c:	2301      	movs	r3, #1
 800f11e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f122:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f126:	2b00      	cmp	r3, #0
 800f128:	d109      	bne.n	800f13e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f12a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f12e:	461a      	mov	r2, r3
 800f130:	2103      	movs	r1, #3
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f7fc fbfe 	bl	800b934 <VL53L0X_GetLimitCheckEnable>
 800f138:	4603      	mov	r3, r0
 800f13a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f13e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f142:	2b00      	cmp	r3, #0
 800f144:	d023      	beq.n	800f18e <VL53L0X_get_pal_range_status+0x242>
 800f146:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d11f      	bne.n	800f18e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800f14e:	893b      	ldrh	r3, [r7, #8]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d102      	bne.n	800f15a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	637b      	str	r3, [r7, #52]	@ 0x34
 800f158:	e005      	b.n	800f166 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	021a      	lsls	r2, r3, #8
 800f15e:	893b      	ldrh	r3, [r7, #8]
 800f160:	fbb2 f3f3 	udiv	r3, r2, r3
 800f164:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f166:	f107 0318 	add.w	r3, r7, #24
 800f16a:	461a      	mov	r2, r3
 800f16c:	2103      	movs	r1, #3
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f7fc fc66 	bl	800ba40 <VL53L0X_GetLimitCheckValue>
 800f174:	4603      	mov	r3, r0
 800f176:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d006      	beq.n	800f18e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f180:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800f182:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f184:	429a      	cmp	r2, r3
 800f186:	d202      	bcs.n	800f18e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800f188:	2301      	movs	r3, #1
 800f18a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f18e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f192:	2b00      	cmp	r3, #0
 800f194:	d14a      	bne.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800f196:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d103      	bne.n	800f1a6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800f19e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1a0:	22ff      	movs	r2, #255	@ 0xff
 800f1a2:	701a      	strb	r2, [r3, #0]
 800f1a4:	e042      	b.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800f1a6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d007      	beq.n	800f1be <VL53L0X_get_pal_range_status+0x272>
 800f1ae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d003      	beq.n	800f1be <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800f1b6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d103      	bne.n	800f1c6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800f1be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1c0:	2205      	movs	r2, #5
 800f1c2:	701a      	strb	r2, [r3, #0]
 800f1c4:	e032      	b.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800f1c6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1ca:	2b06      	cmp	r3, #6
 800f1cc:	d003      	beq.n	800f1d6 <VL53L0X_get_pal_range_status+0x28a>
 800f1ce:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1d2:	2b09      	cmp	r3, #9
 800f1d4:	d103      	bne.n	800f1de <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800f1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1d8:	2204      	movs	r2, #4
 800f1da:	701a      	strb	r2, [r3, #0]
 800f1dc:	e026      	b.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800f1de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1e2:	2b08      	cmp	r3, #8
 800f1e4:	d007      	beq.n	800f1f6 <VL53L0X_get_pal_range_status+0x2aa>
 800f1e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f1ea:	2b0a      	cmp	r3, #10
 800f1ec:	d003      	beq.n	800f1f6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800f1ee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d103      	bne.n	800f1fe <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800f1f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1f8:	2203      	movs	r2, #3
 800f1fa:	701a      	strb	r2, [r3, #0]
 800f1fc:	e016      	b.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800f1fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f202:	2b04      	cmp	r3, #4
 800f204:	d003      	beq.n	800f20e <VL53L0X_get_pal_range_status+0x2c2>
 800f206:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d103      	bne.n	800f216 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800f20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f210:	2202      	movs	r2, #2
 800f212:	701a      	strb	r2, [r3, #0]
 800f214:	e00a      	b.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800f216:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d103      	bne.n	800f226 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800f21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f220:	2201      	movs	r2, #1
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	e002      	b.n	800f22c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800f226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800f22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d102      	bne.n	800f23a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f236:	2200      	movs	r2, #0
 800f238:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f23a:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800f23e:	461a      	mov	r2, r3
 800f240:	2101      	movs	r1, #1
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f7fc fb76 	bl	800b934 <VL53L0X_GetLimitCheckEnable>
 800f248:	4603      	mov	r3, r0
 800f24a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800f24e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f252:	2b00      	cmp	r3, #0
 800f254:	d14f      	bne.n	800f2f6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f256:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d003      	beq.n	800f266 <VL53L0X_get_pal_range_status+0x31a>
 800f25e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800f262:	2b01      	cmp	r3, #1
 800f264:	d103      	bne.n	800f26e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800f266:	2301      	movs	r3, #1
 800f268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f26c:	e002      	b.n	800f274 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f27a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800f27e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f282:	2b04      	cmp	r3, #4
 800f284:	d003      	beq.n	800f28e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800f286:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d103      	bne.n	800f296 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800f28e:	2301      	movs	r3, #1
 800f290:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f294:	e002      	b.n	800f29c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f2a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800f2a6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <VL53L0X_get_pal_range_status+0x36a>
 800f2ae:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d103      	bne.n	800f2be <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f2bc:	e002      	b.n	800f2c4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f2ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f2ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d003      	beq.n	800f2de <VL53L0X_get_pal_range_status+0x392>
 800f2d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d103      	bne.n	800f2e6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f2e4:	e002      	b.n	800f2ec <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f2f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f2f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3740      	adds	r7, #64	@ 0x40
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f302:	b580      	push	{r7, lr}
 800f304:	b088      	sub	sp, #32
 800f306:	af02      	add	r7, sp, #8
 800f308:	60f8      	str	r0, [r7, #12]
 800f30a:	60b9      	str	r1, [r7, #8]
 800f30c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	330a      	adds	r3, #10
 800f312:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800f320:	4619      	mov	r1, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	b29a      	uxth	r2, r3
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	4613      	mov	r3, r2
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	f7f6 fed5 	bl	80060dc <HAL_I2C_Master_Transmit>
 800f332:	4603      	mov	r3, r0
 800f334:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f336:	693b      	ldr	r3, [r7, #16]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f340:	b580      	push	{r7, lr}
 800f342:	b088      	sub	sp, #32
 800f344:	af02      	add	r7, sp, #8
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	330a      	adds	r3, #10
 800f350:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800f35e:	f043 0301 	orr.w	r3, r3, #1
 800f362:	b2db      	uxtb	r3, r3
 800f364:	4619      	mov	r1, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	b29a      	uxth	r2, r3
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	4613      	mov	r3, r2
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	f7f6 ffcb 	bl	800630c <HAL_I2C_Master_Receive>
 800f376:	4603      	mov	r3, r0
 800f378:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f37a:	693b      	ldr	r3, [r7, #16]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3718      	adds	r7, #24
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	607a      	str	r2, [r7, #4]
 800f38e:	603b      	str	r3, [r7, #0]
 800f390:	460b      	mov	r3, r1
 800f392:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f394:	2300      	movs	r3, #0
 800f396:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2b3f      	cmp	r3, #63	@ 0x3f
 800f39c:	d902      	bls.n	800f3a4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f39e:	f06f 0303 	mvn.w	r3, #3
 800f3a2:	e016      	b.n	800f3d2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800f3a4:	4a0d      	ldr	r2, [pc, #52]	@ (800f3dc <VL53L0X_WriteMulti+0x58>)
 800f3a6:	7afb      	ldrb	r3, [r7, #11]
 800f3a8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	6879      	ldr	r1, [r7, #4]
 800f3ae:	480c      	ldr	r0, [pc, #48]	@ (800f3e0 <VL53L0X_WriteMulti+0x5c>)
 800f3b0:	f001 f891 	bl	80104d6 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4908      	ldr	r1, [pc, #32]	@ (800f3dc <VL53L0X_WriteMulti+0x58>)
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f7ff ffa0 	bl	800f302 <_I2CWrite>
 800f3c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f3ca:	23ec      	movs	r3, #236	@ 0xec
 800f3cc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f3ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3718      	adds	r7, #24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	20040b64 	.word	0x20040b64
 800f3e0:	20040b65 	.word	0x20040b65

0800f3e4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	607a      	str	r2, [r7, #4]
 800f3ee:	603b      	str	r3, [r7, #0]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f3f8:	f107 030b 	add.w	r3, r7, #11
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	4619      	mov	r1, r3
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f7ff ff7e 	bl	800f302 <_I2CWrite>
 800f406:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d002      	beq.n	800f414 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f40e:	23ec      	movs	r3, #236	@ 0xec
 800f410:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f412:	e00c      	b.n	800f42e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	6879      	ldr	r1, [r7, #4]
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f7ff ff91 	bl	800f340 <_I2CRead>
 800f41e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d002      	beq.n	800f42c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f426:	23ec      	movs	r3, #236	@ 0xec
 800f428:	75fb      	strb	r3, [r7, #23]
 800f42a:	e000      	b.n	800f42e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800f42c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800f42e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f432:	4618      	mov	r0, r3
 800f434:	3718      	adds	r7, #24
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
	...

0800f43c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	460b      	mov	r3, r1
 800f446:	70fb      	strb	r3, [r7, #3]
 800f448:	4613      	mov	r3, r2
 800f44a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f44c:	2300      	movs	r3, #0
 800f44e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f450:	4a0b      	ldr	r2, [pc, #44]	@ (800f480 <VL53L0X_WrByte+0x44>)
 800f452:	78fb      	ldrb	r3, [r7, #3]
 800f454:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800f456:	4a0a      	ldr	r2, [pc, #40]	@ (800f480 <VL53L0X_WrByte+0x44>)
 800f458:	78bb      	ldrb	r3, [r7, #2]
 800f45a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f45c:	2202      	movs	r2, #2
 800f45e:	4908      	ldr	r1, [pc, #32]	@ (800f480 <VL53L0X_WrByte+0x44>)
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff ff4e 	bl	800f302 <_I2CWrite>
 800f466:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f46e:	23ec      	movs	r3, #236	@ 0xec
 800f470:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20040b64 	.word	0x20040b64

0800f484 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	460b      	mov	r3, r1
 800f48e:	70fb      	strb	r3, [r7, #3]
 800f490:	4613      	mov	r3, r2
 800f492:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f494:	2300      	movs	r3, #0
 800f496:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f498:	4a0e      	ldr	r2, [pc, #56]	@ (800f4d4 <VL53L0X_WrWord+0x50>)
 800f49a:	78fb      	ldrb	r3, [r7, #3]
 800f49c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800f49e:	883b      	ldrh	r3, [r7, #0]
 800f4a0:	0a1b      	lsrs	r3, r3, #8
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f4d4 <VL53L0X_WrWord+0x50>)
 800f4a8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800f4aa:	883b      	ldrh	r3, [r7, #0]
 800f4ac:	b2da      	uxtb	r2, r3
 800f4ae:	4b09      	ldr	r3, [pc, #36]	@ (800f4d4 <VL53L0X_WrWord+0x50>)
 800f4b0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800f4b2:	2203      	movs	r2, #3
 800f4b4:	4907      	ldr	r1, [pc, #28]	@ (800f4d4 <VL53L0X_WrWord+0x50>)
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff ff23 	bl	800f302 <_I2CWrite>
 800f4bc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f4c4:	23ec      	movs	r3, #236	@ 0xec
 800f4c6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	20040b64 	.word	0x20040b64

0800f4d8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	4608      	mov	r0, r1
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	70fb      	strb	r3, [r7, #3]
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	70bb      	strb	r3, [r7, #2]
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800f4f6:	f107 020e 	add.w	r2, r7, #14
 800f4fa:	78fb      	ldrb	r3, [r7, #3]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f81e 	bl	800f540 <VL53L0X_RdByte>
 800f504:	4603      	mov	r3, r0
 800f506:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800f508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d110      	bne.n	800f532 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800f510:	7bba      	ldrb	r2, [r7, #14]
 800f512:	78bb      	ldrb	r3, [r7, #2]
 800f514:	4013      	ands	r3, r2
 800f516:	b2da      	uxtb	r2, r3
 800f518:	787b      	ldrb	r3, [r7, #1]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800f520:	7bba      	ldrb	r2, [r7, #14]
 800f522:	78fb      	ldrb	r3, [r7, #3]
 800f524:	4619      	mov	r1, r3
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7ff ff88 	bl	800f43c <VL53L0X_WrByte>
 800f52c:	4603      	mov	r3, r0
 800f52e:	73fb      	strb	r3, [r7, #15]
 800f530:	e000      	b.n	800f534 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800f532:	bf00      	nop
done:
    return Status;
 800f534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	460b      	mov	r3, r1
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f54e:	2300      	movs	r3, #0
 800f550:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f552:	f107 030b 	add.w	r3, r7, #11
 800f556:	2201      	movs	r2, #1
 800f558:	4619      	mov	r1, r3
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f7ff fed1 	bl	800f302 <_I2CWrite>
 800f560:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f568:	23ec      	movs	r3, #236	@ 0xec
 800f56a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f56c:	e00c      	b.n	800f588 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800f56e:	2201      	movs	r2, #1
 800f570:	6879      	ldr	r1, [r7, #4]
 800f572:	68f8      	ldr	r0, [r7, #12]
 800f574:	f7ff fee4 	bl	800f340 <_I2CRead>
 800f578:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d002      	beq.n	800f586 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f580:	23ec      	movs	r3, #236	@ 0xec
 800f582:	75fb      	strb	r3, [r7, #23]
 800f584:	e000      	b.n	800f588 <VL53L0X_RdByte+0x48>
    }
done:
 800f586:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800f588:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	460b      	mov	r3, r1
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f5a6:	f107 030b 	add.w	r3, r7, #11
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f7ff fea7 	bl	800f302 <_I2CWrite>
 800f5b4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d002      	beq.n	800f5c2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f5bc:	23ec      	movs	r3, #236	@ 0xec
 800f5be:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f5c0:	e015      	b.n	800f5ee <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	490d      	ldr	r1, [pc, #52]	@ (800f5fc <VL53L0X_RdWord+0x68>)
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7ff feba 	bl	800f340 <_I2CRead>
 800f5cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f5d4:	23ec      	movs	r3, #236	@ 0xec
 800f5d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f5d8:	e009      	b.n	800f5ee <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800f5da:	4b08      	ldr	r3, [pc, #32]	@ (800f5fc <VL53L0X_RdWord+0x68>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	021b      	lsls	r3, r3, #8
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4a06      	ldr	r2, [pc, #24]	@ (800f5fc <VL53L0X_RdWord+0x68>)
 800f5e4:	7852      	ldrb	r2, [r2, #1]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800f5ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20040b64 	.word	0x20040b64

0800f600 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	460b      	mov	r3, r1
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f60e:	2300      	movs	r3, #0
 800f610:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f612:	f107 030b 	add.w	r3, r7, #11
 800f616:	2201      	movs	r2, #1
 800f618:	4619      	mov	r1, r3
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f7ff fe71 	bl	800f302 <_I2CWrite>
 800f620:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f628:	23ec      	movs	r3, #236	@ 0xec
 800f62a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f62c:	e01b      	b.n	800f666 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800f62e:	2204      	movs	r2, #4
 800f630:	4910      	ldr	r1, [pc, #64]	@ (800f674 <VL53L0X_RdDWord+0x74>)
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f7ff fe84 	bl	800f340 <_I2CRead>
 800f638:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d002      	beq.n	800f646 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f640:	23ec      	movs	r3, #236	@ 0xec
 800f642:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f644:	e00f      	b.n	800f666 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800f646:	4b0b      	ldr	r3, [pc, #44]	@ (800f674 <VL53L0X_RdDWord+0x74>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	061a      	lsls	r2, r3, #24
 800f64c:	4b09      	ldr	r3, [pc, #36]	@ (800f674 <VL53L0X_RdDWord+0x74>)
 800f64e:	785b      	ldrb	r3, [r3, #1]
 800f650:	041b      	lsls	r3, r3, #16
 800f652:	441a      	add	r2, r3
 800f654:	4b07      	ldr	r3, [pc, #28]	@ (800f674 <VL53L0X_RdDWord+0x74>)
 800f656:	789b      	ldrb	r3, [r3, #2]
 800f658:	021b      	lsls	r3, r3, #8
 800f65a:	4413      	add	r3, r2
 800f65c:	4a05      	ldr	r2, [pc, #20]	@ (800f674 <VL53L0X_RdDWord+0x74>)
 800f65e:	78d2      	ldrb	r2, [r2, #3]
 800f660:	441a      	add	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800f666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20040b64 	.word	0x20040b64

0800f678 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800f680:	2300      	movs	r3, #0
 800f682:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800f684:	2002      	movs	r0, #2
 800f686:	f7f6 f995 	bl	80059b4 <HAL_Delay>
    return status;
 800f68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <__cvt>:
 800f696:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f69a:	ec57 6b10 	vmov	r6, r7, d0
 800f69e:	2f00      	cmp	r7, #0
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	463b      	mov	r3, r7
 800f6a6:	bfbb      	ittet	lt
 800f6a8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f6ac:	461f      	movlt	r7, r3
 800f6ae:	2300      	movge	r3, #0
 800f6b0:	232d      	movlt	r3, #45	@ 0x2d
 800f6b2:	700b      	strb	r3, [r1, #0]
 800f6b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6b6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f6ba:	4691      	mov	r9, r2
 800f6bc:	f023 0820 	bic.w	r8, r3, #32
 800f6c0:	bfbc      	itt	lt
 800f6c2:	4632      	movlt	r2, r6
 800f6c4:	4616      	movlt	r6, r2
 800f6c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f6ca:	d005      	beq.n	800f6d8 <__cvt+0x42>
 800f6cc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f6d0:	d100      	bne.n	800f6d4 <__cvt+0x3e>
 800f6d2:	3401      	adds	r4, #1
 800f6d4:	2102      	movs	r1, #2
 800f6d6:	e000      	b.n	800f6da <__cvt+0x44>
 800f6d8:	2103      	movs	r1, #3
 800f6da:	ab03      	add	r3, sp, #12
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	ab02      	add	r3, sp, #8
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	ec47 6b10 	vmov	d0, r6, r7
 800f6e6:	4653      	mov	r3, sl
 800f6e8:	4622      	mov	r2, r4
 800f6ea:	f000 ff8d 	bl	8010608 <_dtoa_r>
 800f6ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f6f2:	4605      	mov	r5, r0
 800f6f4:	d119      	bne.n	800f72a <__cvt+0x94>
 800f6f6:	f019 0f01 	tst.w	r9, #1
 800f6fa:	d00e      	beq.n	800f71a <__cvt+0x84>
 800f6fc:	eb00 0904 	add.w	r9, r0, r4
 800f700:	2200      	movs	r2, #0
 800f702:	2300      	movs	r3, #0
 800f704:	4630      	mov	r0, r6
 800f706:	4639      	mov	r1, r7
 800f708:	f7f1 f9f6 	bl	8000af8 <__aeabi_dcmpeq>
 800f70c:	b108      	cbz	r0, 800f712 <__cvt+0x7c>
 800f70e:	f8cd 900c 	str.w	r9, [sp, #12]
 800f712:	2230      	movs	r2, #48	@ 0x30
 800f714:	9b03      	ldr	r3, [sp, #12]
 800f716:	454b      	cmp	r3, r9
 800f718:	d31e      	bcc.n	800f758 <__cvt+0xc2>
 800f71a:	9b03      	ldr	r3, [sp, #12]
 800f71c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f71e:	1b5b      	subs	r3, r3, r5
 800f720:	4628      	mov	r0, r5
 800f722:	6013      	str	r3, [r2, #0]
 800f724:	b004      	add	sp, #16
 800f726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f72a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f72e:	eb00 0904 	add.w	r9, r0, r4
 800f732:	d1e5      	bne.n	800f700 <__cvt+0x6a>
 800f734:	7803      	ldrb	r3, [r0, #0]
 800f736:	2b30      	cmp	r3, #48	@ 0x30
 800f738:	d10a      	bne.n	800f750 <__cvt+0xba>
 800f73a:	2200      	movs	r2, #0
 800f73c:	2300      	movs	r3, #0
 800f73e:	4630      	mov	r0, r6
 800f740:	4639      	mov	r1, r7
 800f742:	f7f1 f9d9 	bl	8000af8 <__aeabi_dcmpeq>
 800f746:	b918      	cbnz	r0, 800f750 <__cvt+0xba>
 800f748:	f1c4 0401 	rsb	r4, r4, #1
 800f74c:	f8ca 4000 	str.w	r4, [sl]
 800f750:	f8da 3000 	ldr.w	r3, [sl]
 800f754:	4499      	add	r9, r3
 800f756:	e7d3      	b.n	800f700 <__cvt+0x6a>
 800f758:	1c59      	adds	r1, r3, #1
 800f75a:	9103      	str	r1, [sp, #12]
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	e7d9      	b.n	800f714 <__cvt+0x7e>

0800f760 <__exponent>:
 800f760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f762:	2900      	cmp	r1, #0
 800f764:	bfba      	itte	lt
 800f766:	4249      	neglt	r1, r1
 800f768:	232d      	movlt	r3, #45	@ 0x2d
 800f76a:	232b      	movge	r3, #43	@ 0x2b
 800f76c:	2909      	cmp	r1, #9
 800f76e:	7002      	strb	r2, [r0, #0]
 800f770:	7043      	strb	r3, [r0, #1]
 800f772:	dd29      	ble.n	800f7c8 <__exponent+0x68>
 800f774:	f10d 0307 	add.w	r3, sp, #7
 800f778:	461d      	mov	r5, r3
 800f77a:	270a      	movs	r7, #10
 800f77c:	461a      	mov	r2, r3
 800f77e:	fbb1 f6f7 	udiv	r6, r1, r7
 800f782:	fb07 1416 	mls	r4, r7, r6, r1
 800f786:	3430      	adds	r4, #48	@ 0x30
 800f788:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f78c:	460c      	mov	r4, r1
 800f78e:	2c63      	cmp	r4, #99	@ 0x63
 800f790:	f103 33ff 	add.w	r3, r3, #4294967295
 800f794:	4631      	mov	r1, r6
 800f796:	dcf1      	bgt.n	800f77c <__exponent+0x1c>
 800f798:	3130      	adds	r1, #48	@ 0x30
 800f79a:	1e94      	subs	r4, r2, #2
 800f79c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f7a0:	1c41      	adds	r1, r0, #1
 800f7a2:	4623      	mov	r3, r4
 800f7a4:	42ab      	cmp	r3, r5
 800f7a6:	d30a      	bcc.n	800f7be <__exponent+0x5e>
 800f7a8:	f10d 0309 	add.w	r3, sp, #9
 800f7ac:	1a9b      	subs	r3, r3, r2
 800f7ae:	42ac      	cmp	r4, r5
 800f7b0:	bf88      	it	hi
 800f7b2:	2300      	movhi	r3, #0
 800f7b4:	3302      	adds	r3, #2
 800f7b6:	4403      	add	r3, r0
 800f7b8:	1a18      	subs	r0, r3, r0
 800f7ba:	b003      	add	sp, #12
 800f7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7be:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f7c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f7c6:	e7ed      	b.n	800f7a4 <__exponent+0x44>
 800f7c8:	2330      	movs	r3, #48	@ 0x30
 800f7ca:	3130      	adds	r1, #48	@ 0x30
 800f7cc:	7083      	strb	r3, [r0, #2]
 800f7ce:	70c1      	strb	r1, [r0, #3]
 800f7d0:	1d03      	adds	r3, r0, #4
 800f7d2:	e7f1      	b.n	800f7b8 <__exponent+0x58>

0800f7d4 <_printf_float>:
 800f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d8:	b08d      	sub	sp, #52	@ 0x34
 800f7da:	460c      	mov	r4, r1
 800f7dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f7e0:	4616      	mov	r6, r2
 800f7e2:	461f      	mov	r7, r3
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	f000 fdf7 	bl	80103d8 <_localeconv_r>
 800f7ea:	6803      	ldr	r3, [r0, #0]
 800f7ec:	9304      	str	r3, [sp, #16]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7f0 fd56 	bl	80002a0 <strlen>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f7fc:	9005      	str	r0, [sp, #20]
 800f7fe:	3307      	adds	r3, #7
 800f800:	f023 0307 	bic.w	r3, r3, #7
 800f804:	f103 0208 	add.w	r2, r3, #8
 800f808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f80c:	f8d4 b000 	ldr.w	fp, [r4]
 800f810:	f8c8 2000 	str.w	r2, [r8]
 800f814:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f81c:	9307      	str	r3, [sp, #28]
 800f81e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f822:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f82a:	4b9c      	ldr	r3, [pc, #624]	@ (800fa9c <_printf_float+0x2c8>)
 800f82c:	f04f 32ff 	mov.w	r2, #4294967295
 800f830:	f7f1 f994 	bl	8000b5c <__aeabi_dcmpun>
 800f834:	bb70      	cbnz	r0, 800f894 <_printf_float+0xc0>
 800f836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f83a:	4b98      	ldr	r3, [pc, #608]	@ (800fa9c <_printf_float+0x2c8>)
 800f83c:	f04f 32ff 	mov.w	r2, #4294967295
 800f840:	f7f1 f96e 	bl	8000b20 <__aeabi_dcmple>
 800f844:	bb30      	cbnz	r0, 800f894 <_printf_float+0xc0>
 800f846:	2200      	movs	r2, #0
 800f848:	2300      	movs	r3, #0
 800f84a:	4640      	mov	r0, r8
 800f84c:	4649      	mov	r1, r9
 800f84e:	f7f1 f95d 	bl	8000b0c <__aeabi_dcmplt>
 800f852:	b110      	cbz	r0, 800f85a <_printf_float+0x86>
 800f854:	232d      	movs	r3, #45	@ 0x2d
 800f856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f85a:	4a91      	ldr	r2, [pc, #580]	@ (800faa0 <_printf_float+0x2cc>)
 800f85c:	4b91      	ldr	r3, [pc, #580]	@ (800faa4 <_printf_float+0x2d0>)
 800f85e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f862:	bf8c      	ite	hi
 800f864:	4690      	movhi	r8, r2
 800f866:	4698      	movls	r8, r3
 800f868:	2303      	movs	r3, #3
 800f86a:	6123      	str	r3, [r4, #16]
 800f86c:	f02b 0304 	bic.w	r3, fp, #4
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	f04f 0900 	mov.w	r9, #0
 800f876:	9700      	str	r7, [sp, #0]
 800f878:	4633      	mov	r3, r6
 800f87a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f87c:	4621      	mov	r1, r4
 800f87e:	4628      	mov	r0, r5
 800f880:	f000 f9d2 	bl	800fc28 <_printf_common>
 800f884:	3001      	adds	r0, #1
 800f886:	f040 808d 	bne.w	800f9a4 <_printf_float+0x1d0>
 800f88a:	f04f 30ff 	mov.w	r0, #4294967295
 800f88e:	b00d      	add	sp, #52	@ 0x34
 800f890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f894:	4642      	mov	r2, r8
 800f896:	464b      	mov	r3, r9
 800f898:	4640      	mov	r0, r8
 800f89a:	4649      	mov	r1, r9
 800f89c:	f7f1 f95e 	bl	8000b5c <__aeabi_dcmpun>
 800f8a0:	b140      	cbz	r0, 800f8b4 <_printf_float+0xe0>
 800f8a2:	464b      	mov	r3, r9
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	bfbc      	itt	lt
 800f8a8:	232d      	movlt	r3, #45	@ 0x2d
 800f8aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f8ae:	4a7e      	ldr	r2, [pc, #504]	@ (800faa8 <_printf_float+0x2d4>)
 800f8b0:	4b7e      	ldr	r3, [pc, #504]	@ (800faac <_printf_float+0x2d8>)
 800f8b2:	e7d4      	b.n	800f85e <_printf_float+0x8a>
 800f8b4:	6863      	ldr	r3, [r4, #4]
 800f8b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f8ba:	9206      	str	r2, [sp, #24]
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	d13b      	bne.n	800f938 <_printf_float+0x164>
 800f8c0:	2306      	movs	r3, #6
 800f8c2:	6063      	str	r3, [r4, #4]
 800f8c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	6022      	str	r2, [r4, #0]
 800f8cc:	9303      	str	r3, [sp, #12]
 800f8ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800f8d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f8d4:	ab09      	add	r3, sp, #36	@ 0x24
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	6861      	ldr	r1, [r4, #4]
 800f8da:	ec49 8b10 	vmov	d0, r8, r9
 800f8de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	f7ff fed7 	bl	800f696 <__cvt>
 800f8e8:	9b06      	ldr	r3, [sp, #24]
 800f8ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f8ec:	2b47      	cmp	r3, #71	@ 0x47
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	d129      	bne.n	800f946 <_printf_float+0x172>
 800f8f2:	1cc8      	adds	r0, r1, #3
 800f8f4:	db02      	blt.n	800f8fc <_printf_float+0x128>
 800f8f6:	6863      	ldr	r3, [r4, #4]
 800f8f8:	4299      	cmp	r1, r3
 800f8fa:	dd41      	ble.n	800f980 <_printf_float+0x1ac>
 800f8fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800f900:	fa5f fa8a 	uxtb.w	sl, sl
 800f904:	3901      	subs	r1, #1
 800f906:	4652      	mov	r2, sl
 800f908:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f90c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f90e:	f7ff ff27 	bl	800f760 <__exponent>
 800f912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f914:	1813      	adds	r3, r2, r0
 800f916:	2a01      	cmp	r2, #1
 800f918:	4681      	mov	r9, r0
 800f91a:	6123      	str	r3, [r4, #16]
 800f91c:	dc02      	bgt.n	800f924 <_printf_float+0x150>
 800f91e:	6822      	ldr	r2, [r4, #0]
 800f920:	07d2      	lsls	r2, r2, #31
 800f922:	d501      	bpl.n	800f928 <_printf_float+0x154>
 800f924:	3301      	adds	r3, #1
 800f926:	6123      	str	r3, [r4, #16]
 800f928:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0a2      	beq.n	800f876 <_printf_float+0xa2>
 800f930:	232d      	movs	r3, #45	@ 0x2d
 800f932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f936:	e79e      	b.n	800f876 <_printf_float+0xa2>
 800f938:	9a06      	ldr	r2, [sp, #24]
 800f93a:	2a47      	cmp	r2, #71	@ 0x47
 800f93c:	d1c2      	bne.n	800f8c4 <_printf_float+0xf0>
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1c0      	bne.n	800f8c4 <_printf_float+0xf0>
 800f942:	2301      	movs	r3, #1
 800f944:	e7bd      	b.n	800f8c2 <_printf_float+0xee>
 800f946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f94a:	d9db      	bls.n	800f904 <_printf_float+0x130>
 800f94c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f950:	d118      	bne.n	800f984 <_printf_float+0x1b0>
 800f952:	2900      	cmp	r1, #0
 800f954:	6863      	ldr	r3, [r4, #4]
 800f956:	dd0b      	ble.n	800f970 <_printf_float+0x19c>
 800f958:	6121      	str	r1, [r4, #16]
 800f95a:	b913      	cbnz	r3, 800f962 <_printf_float+0x18e>
 800f95c:	6822      	ldr	r2, [r4, #0]
 800f95e:	07d0      	lsls	r0, r2, #31
 800f960:	d502      	bpl.n	800f968 <_printf_float+0x194>
 800f962:	3301      	adds	r3, #1
 800f964:	440b      	add	r3, r1
 800f966:	6123      	str	r3, [r4, #16]
 800f968:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f96a:	f04f 0900 	mov.w	r9, #0
 800f96e:	e7db      	b.n	800f928 <_printf_float+0x154>
 800f970:	b913      	cbnz	r3, 800f978 <_printf_float+0x1a4>
 800f972:	6822      	ldr	r2, [r4, #0]
 800f974:	07d2      	lsls	r2, r2, #31
 800f976:	d501      	bpl.n	800f97c <_printf_float+0x1a8>
 800f978:	3302      	adds	r3, #2
 800f97a:	e7f4      	b.n	800f966 <_printf_float+0x192>
 800f97c:	2301      	movs	r3, #1
 800f97e:	e7f2      	b.n	800f966 <_printf_float+0x192>
 800f980:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f986:	4299      	cmp	r1, r3
 800f988:	db05      	blt.n	800f996 <_printf_float+0x1c2>
 800f98a:	6823      	ldr	r3, [r4, #0]
 800f98c:	6121      	str	r1, [r4, #16]
 800f98e:	07d8      	lsls	r0, r3, #31
 800f990:	d5ea      	bpl.n	800f968 <_printf_float+0x194>
 800f992:	1c4b      	adds	r3, r1, #1
 800f994:	e7e7      	b.n	800f966 <_printf_float+0x192>
 800f996:	2900      	cmp	r1, #0
 800f998:	bfd4      	ite	le
 800f99a:	f1c1 0202 	rsble	r2, r1, #2
 800f99e:	2201      	movgt	r2, #1
 800f9a0:	4413      	add	r3, r2
 800f9a2:	e7e0      	b.n	800f966 <_printf_float+0x192>
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	055a      	lsls	r2, r3, #21
 800f9a8:	d407      	bmi.n	800f9ba <_printf_float+0x1e6>
 800f9aa:	6923      	ldr	r3, [r4, #16]
 800f9ac:	4642      	mov	r2, r8
 800f9ae:	4631      	mov	r1, r6
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	47b8      	blx	r7
 800f9b4:	3001      	adds	r0, #1
 800f9b6:	d12b      	bne.n	800fa10 <_printf_float+0x23c>
 800f9b8:	e767      	b.n	800f88a <_printf_float+0xb6>
 800f9ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f9be:	f240 80dd 	bls.w	800fb7c <_printf_float+0x3a8>
 800f9c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f7f1 f895 	bl	8000af8 <__aeabi_dcmpeq>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d033      	beq.n	800fa3a <_printf_float+0x266>
 800f9d2:	4a37      	ldr	r2, [pc, #220]	@ (800fab0 <_printf_float+0x2dc>)
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4628      	mov	r0, r5
 800f9da:	47b8      	blx	r7
 800f9dc:	3001      	adds	r0, #1
 800f9de:	f43f af54 	beq.w	800f88a <_printf_float+0xb6>
 800f9e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f9e6:	4543      	cmp	r3, r8
 800f9e8:	db02      	blt.n	800f9f0 <_printf_float+0x21c>
 800f9ea:	6823      	ldr	r3, [r4, #0]
 800f9ec:	07d8      	lsls	r0, r3, #31
 800f9ee:	d50f      	bpl.n	800fa10 <_printf_float+0x23c>
 800f9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	47b8      	blx	r7
 800f9fa:	3001      	adds	r0, #1
 800f9fc:	f43f af45 	beq.w	800f88a <_printf_float+0xb6>
 800fa00:	f04f 0900 	mov.w	r9, #0
 800fa04:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa08:	f104 0a1a 	add.w	sl, r4, #26
 800fa0c:	45c8      	cmp	r8, r9
 800fa0e:	dc09      	bgt.n	800fa24 <_printf_float+0x250>
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	079b      	lsls	r3, r3, #30
 800fa14:	f100 8103 	bmi.w	800fc1e <_printf_float+0x44a>
 800fa18:	68e0      	ldr	r0, [r4, #12]
 800fa1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa1c:	4298      	cmp	r0, r3
 800fa1e:	bfb8      	it	lt
 800fa20:	4618      	movlt	r0, r3
 800fa22:	e734      	b.n	800f88e <_printf_float+0xba>
 800fa24:	2301      	movs	r3, #1
 800fa26:	4652      	mov	r2, sl
 800fa28:	4631      	mov	r1, r6
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	47b8      	blx	r7
 800fa2e:	3001      	adds	r0, #1
 800fa30:	f43f af2b 	beq.w	800f88a <_printf_float+0xb6>
 800fa34:	f109 0901 	add.w	r9, r9, #1
 800fa38:	e7e8      	b.n	800fa0c <_printf_float+0x238>
 800fa3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	dc39      	bgt.n	800fab4 <_printf_float+0x2e0>
 800fa40:	4a1b      	ldr	r2, [pc, #108]	@ (800fab0 <_printf_float+0x2dc>)
 800fa42:	2301      	movs	r3, #1
 800fa44:	4631      	mov	r1, r6
 800fa46:	4628      	mov	r0, r5
 800fa48:	47b8      	blx	r7
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	f43f af1d 	beq.w	800f88a <_printf_float+0xb6>
 800fa50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fa54:	ea59 0303 	orrs.w	r3, r9, r3
 800fa58:	d102      	bne.n	800fa60 <_printf_float+0x28c>
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	07d9      	lsls	r1, r3, #31
 800fa5e:	d5d7      	bpl.n	800fa10 <_printf_float+0x23c>
 800fa60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa64:	4631      	mov	r1, r6
 800fa66:	4628      	mov	r0, r5
 800fa68:	47b8      	blx	r7
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	f43f af0d 	beq.w	800f88a <_printf_float+0xb6>
 800fa70:	f04f 0a00 	mov.w	sl, #0
 800fa74:	f104 0b1a 	add.w	fp, r4, #26
 800fa78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa7a:	425b      	negs	r3, r3
 800fa7c:	4553      	cmp	r3, sl
 800fa7e:	dc01      	bgt.n	800fa84 <_printf_float+0x2b0>
 800fa80:	464b      	mov	r3, r9
 800fa82:	e793      	b.n	800f9ac <_printf_float+0x1d8>
 800fa84:	2301      	movs	r3, #1
 800fa86:	465a      	mov	r2, fp
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	47b8      	blx	r7
 800fa8e:	3001      	adds	r0, #1
 800fa90:	f43f aefb 	beq.w	800f88a <_printf_float+0xb6>
 800fa94:	f10a 0a01 	add.w	sl, sl, #1
 800fa98:	e7ee      	b.n	800fa78 <_printf_float+0x2a4>
 800fa9a:	bf00      	nop
 800fa9c:	7fefffff 	.word	0x7fefffff
 800faa0:	0801eb28 	.word	0x0801eb28
 800faa4:	0801eb24 	.word	0x0801eb24
 800faa8:	0801eb30 	.word	0x0801eb30
 800faac:	0801eb2c 	.word	0x0801eb2c
 800fab0:	0801eb34 	.word	0x0801eb34
 800fab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800faba:	4553      	cmp	r3, sl
 800fabc:	bfa8      	it	ge
 800fabe:	4653      	movge	r3, sl
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	4699      	mov	r9, r3
 800fac4:	dc36      	bgt.n	800fb34 <_printf_float+0x360>
 800fac6:	f04f 0b00 	mov.w	fp, #0
 800faca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800face:	f104 021a 	add.w	r2, r4, #26
 800fad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fad4:	9306      	str	r3, [sp, #24]
 800fad6:	eba3 0309 	sub.w	r3, r3, r9
 800fada:	455b      	cmp	r3, fp
 800fadc:	dc31      	bgt.n	800fb42 <_printf_float+0x36e>
 800fade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae0:	459a      	cmp	sl, r3
 800fae2:	dc3a      	bgt.n	800fb5a <_printf_float+0x386>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	07da      	lsls	r2, r3, #31
 800fae8:	d437      	bmi.n	800fb5a <_printf_float+0x386>
 800faea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faec:	ebaa 0903 	sub.w	r9, sl, r3
 800faf0:	9b06      	ldr	r3, [sp, #24]
 800faf2:	ebaa 0303 	sub.w	r3, sl, r3
 800faf6:	4599      	cmp	r9, r3
 800faf8:	bfa8      	it	ge
 800fafa:	4699      	movge	r9, r3
 800fafc:	f1b9 0f00 	cmp.w	r9, #0
 800fb00:	dc33      	bgt.n	800fb6a <_printf_float+0x396>
 800fb02:	f04f 0800 	mov.w	r8, #0
 800fb06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb0a:	f104 0b1a 	add.w	fp, r4, #26
 800fb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb10:	ebaa 0303 	sub.w	r3, sl, r3
 800fb14:	eba3 0309 	sub.w	r3, r3, r9
 800fb18:	4543      	cmp	r3, r8
 800fb1a:	f77f af79 	ble.w	800fa10 <_printf_float+0x23c>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	465a      	mov	r2, fp
 800fb22:	4631      	mov	r1, r6
 800fb24:	4628      	mov	r0, r5
 800fb26:	47b8      	blx	r7
 800fb28:	3001      	adds	r0, #1
 800fb2a:	f43f aeae 	beq.w	800f88a <_printf_float+0xb6>
 800fb2e:	f108 0801 	add.w	r8, r8, #1
 800fb32:	e7ec      	b.n	800fb0e <_printf_float+0x33a>
 800fb34:	4642      	mov	r2, r8
 800fb36:	4631      	mov	r1, r6
 800fb38:	4628      	mov	r0, r5
 800fb3a:	47b8      	blx	r7
 800fb3c:	3001      	adds	r0, #1
 800fb3e:	d1c2      	bne.n	800fac6 <_printf_float+0x2f2>
 800fb40:	e6a3      	b.n	800f88a <_printf_float+0xb6>
 800fb42:	2301      	movs	r3, #1
 800fb44:	4631      	mov	r1, r6
 800fb46:	4628      	mov	r0, r5
 800fb48:	9206      	str	r2, [sp, #24]
 800fb4a:	47b8      	blx	r7
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	f43f ae9c 	beq.w	800f88a <_printf_float+0xb6>
 800fb52:	9a06      	ldr	r2, [sp, #24]
 800fb54:	f10b 0b01 	add.w	fp, fp, #1
 800fb58:	e7bb      	b.n	800fad2 <_printf_float+0x2fe>
 800fb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb5e:	4631      	mov	r1, r6
 800fb60:	4628      	mov	r0, r5
 800fb62:	47b8      	blx	r7
 800fb64:	3001      	adds	r0, #1
 800fb66:	d1c0      	bne.n	800faea <_printf_float+0x316>
 800fb68:	e68f      	b.n	800f88a <_printf_float+0xb6>
 800fb6a:	9a06      	ldr	r2, [sp, #24]
 800fb6c:	464b      	mov	r3, r9
 800fb6e:	4442      	add	r2, r8
 800fb70:	4631      	mov	r1, r6
 800fb72:	4628      	mov	r0, r5
 800fb74:	47b8      	blx	r7
 800fb76:	3001      	adds	r0, #1
 800fb78:	d1c3      	bne.n	800fb02 <_printf_float+0x32e>
 800fb7a:	e686      	b.n	800f88a <_printf_float+0xb6>
 800fb7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb80:	f1ba 0f01 	cmp.w	sl, #1
 800fb84:	dc01      	bgt.n	800fb8a <_printf_float+0x3b6>
 800fb86:	07db      	lsls	r3, r3, #31
 800fb88:	d536      	bpl.n	800fbf8 <_printf_float+0x424>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	4642      	mov	r2, r8
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4628      	mov	r0, r5
 800fb92:	47b8      	blx	r7
 800fb94:	3001      	adds	r0, #1
 800fb96:	f43f ae78 	beq.w	800f88a <_printf_float+0xb6>
 800fb9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb9e:	4631      	mov	r1, r6
 800fba0:	4628      	mov	r0, r5
 800fba2:	47b8      	blx	r7
 800fba4:	3001      	adds	r0, #1
 800fba6:	f43f ae70 	beq.w	800f88a <_printf_float+0xb6>
 800fbaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fbae:	2200      	movs	r2, #0
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbb6:	f7f0 ff9f 	bl	8000af8 <__aeabi_dcmpeq>
 800fbba:	b9c0      	cbnz	r0, 800fbee <_printf_float+0x41a>
 800fbbc:	4653      	mov	r3, sl
 800fbbe:	f108 0201 	add.w	r2, r8, #1
 800fbc2:	4631      	mov	r1, r6
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	47b8      	blx	r7
 800fbc8:	3001      	adds	r0, #1
 800fbca:	d10c      	bne.n	800fbe6 <_printf_float+0x412>
 800fbcc:	e65d      	b.n	800f88a <_printf_float+0xb6>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	465a      	mov	r2, fp
 800fbd2:	4631      	mov	r1, r6
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	47b8      	blx	r7
 800fbd8:	3001      	adds	r0, #1
 800fbda:	f43f ae56 	beq.w	800f88a <_printf_float+0xb6>
 800fbde:	f108 0801 	add.w	r8, r8, #1
 800fbe2:	45d0      	cmp	r8, sl
 800fbe4:	dbf3      	blt.n	800fbce <_printf_float+0x3fa>
 800fbe6:	464b      	mov	r3, r9
 800fbe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fbec:	e6df      	b.n	800f9ae <_printf_float+0x1da>
 800fbee:	f04f 0800 	mov.w	r8, #0
 800fbf2:	f104 0b1a 	add.w	fp, r4, #26
 800fbf6:	e7f4      	b.n	800fbe2 <_printf_float+0x40e>
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	4642      	mov	r2, r8
 800fbfc:	e7e1      	b.n	800fbc2 <_printf_float+0x3ee>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	464a      	mov	r2, r9
 800fc02:	4631      	mov	r1, r6
 800fc04:	4628      	mov	r0, r5
 800fc06:	47b8      	blx	r7
 800fc08:	3001      	adds	r0, #1
 800fc0a:	f43f ae3e 	beq.w	800f88a <_printf_float+0xb6>
 800fc0e:	f108 0801 	add.w	r8, r8, #1
 800fc12:	68e3      	ldr	r3, [r4, #12]
 800fc14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc16:	1a5b      	subs	r3, r3, r1
 800fc18:	4543      	cmp	r3, r8
 800fc1a:	dcf0      	bgt.n	800fbfe <_printf_float+0x42a>
 800fc1c:	e6fc      	b.n	800fa18 <_printf_float+0x244>
 800fc1e:	f04f 0800 	mov.w	r8, #0
 800fc22:	f104 0919 	add.w	r9, r4, #25
 800fc26:	e7f4      	b.n	800fc12 <_printf_float+0x43e>

0800fc28 <_printf_common>:
 800fc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc2c:	4616      	mov	r6, r2
 800fc2e:	4698      	mov	r8, r3
 800fc30:	688a      	ldr	r2, [r1, #8]
 800fc32:	690b      	ldr	r3, [r1, #16]
 800fc34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	bfb8      	it	lt
 800fc3c:	4613      	movlt	r3, r2
 800fc3e:	6033      	str	r3, [r6, #0]
 800fc40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc44:	4607      	mov	r7, r0
 800fc46:	460c      	mov	r4, r1
 800fc48:	b10a      	cbz	r2, 800fc4e <_printf_common+0x26>
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	6033      	str	r3, [r6, #0]
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	0699      	lsls	r1, r3, #26
 800fc52:	bf42      	ittt	mi
 800fc54:	6833      	ldrmi	r3, [r6, #0]
 800fc56:	3302      	addmi	r3, #2
 800fc58:	6033      	strmi	r3, [r6, #0]
 800fc5a:	6825      	ldr	r5, [r4, #0]
 800fc5c:	f015 0506 	ands.w	r5, r5, #6
 800fc60:	d106      	bne.n	800fc70 <_printf_common+0x48>
 800fc62:	f104 0a19 	add.w	sl, r4, #25
 800fc66:	68e3      	ldr	r3, [r4, #12]
 800fc68:	6832      	ldr	r2, [r6, #0]
 800fc6a:	1a9b      	subs	r3, r3, r2
 800fc6c:	42ab      	cmp	r3, r5
 800fc6e:	dc26      	bgt.n	800fcbe <_printf_common+0x96>
 800fc70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc74:	6822      	ldr	r2, [r4, #0]
 800fc76:	3b00      	subs	r3, #0
 800fc78:	bf18      	it	ne
 800fc7a:	2301      	movne	r3, #1
 800fc7c:	0692      	lsls	r2, r2, #26
 800fc7e:	d42b      	bmi.n	800fcd8 <_printf_common+0xb0>
 800fc80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc84:	4641      	mov	r1, r8
 800fc86:	4638      	mov	r0, r7
 800fc88:	47c8      	blx	r9
 800fc8a:	3001      	adds	r0, #1
 800fc8c:	d01e      	beq.n	800fccc <_printf_common+0xa4>
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	6922      	ldr	r2, [r4, #16]
 800fc92:	f003 0306 	and.w	r3, r3, #6
 800fc96:	2b04      	cmp	r3, #4
 800fc98:	bf02      	ittt	eq
 800fc9a:	68e5      	ldreq	r5, [r4, #12]
 800fc9c:	6833      	ldreq	r3, [r6, #0]
 800fc9e:	1aed      	subeq	r5, r5, r3
 800fca0:	68a3      	ldr	r3, [r4, #8]
 800fca2:	bf0c      	ite	eq
 800fca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fca8:	2500      	movne	r5, #0
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	bfc4      	itt	gt
 800fcae:	1a9b      	subgt	r3, r3, r2
 800fcb0:	18ed      	addgt	r5, r5, r3
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	341a      	adds	r4, #26
 800fcb6:	42b5      	cmp	r5, r6
 800fcb8:	d11a      	bne.n	800fcf0 <_printf_common+0xc8>
 800fcba:	2000      	movs	r0, #0
 800fcbc:	e008      	b.n	800fcd0 <_printf_common+0xa8>
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	4652      	mov	r2, sl
 800fcc2:	4641      	mov	r1, r8
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	47c8      	blx	r9
 800fcc8:	3001      	adds	r0, #1
 800fcca:	d103      	bne.n	800fcd4 <_printf_common+0xac>
 800fccc:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd4:	3501      	adds	r5, #1
 800fcd6:	e7c6      	b.n	800fc66 <_printf_common+0x3e>
 800fcd8:	18e1      	adds	r1, r4, r3
 800fcda:	1c5a      	adds	r2, r3, #1
 800fcdc:	2030      	movs	r0, #48	@ 0x30
 800fcde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fce2:	4422      	add	r2, r4
 800fce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fcec:	3302      	adds	r3, #2
 800fcee:	e7c7      	b.n	800fc80 <_printf_common+0x58>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4622      	mov	r2, r4
 800fcf4:	4641      	mov	r1, r8
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	47c8      	blx	r9
 800fcfa:	3001      	adds	r0, #1
 800fcfc:	d0e6      	beq.n	800fccc <_printf_common+0xa4>
 800fcfe:	3601      	adds	r6, #1
 800fd00:	e7d9      	b.n	800fcb6 <_printf_common+0x8e>
	...

0800fd04 <_printf_i>:
 800fd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd08:	7e0f      	ldrb	r7, [r1, #24]
 800fd0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fd0c:	2f78      	cmp	r7, #120	@ 0x78
 800fd0e:	4691      	mov	r9, r2
 800fd10:	4680      	mov	r8, r0
 800fd12:	460c      	mov	r4, r1
 800fd14:	469a      	mov	sl, r3
 800fd16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fd1a:	d807      	bhi.n	800fd2c <_printf_i+0x28>
 800fd1c:	2f62      	cmp	r7, #98	@ 0x62
 800fd1e:	d80a      	bhi.n	800fd36 <_printf_i+0x32>
 800fd20:	2f00      	cmp	r7, #0
 800fd22:	f000 80d1 	beq.w	800fec8 <_printf_i+0x1c4>
 800fd26:	2f58      	cmp	r7, #88	@ 0x58
 800fd28:	f000 80b8 	beq.w	800fe9c <_printf_i+0x198>
 800fd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fd34:	e03a      	b.n	800fdac <_printf_i+0xa8>
 800fd36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd3a:	2b15      	cmp	r3, #21
 800fd3c:	d8f6      	bhi.n	800fd2c <_printf_i+0x28>
 800fd3e:	a101      	add	r1, pc, #4	@ (adr r1, 800fd44 <_printf_i+0x40>)
 800fd40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd44:	0800fd9d 	.word	0x0800fd9d
 800fd48:	0800fdb1 	.word	0x0800fdb1
 800fd4c:	0800fd2d 	.word	0x0800fd2d
 800fd50:	0800fd2d 	.word	0x0800fd2d
 800fd54:	0800fd2d 	.word	0x0800fd2d
 800fd58:	0800fd2d 	.word	0x0800fd2d
 800fd5c:	0800fdb1 	.word	0x0800fdb1
 800fd60:	0800fd2d 	.word	0x0800fd2d
 800fd64:	0800fd2d 	.word	0x0800fd2d
 800fd68:	0800fd2d 	.word	0x0800fd2d
 800fd6c:	0800fd2d 	.word	0x0800fd2d
 800fd70:	0800feaf 	.word	0x0800feaf
 800fd74:	0800fddb 	.word	0x0800fddb
 800fd78:	0800fe69 	.word	0x0800fe69
 800fd7c:	0800fd2d 	.word	0x0800fd2d
 800fd80:	0800fd2d 	.word	0x0800fd2d
 800fd84:	0800fed1 	.word	0x0800fed1
 800fd88:	0800fd2d 	.word	0x0800fd2d
 800fd8c:	0800fddb 	.word	0x0800fddb
 800fd90:	0800fd2d 	.word	0x0800fd2d
 800fd94:	0800fd2d 	.word	0x0800fd2d
 800fd98:	0800fe71 	.word	0x0800fe71
 800fd9c:	6833      	ldr	r3, [r6, #0]
 800fd9e:	1d1a      	adds	r2, r3, #4
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	6032      	str	r2, [r6, #0]
 800fda4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fda8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fdac:	2301      	movs	r3, #1
 800fdae:	e09c      	b.n	800feea <_printf_i+0x1e6>
 800fdb0:	6833      	ldr	r3, [r6, #0]
 800fdb2:	6820      	ldr	r0, [r4, #0]
 800fdb4:	1d19      	adds	r1, r3, #4
 800fdb6:	6031      	str	r1, [r6, #0]
 800fdb8:	0606      	lsls	r6, r0, #24
 800fdba:	d501      	bpl.n	800fdc0 <_printf_i+0xbc>
 800fdbc:	681d      	ldr	r5, [r3, #0]
 800fdbe:	e003      	b.n	800fdc8 <_printf_i+0xc4>
 800fdc0:	0645      	lsls	r5, r0, #25
 800fdc2:	d5fb      	bpl.n	800fdbc <_printf_i+0xb8>
 800fdc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fdc8:	2d00      	cmp	r5, #0
 800fdca:	da03      	bge.n	800fdd4 <_printf_i+0xd0>
 800fdcc:	232d      	movs	r3, #45	@ 0x2d
 800fdce:	426d      	negs	r5, r5
 800fdd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdd4:	4858      	ldr	r0, [pc, #352]	@ (800ff38 <_printf_i+0x234>)
 800fdd6:	230a      	movs	r3, #10
 800fdd8:	e011      	b.n	800fdfe <_printf_i+0xfa>
 800fdda:	6821      	ldr	r1, [r4, #0]
 800fddc:	6833      	ldr	r3, [r6, #0]
 800fdde:	0608      	lsls	r0, r1, #24
 800fde0:	f853 5b04 	ldr.w	r5, [r3], #4
 800fde4:	d402      	bmi.n	800fdec <_printf_i+0xe8>
 800fde6:	0649      	lsls	r1, r1, #25
 800fde8:	bf48      	it	mi
 800fdea:	b2ad      	uxthmi	r5, r5
 800fdec:	2f6f      	cmp	r7, #111	@ 0x6f
 800fdee:	4852      	ldr	r0, [pc, #328]	@ (800ff38 <_printf_i+0x234>)
 800fdf0:	6033      	str	r3, [r6, #0]
 800fdf2:	bf14      	ite	ne
 800fdf4:	230a      	movne	r3, #10
 800fdf6:	2308      	moveq	r3, #8
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fdfe:	6866      	ldr	r6, [r4, #4]
 800fe00:	60a6      	str	r6, [r4, #8]
 800fe02:	2e00      	cmp	r6, #0
 800fe04:	db05      	blt.n	800fe12 <_printf_i+0x10e>
 800fe06:	6821      	ldr	r1, [r4, #0]
 800fe08:	432e      	orrs	r6, r5
 800fe0a:	f021 0104 	bic.w	r1, r1, #4
 800fe0e:	6021      	str	r1, [r4, #0]
 800fe10:	d04b      	beq.n	800feaa <_printf_i+0x1a6>
 800fe12:	4616      	mov	r6, r2
 800fe14:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe18:	fb03 5711 	mls	r7, r3, r1, r5
 800fe1c:	5dc7      	ldrb	r7, [r0, r7]
 800fe1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe22:	462f      	mov	r7, r5
 800fe24:	42bb      	cmp	r3, r7
 800fe26:	460d      	mov	r5, r1
 800fe28:	d9f4      	bls.n	800fe14 <_printf_i+0x110>
 800fe2a:	2b08      	cmp	r3, #8
 800fe2c:	d10b      	bne.n	800fe46 <_printf_i+0x142>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	07df      	lsls	r7, r3, #31
 800fe32:	d508      	bpl.n	800fe46 <_printf_i+0x142>
 800fe34:	6923      	ldr	r3, [r4, #16]
 800fe36:	6861      	ldr	r1, [r4, #4]
 800fe38:	4299      	cmp	r1, r3
 800fe3a:	bfde      	ittt	le
 800fe3c:	2330      	movle	r3, #48	@ 0x30
 800fe3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe42:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe46:	1b92      	subs	r2, r2, r6
 800fe48:	6122      	str	r2, [r4, #16]
 800fe4a:	f8cd a000 	str.w	sl, [sp]
 800fe4e:	464b      	mov	r3, r9
 800fe50:	aa03      	add	r2, sp, #12
 800fe52:	4621      	mov	r1, r4
 800fe54:	4640      	mov	r0, r8
 800fe56:	f7ff fee7 	bl	800fc28 <_printf_common>
 800fe5a:	3001      	adds	r0, #1
 800fe5c:	d14a      	bne.n	800fef4 <_printf_i+0x1f0>
 800fe5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe62:	b004      	add	sp, #16
 800fe64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe68:	6823      	ldr	r3, [r4, #0]
 800fe6a:	f043 0320 	orr.w	r3, r3, #32
 800fe6e:	6023      	str	r3, [r4, #0]
 800fe70:	4832      	ldr	r0, [pc, #200]	@ (800ff3c <_printf_i+0x238>)
 800fe72:	2778      	movs	r7, #120	@ 0x78
 800fe74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	6831      	ldr	r1, [r6, #0]
 800fe7c:	061f      	lsls	r7, r3, #24
 800fe7e:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe82:	d402      	bmi.n	800fe8a <_printf_i+0x186>
 800fe84:	065f      	lsls	r7, r3, #25
 800fe86:	bf48      	it	mi
 800fe88:	b2ad      	uxthmi	r5, r5
 800fe8a:	6031      	str	r1, [r6, #0]
 800fe8c:	07d9      	lsls	r1, r3, #31
 800fe8e:	bf44      	itt	mi
 800fe90:	f043 0320 	orrmi.w	r3, r3, #32
 800fe94:	6023      	strmi	r3, [r4, #0]
 800fe96:	b11d      	cbz	r5, 800fea0 <_printf_i+0x19c>
 800fe98:	2310      	movs	r3, #16
 800fe9a:	e7ad      	b.n	800fdf8 <_printf_i+0xf4>
 800fe9c:	4826      	ldr	r0, [pc, #152]	@ (800ff38 <_printf_i+0x234>)
 800fe9e:	e7e9      	b.n	800fe74 <_printf_i+0x170>
 800fea0:	6823      	ldr	r3, [r4, #0]
 800fea2:	f023 0320 	bic.w	r3, r3, #32
 800fea6:	6023      	str	r3, [r4, #0]
 800fea8:	e7f6      	b.n	800fe98 <_printf_i+0x194>
 800feaa:	4616      	mov	r6, r2
 800feac:	e7bd      	b.n	800fe2a <_printf_i+0x126>
 800feae:	6833      	ldr	r3, [r6, #0]
 800feb0:	6825      	ldr	r5, [r4, #0]
 800feb2:	6961      	ldr	r1, [r4, #20]
 800feb4:	1d18      	adds	r0, r3, #4
 800feb6:	6030      	str	r0, [r6, #0]
 800feb8:	062e      	lsls	r6, r5, #24
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	d501      	bpl.n	800fec2 <_printf_i+0x1be>
 800febe:	6019      	str	r1, [r3, #0]
 800fec0:	e002      	b.n	800fec8 <_printf_i+0x1c4>
 800fec2:	0668      	lsls	r0, r5, #25
 800fec4:	d5fb      	bpl.n	800febe <_printf_i+0x1ba>
 800fec6:	8019      	strh	r1, [r3, #0]
 800fec8:	2300      	movs	r3, #0
 800feca:	6123      	str	r3, [r4, #16]
 800fecc:	4616      	mov	r6, r2
 800fece:	e7bc      	b.n	800fe4a <_printf_i+0x146>
 800fed0:	6833      	ldr	r3, [r6, #0]
 800fed2:	1d1a      	adds	r2, r3, #4
 800fed4:	6032      	str	r2, [r6, #0]
 800fed6:	681e      	ldr	r6, [r3, #0]
 800fed8:	6862      	ldr	r2, [r4, #4]
 800feda:	2100      	movs	r1, #0
 800fedc:	4630      	mov	r0, r6
 800fede:	f7f0 f98f 	bl	8000200 <memchr>
 800fee2:	b108      	cbz	r0, 800fee8 <_printf_i+0x1e4>
 800fee4:	1b80      	subs	r0, r0, r6
 800fee6:	6060      	str	r0, [r4, #4]
 800fee8:	6863      	ldr	r3, [r4, #4]
 800feea:	6123      	str	r3, [r4, #16]
 800feec:	2300      	movs	r3, #0
 800feee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fef2:	e7aa      	b.n	800fe4a <_printf_i+0x146>
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	4632      	mov	r2, r6
 800fef8:	4649      	mov	r1, r9
 800fefa:	4640      	mov	r0, r8
 800fefc:	47d0      	blx	sl
 800fefe:	3001      	adds	r0, #1
 800ff00:	d0ad      	beq.n	800fe5e <_printf_i+0x15a>
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	079b      	lsls	r3, r3, #30
 800ff06:	d413      	bmi.n	800ff30 <_printf_i+0x22c>
 800ff08:	68e0      	ldr	r0, [r4, #12]
 800ff0a:	9b03      	ldr	r3, [sp, #12]
 800ff0c:	4298      	cmp	r0, r3
 800ff0e:	bfb8      	it	lt
 800ff10:	4618      	movlt	r0, r3
 800ff12:	e7a6      	b.n	800fe62 <_printf_i+0x15e>
 800ff14:	2301      	movs	r3, #1
 800ff16:	4632      	mov	r2, r6
 800ff18:	4649      	mov	r1, r9
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	47d0      	blx	sl
 800ff1e:	3001      	adds	r0, #1
 800ff20:	d09d      	beq.n	800fe5e <_printf_i+0x15a>
 800ff22:	3501      	adds	r5, #1
 800ff24:	68e3      	ldr	r3, [r4, #12]
 800ff26:	9903      	ldr	r1, [sp, #12]
 800ff28:	1a5b      	subs	r3, r3, r1
 800ff2a:	42ab      	cmp	r3, r5
 800ff2c:	dcf2      	bgt.n	800ff14 <_printf_i+0x210>
 800ff2e:	e7eb      	b.n	800ff08 <_printf_i+0x204>
 800ff30:	2500      	movs	r5, #0
 800ff32:	f104 0619 	add.w	r6, r4, #25
 800ff36:	e7f5      	b.n	800ff24 <_printf_i+0x220>
 800ff38:	0801eb36 	.word	0x0801eb36
 800ff3c:	0801eb47 	.word	0x0801eb47

0800ff40 <std>:
 800ff40:	2300      	movs	r3, #0
 800ff42:	b510      	push	{r4, lr}
 800ff44:	4604      	mov	r4, r0
 800ff46:	e9c0 3300 	strd	r3, r3, [r0]
 800ff4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff4e:	6083      	str	r3, [r0, #8]
 800ff50:	8181      	strh	r1, [r0, #12]
 800ff52:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff54:	81c2      	strh	r2, [r0, #14]
 800ff56:	6183      	str	r3, [r0, #24]
 800ff58:	4619      	mov	r1, r3
 800ff5a:	2208      	movs	r2, #8
 800ff5c:	305c      	adds	r0, #92	@ 0x5c
 800ff5e:	f000 fa23 	bl	80103a8 <memset>
 800ff62:	4b0d      	ldr	r3, [pc, #52]	@ (800ff98 <std+0x58>)
 800ff64:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff66:	4b0d      	ldr	r3, [pc, #52]	@ (800ff9c <std+0x5c>)
 800ff68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff6a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa0 <std+0x60>)
 800ff6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff6e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa4 <std+0x64>)
 800ff70:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff72:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa8 <std+0x68>)
 800ff74:	6224      	str	r4, [r4, #32]
 800ff76:	429c      	cmp	r4, r3
 800ff78:	d006      	beq.n	800ff88 <std+0x48>
 800ff7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ff7e:	4294      	cmp	r4, r2
 800ff80:	d002      	beq.n	800ff88 <std+0x48>
 800ff82:	33d0      	adds	r3, #208	@ 0xd0
 800ff84:	429c      	cmp	r4, r3
 800ff86:	d105      	bne.n	800ff94 <std+0x54>
 800ff88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ff8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff90:	f000 ba96 	b.w	80104c0 <__retarget_lock_init_recursive>
 800ff94:	bd10      	pop	{r4, pc}
 800ff96:	bf00      	nop
 800ff98:	080101f9 	.word	0x080101f9
 800ff9c:	0801021b 	.word	0x0801021b
 800ffa0:	08010253 	.word	0x08010253
 800ffa4:	08010277 	.word	0x08010277
 800ffa8:	20040ba4 	.word	0x20040ba4

0800ffac <stdio_exit_handler>:
 800ffac:	4a02      	ldr	r2, [pc, #8]	@ (800ffb8 <stdio_exit_handler+0xc>)
 800ffae:	4903      	ldr	r1, [pc, #12]	@ (800ffbc <stdio_exit_handler+0x10>)
 800ffb0:	4803      	ldr	r0, [pc, #12]	@ (800ffc0 <stdio_exit_handler+0x14>)
 800ffb2:	f000 b869 	b.w	8010088 <_fwalk_sglue>
 800ffb6:	bf00      	nop
 800ffb8:	20040300 	.word	0x20040300
 800ffbc:	080120d9 	.word	0x080120d9
 800ffc0:	20040310 	.word	0x20040310

0800ffc4 <cleanup_stdio>:
 800ffc4:	6841      	ldr	r1, [r0, #4]
 800ffc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fff8 <cleanup_stdio+0x34>)
 800ffc8:	4299      	cmp	r1, r3
 800ffca:	b510      	push	{r4, lr}
 800ffcc:	4604      	mov	r4, r0
 800ffce:	d001      	beq.n	800ffd4 <cleanup_stdio+0x10>
 800ffd0:	f002 f882 	bl	80120d8 <_fflush_r>
 800ffd4:	68a1      	ldr	r1, [r4, #8]
 800ffd6:	4b09      	ldr	r3, [pc, #36]	@ (800fffc <cleanup_stdio+0x38>)
 800ffd8:	4299      	cmp	r1, r3
 800ffda:	d002      	beq.n	800ffe2 <cleanup_stdio+0x1e>
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f002 f87b 	bl	80120d8 <_fflush_r>
 800ffe2:	68e1      	ldr	r1, [r4, #12]
 800ffe4:	4b06      	ldr	r3, [pc, #24]	@ (8010000 <cleanup_stdio+0x3c>)
 800ffe6:	4299      	cmp	r1, r3
 800ffe8:	d004      	beq.n	800fff4 <cleanup_stdio+0x30>
 800ffea:	4620      	mov	r0, r4
 800ffec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fff0:	f002 b872 	b.w	80120d8 <_fflush_r>
 800fff4:	bd10      	pop	{r4, pc}
 800fff6:	bf00      	nop
 800fff8:	20040ba4 	.word	0x20040ba4
 800fffc:	20040c0c 	.word	0x20040c0c
 8010000:	20040c74 	.word	0x20040c74

08010004 <global_stdio_init.part.0>:
 8010004:	b510      	push	{r4, lr}
 8010006:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <global_stdio_init.part.0+0x30>)
 8010008:	4c0b      	ldr	r4, [pc, #44]	@ (8010038 <global_stdio_init.part.0+0x34>)
 801000a:	4a0c      	ldr	r2, [pc, #48]	@ (801003c <global_stdio_init.part.0+0x38>)
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	4620      	mov	r0, r4
 8010010:	2200      	movs	r2, #0
 8010012:	2104      	movs	r1, #4
 8010014:	f7ff ff94 	bl	800ff40 <std>
 8010018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801001c:	2201      	movs	r2, #1
 801001e:	2109      	movs	r1, #9
 8010020:	f7ff ff8e 	bl	800ff40 <std>
 8010024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010028:	2202      	movs	r2, #2
 801002a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801002e:	2112      	movs	r1, #18
 8010030:	f7ff bf86 	b.w	800ff40 <std>
 8010034:	20040cdc 	.word	0x20040cdc
 8010038:	20040ba4 	.word	0x20040ba4
 801003c:	0800ffad 	.word	0x0800ffad

08010040 <__sfp_lock_acquire>:
 8010040:	4801      	ldr	r0, [pc, #4]	@ (8010048 <__sfp_lock_acquire+0x8>)
 8010042:	f000 ba3e 	b.w	80104c2 <__retarget_lock_acquire_recursive>
 8010046:	bf00      	nop
 8010048:	20040ce5 	.word	0x20040ce5

0801004c <__sfp_lock_release>:
 801004c:	4801      	ldr	r0, [pc, #4]	@ (8010054 <__sfp_lock_release+0x8>)
 801004e:	f000 ba39 	b.w	80104c4 <__retarget_lock_release_recursive>
 8010052:	bf00      	nop
 8010054:	20040ce5 	.word	0x20040ce5

08010058 <__sinit>:
 8010058:	b510      	push	{r4, lr}
 801005a:	4604      	mov	r4, r0
 801005c:	f7ff fff0 	bl	8010040 <__sfp_lock_acquire>
 8010060:	6a23      	ldr	r3, [r4, #32]
 8010062:	b11b      	cbz	r3, 801006c <__sinit+0x14>
 8010064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010068:	f7ff bff0 	b.w	801004c <__sfp_lock_release>
 801006c:	4b04      	ldr	r3, [pc, #16]	@ (8010080 <__sinit+0x28>)
 801006e:	6223      	str	r3, [r4, #32]
 8010070:	4b04      	ldr	r3, [pc, #16]	@ (8010084 <__sinit+0x2c>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d1f5      	bne.n	8010064 <__sinit+0xc>
 8010078:	f7ff ffc4 	bl	8010004 <global_stdio_init.part.0>
 801007c:	e7f2      	b.n	8010064 <__sinit+0xc>
 801007e:	bf00      	nop
 8010080:	0800ffc5 	.word	0x0800ffc5
 8010084:	20040cdc 	.word	0x20040cdc

08010088 <_fwalk_sglue>:
 8010088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801008c:	4607      	mov	r7, r0
 801008e:	4688      	mov	r8, r1
 8010090:	4614      	mov	r4, r2
 8010092:	2600      	movs	r6, #0
 8010094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010098:	f1b9 0901 	subs.w	r9, r9, #1
 801009c:	d505      	bpl.n	80100aa <_fwalk_sglue+0x22>
 801009e:	6824      	ldr	r4, [r4, #0]
 80100a0:	2c00      	cmp	r4, #0
 80100a2:	d1f7      	bne.n	8010094 <_fwalk_sglue+0xc>
 80100a4:	4630      	mov	r0, r6
 80100a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100aa:	89ab      	ldrh	r3, [r5, #12]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d907      	bls.n	80100c0 <_fwalk_sglue+0x38>
 80100b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100b4:	3301      	adds	r3, #1
 80100b6:	d003      	beq.n	80100c0 <_fwalk_sglue+0x38>
 80100b8:	4629      	mov	r1, r5
 80100ba:	4638      	mov	r0, r7
 80100bc:	47c0      	blx	r8
 80100be:	4306      	orrs	r6, r0
 80100c0:	3568      	adds	r5, #104	@ 0x68
 80100c2:	e7e9      	b.n	8010098 <_fwalk_sglue+0x10>

080100c4 <iprintf>:
 80100c4:	b40f      	push	{r0, r1, r2, r3}
 80100c6:	b507      	push	{r0, r1, r2, lr}
 80100c8:	4906      	ldr	r1, [pc, #24]	@ (80100e4 <iprintf+0x20>)
 80100ca:	ab04      	add	r3, sp, #16
 80100cc:	6808      	ldr	r0, [r1, #0]
 80100ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80100d2:	6881      	ldr	r1, [r0, #8]
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	f001 fe63 	bl	8011da0 <_vfiprintf_r>
 80100da:	b003      	add	sp, #12
 80100dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80100e0:	b004      	add	sp, #16
 80100e2:	4770      	bx	lr
 80100e4:	2004030c 	.word	0x2004030c

080100e8 <putchar>:
 80100e8:	4b02      	ldr	r3, [pc, #8]	@ (80100f4 <putchar+0xc>)
 80100ea:	4601      	mov	r1, r0
 80100ec:	6818      	ldr	r0, [r3, #0]
 80100ee:	6882      	ldr	r2, [r0, #8]
 80100f0:	f002 b87c 	b.w	80121ec <_putc_r>
 80100f4:	2004030c 	.word	0x2004030c

080100f8 <_puts_r>:
 80100f8:	6a03      	ldr	r3, [r0, #32]
 80100fa:	b570      	push	{r4, r5, r6, lr}
 80100fc:	6884      	ldr	r4, [r0, #8]
 80100fe:	4605      	mov	r5, r0
 8010100:	460e      	mov	r6, r1
 8010102:	b90b      	cbnz	r3, 8010108 <_puts_r+0x10>
 8010104:	f7ff ffa8 	bl	8010058 <__sinit>
 8010108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801010a:	07db      	lsls	r3, r3, #31
 801010c:	d405      	bmi.n	801011a <_puts_r+0x22>
 801010e:	89a3      	ldrh	r3, [r4, #12]
 8010110:	0598      	lsls	r0, r3, #22
 8010112:	d402      	bmi.n	801011a <_puts_r+0x22>
 8010114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010116:	f000 f9d4 	bl	80104c2 <__retarget_lock_acquire_recursive>
 801011a:	89a3      	ldrh	r3, [r4, #12]
 801011c:	0719      	lsls	r1, r3, #28
 801011e:	d502      	bpl.n	8010126 <_puts_r+0x2e>
 8010120:	6923      	ldr	r3, [r4, #16]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d135      	bne.n	8010192 <_puts_r+0x9a>
 8010126:	4621      	mov	r1, r4
 8010128:	4628      	mov	r0, r5
 801012a:	f000 f8e7 	bl	80102fc <__swsetup_r>
 801012e:	b380      	cbz	r0, 8010192 <_puts_r+0x9a>
 8010130:	f04f 35ff 	mov.w	r5, #4294967295
 8010134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010136:	07da      	lsls	r2, r3, #31
 8010138:	d405      	bmi.n	8010146 <_puts_r+0x4e>
 801013a:	89a3      	ldrh	r3, [r4, #12]
 801013c:	059b      	lsls	r3, r3, #22
 801013e:	d402      	bmi.n	8010146 <_puts_r+0x4e>
 8010140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010142:	f000 f9bf 	bl	80104c4 <__retarget_lock_release_recursive>
 8010146:	4628      	mov	r0, r5
 8010148:	bd70      	pop	{r4, r5, r6, pc}
 801014a:	2b00      	cmp	r3, #0
 801014c:	da04      	bge.n	8010158 <_puts_r+0x60>
 801014e:	69a2      	ldr	r2, [r4, #24]
 8010150:	429a      	cmp	r2, r3
 8010152:	dc17      	bgt.n	8010184 <_puts_r+0x8c>
 8010154:	290a      	cmp	r1, #10
 8010156:	d015      	beq.n	8010184 <_puts_r+0x8c>
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	6022      	str	r2, [r4, #0]
 801015e:	7019      	strb	r1, [r3, #0]
 8010160:	68a3      	ldr	r3, [r4, #8]
 8010162:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010166:	3b01      	subs	r3, #1
 8010168:	60a3      	str	r3, [r4, #8]
 801016a:	2900      	cmp	r1, #0
 801016c:	d1ed      	bne.n	801014a <_puts_r+0x52>
 801016e:	2b00      	cmp	r3, #0
 8010170:	da11      	bge.n	8010196 <_puts_r+0x9e>
 8010172:	4622      	mov	r2, r4
 8010174:	210a      	movs	r1, #10
 8010176:	4628      	mov	r0, r5
 8010178:	f000 f881 	bl	801027e <__swbuf_r>
 801017c:	3001      	adds	r0, #1
 801017e:	d0d7      	beq.n	8010130 <_puts_r+0x38>
 8010180:	250a      	movs	r5, #10
 8010182:	e7d7      	b.n	8010134 <_puts_r+0x3c>
 8010184:	4622      	mov	r2, r4
 8010186:	4628      	mov	r0, r5
 8010188:	f000 f879 	bl	801027e <__swbuf_r>
 801018c:	3001      	adds	r0, #1
 801018e:	d1e7      	bne.n	8010160 <_puts_r+0x68>
 8010190:	e7ce      	b.n	8010130 <_puts_r+0x38>
 8010192:	3e01      	subs	r6, #1
 8010194:	e7e4      	b.n	8010160 <_puts_r+0x68>
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	1c5a      	adds	r2, r3, #1
 801019a:	6022      	str	r2, [r4, #0]
 801019c:	220a      	movs	r2, #10
 801019e:	701a      	strb	r2, [r3, #0]
 80101a0:	e7ee      	b.n	8010180 <_puts_r+0x88>
	...

080101a4 <puts>:
 80101a4:	4b02      	ldr	r3, [pc, #8]	@ (80101b0 <puts+0xc>)
 80101a6:	4601      	mov	r1, r0
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	f7ff bfa5 	b.w	80100f8 <_puts_r>
 80101ae:	bf00      	nop
 80101b0:	2004030c 	.word	0x2004030c

080101b4 <siprintf>:
 80101b4:	b40e      	push	{r1, r2, r3}
 80101b6:	b510      	push	{r4, lr}
 80101b8:	b09d      	sub	sp, #116	@ 0x74
 80101ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80101bc:	9002      	str	r0, [sp, #8]
 80101be:	9006      	str	r0, [sp, #24]
 80101c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80101c4:	480a      	ldr	r0, [pc, #40]	@ (80101f0 <siprintf+0x3c>)
 80101c6:	9107      	str	r1, [sp, #28]
 80101c8:	9104      	str	r1, [sp, #16]
 80101ca:	490a      	ldr	r1, [pc, #40]	@ (80101f4 <siprintf+0x40>)
 80101cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80101d0:	9105      	str	r1, [sp, #20]
 80101d2:	2400      	movs	r4, #0
 80101d4:	a902      	add	r1, sp, #8
 80101d6:	6800      	ldr	r0, [r0, #0]
 80101d8:	9301      	str	r3, [sp, #4]
 80101da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80101dc:	f001 fcba 	bl	8011b54 <_svfiprintf_r>
 80101e0:	9b02      	ldr	r3, [sp, #8]
 80101e2:	701c      	strb	r4, [r3, #0]
 80101e4:	b01d      	add	sp, #116	@ 0x74
 80101e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101ea:	b003      	add	sp, #12
 80101ec:	4770      	bx	lr
 80101ee:	bf00      	nop
 80101f0:	2004030c 	.word	0x2004030c
 80101f4:	ffff0208 	.word	0xffff0208

080101f8 <__sread>:
 80101f8:	b510      	push	{r4, lr}
 80101fa:	460c      	mov	r4, r1
 80101fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010200:	f000 f910 	bl	8010424 <_read_r>
 8010204:	2800      	cmp	r0, #0
 8010206:	bfab      	itete	ge
 8010208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801020a:	89a3      	ldrhlt	r3, [r4, #12]
 801020c:	181b      	addge	r3, r3, r0
 801020e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010212:	bfac      	ite	ge
 8010214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010216:	81a3      	strhlt	r3, [r4, #12]
 8010218:	bd10      	pop	{r4, pc}

0801021a <__swrite>:
 801021a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801021e:	461f      	mov	r7, r3
 8010220:	898b      	ldrh	r3, [r1, #12]
 8010222:	05db      	lsls	r3, r3, #23
 8010224:	4605      	mov	r5, r0
 8010226:	460c      	mov	r4, r1
 8010228:	4616      	mov	r6, r2
 801022a:	d505      	bpl.n	8010238 <__swrite+0x1e>
 801022c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010230:	2302      	movs	r3, #2
 8010232:	2200      	movs	r2, #0
 8010234:	f000 f8e4 	bl	8010400 <_lseek_r>
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801023e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010242:	81a3      	strh	r3, [r4, #12]
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	4628      	mov	r0, r5
 801024a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801024e:	f000 b8fb 	b.w	8010448 <_write_r>

08010252 <__sseek>:
 8010252:	b510      	push	{r4, lr}
 8010254:	460c      	mov	r4, r1
 8010256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801025a:	f000 f8d1 	bl	8010400 <_lseek_r>
 801025e:	1c43      	adds	r3, r0, #1
 8010260:	89a3      	ldrh	r3, [r4, #12]
 8010262:	bf15      	itete	ne
 8010264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801026a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801026e:	81a3      	strheq	r3, [r4, #12]
 8010270:	bf18      	it	ne
 8010272:	81a3      	strhne	r3, [r4, #12]
 8010274:	bd10      	pop	{r4, pc}

08010276 <__sclose>:
 8010276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801027a:	f000 b8b1 	b.w	80103e0 <_close_r>

0801027e <__swbuf_r>:
 801027e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010280:	460e      	mov	r6, r1
 8010282:	4614      	mov	r4, r2
 8010284:	4605      	mov	r5, r0
 8010286:	b118      	cbz	r0, 8010290 <__swbuf_r+0x12>
 8010288:	6a03      	ldr	r3, [r0, #32]
 801028a:	b90b      	cbnz	r3, 8010290 <__swbuf_r+0x12>
 801028c:	f7ff fee4 	bl	8010058 <__sinit>
 8010290:	69a3      	ldr	r3, [r4, #24]
 8010292:	60a3      	str	r3, [r4, #8]
 8010294:	89a3      	ldrh	r3, [r4, #12]
 8010296:	071a      	lsls	r2, r3, #28
 8010298:	d501      	bpl.n	801029e <__swbuf_r+0x20>
 801029a:	6923      	ldr	r3, [r4, #16]
 801029c:	b943      	cbnz	r3, 80102b0 <__swbuf_r+0x32>
 801029e:	4621      	mov	r1, r4
 80102a0:	4628      	mov	r0, r5
 80102a2:	f000 f82b 	bl	80102fc <__swsetup_r>
 80102a6:	b118      	cbz	r0, 80102b0 <__swbuf_r+0x32>
 80102a8:	f04f 37ff 	mov.w	r7, #4294967295
 80102ac:	4638      	mov	r0, r7
 80102ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	6922      	ldr	r2, [r4, #16]
 80102b4:	1a98      	subs	r0, r3, r2
 80102b6:	6963      	ldr	r3, [r4, #20]
 80102b8:	b2f6      	uxtb	r6, r6
 80102ba:	4283      	cmp	r3, r0
 80102bc:	4637      	mov	r7, r6
 80102be:	dc05      	bgt.n	80102cc <__swbuf_r+0x4e>
 80102c0:	4621      	mov	r1, r4
 80102c2:	4628      	mov	r0, r5
 80102c4:	f001 ff08 	bl	80120d8 <_fflush_r>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d1ed      	bne.n	80102a8 <__swbuf_r+0x2a>
 80102cc:	68a3      	ldr	r3, [r4, #8]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	60a3      	str	r3, [r4, #8]
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	1c5a      	adds	r2, r3, #1
 80102d6:	6022      	str	r2, [r4, #0]
 80102d8:	701e      	strb	r6, [r3, #0]
 80102da:	6962      	ldr	r2, [r4, #20]
 80102dc:	1c43      	adds	r3, r0, #1
 80102de:	429a      	cmp	r2, r3
 80102e0:	d004      	beq.n	80102ec <__swbuf_r+0x6e>
 80102e2:	89a3      	ldrh	r3, [r4, #12]
 80102e4:	07db      	lsls	r3, r3, #31
 80102e6:	d5e1      	bpl.n	80102ac <__swbuf_r+0x2e>
 80102e8:	2e0a      	cmp	r6, #10
 80102ea:	d1df      	bne.n	80102ac <__swbuf_r+0x2e>
 80102ec:	4621      	mov	r1, r4
 80102ee:	4628      	mov	r0, r5
 80102f0:	f001 fef2 	bl	80120d8 <_fflush_r>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d0d9      	beq.n	80102ac <__swbuf_r+0x2e>
 80102f8:	e7d6      	b.n	80102a8 <__swbuf_r+0x2a>
	...

080102fc <__swsetup_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4b29      	ldr	r3, [pc, #164]	@ (80103a4 <__swsetup_r+0xa8>)
 8010300:	4605      	mov	r5, r0
 8010302:	6818      	ldr	r0, [r3, #0]
 8010304:	460c      	mov	r4, r1
 8010306:	b118      	cbz	r0, 8010310 <__swsetup_r+0x14>
 8010308:	6a03      	ldr	r3, [r0, #32]
 801030a:	b90b      	cbnz	r3, 8010310 <__swsetup_r+0x14>
 801030c:	f7ff fea4 	bl	8010058 <__sinit>
 8010310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010314:	0719      	lsls	r1, r3, #28
 8010316:	d422      	bmi.n	801035e <__swsetup_r+0x62>
 8010318:	06da      	lsls	r2, r3, #27
 801031a:	d407      	bmi.n	801032c <__swsetup_r+0x30>
 801031c:	2209      	movs	r2, #9
 801031e:	602a      	str	r2, [r5, #0]
 8010320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010324:	81a3      	strh	r3, [r4, #12]
 8010326:	f04f 30ff 	mov.w	r0, #4294967295
 801032a:	e033      	b.n	8010394 <__swsetup_r+0x98>
 801032c:	0758      	lsls	r0, r3, #29
 801032e:	d512      	bpl.n	8010356 <__swsetup_r+0x5a>
 8010330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010332:	b141      	cbz	r1, 8010346 <__swsetup_r+0x4a>
 8010334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010338:	4299      	cmp	r1, r3
 801033a:	d002      	beq.n	8010342 <__swsetup_r+0x46>
 801033c:	4628      	mov	r0, r5
 801033e:	f000 ff33 	bl	80111a8 <_free_r>
 8010342:	2300      	movs	r3, #0
 8010344:	6363      	str	r3, [r4, #52]	@ 0x34
 8010346:	89a3      	ldrh	r3, [r4, #12]
 8010348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801034c:	81a3      	strh	r3, [r4, #12]
 801034e:	2300      	movs	r3, #0
 8010350:	6063      	str	r3, [r4, #4]
 8010352:	6923      	ldr	r3, [r4, #16]
 8010354:	6023      	str	r3, [r4, #0]
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	f043 0308 	orr.w	r3, r3, #8
 801035c:	81a3      	strh	r3, [r4, #12]
 801035e:	6923      	ldr	r3, [r4, #16]
 8010360:	b94b      	cbnz	r3, 8010376 <__swsetup_r+0x7a>
 8010362:	89a3      	ldrh	r3, [r4, #12]
 8010364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801036c:	d003      	beq.n	8010376 <__swsetup_r+0x7a>
 801036e:	4621      	mov	r1, r4
 8010370:	4628      	mov	r0, r5
 8010372:	f001 feff 	bl	8012174 <__smakebuf_r>
 8010376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801037a:	f013 0201 	ands.w	r2, r3, #1
 801037e:	d00a      	beq.n	8010396 <__swsetup_r+0x9a>
 8010380:	2200      	movs	r2, #0
 8010382:	60a2      	str	r2, [r4, #8]
 8010384:	6962      	ldr	r2, [r4, #20]
 8010386:	4252      	negs	r2, r2
 8010388:	61a2      	str	r2, [r4, #24]
 801038a:	6922      	ldr	r2, [r4, #16]
 801038c:	b942      	cbnz	r2, 80103a0 <__swsetup_r+0xa4>
 801038e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010392:	d1c5      	bne.n	8010320 <__swsetup_r+0x24>
 8010394:	bd38      	pop	{r3, r4, r5, pc}
 8010396:	0799      	lsls	r1, r3, #30
 8010398:	bf58      	it	pl
 801039a:	6962      	ldrpl	r2, [r4, #20]
 801039c:	60a2      	str	r2, [r4, #8]
 801039e:	e7f4      	b.n	801038a <__swsetup_r+0x8e>
 80103a0:	2000      	movs	r0, #0
 80103a2:	e7f7      	b.n	8010394 <__swsetup_r+0x98>
 80103a4:	2004030c 	.word	0x2004030c

080103a8 <memset>:
 80103a8:	4402      	add	r2, r0
 80103aa:	4603      	mov	r3, r0
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d100      	bne.n	80103b2 <memset+0xa>
 80103b0:	4770      	bx	lr
 80103b2:	f803 1b01 	strb.w	r1, [r3], #1
 80103b6:	e7f9      	b.n	80103ac <memset+0x4>

080103b8 <strcat>:
 80103b8:	b510      	push	{r4, lr}
 80103ba:	4602      	mov	r2, r0
 80103bc:	7814      	ldrb	r4, [r2, #0]
 80103be:	4613      	mov	r3, r2
 80103c0:	3201      	adds	r2, #1
 80103c2:	2c00      	cmp	r4, #0
 80103c4:	d1fa      	bne.n	80103bc <strcat+0x4>
 80103c6:	3b01      	subs	r3, #1
 80103c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103d0:	2a00      	cmp	r2, #0
 80103d2:	d1f9      	bne.n	80103c8 <strcat+0x10>
 80103d4:	bd10      	pop	{r4, pc}
	...

080103d8 <_localeconv_r>:
 80103d8:	4800      	ldr	r0, [pc, #0]	@ (80103dc <_localeconv_r+0x4>)
 80103da:	4770      	bx	lr
 80103dc:	2004044c 	.word	0x2004044c

080103e0 <_close_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d06      	ldr	r5, [pc, #24]	@ (80103fc <_close_r+0x1c>)
 80103e4:	2300      	movs	r3, #0
 80103e6:	4604      	mov	r4, r0
 80103e8:	4608      	mov	r0, r1
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	f7f5 f918 	bl	8005620 <_close>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_close_r+0x1a>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_close_r+0x1a>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	20040ce0 	.word	0x20040ce0

08010400 <_lseek_r>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	4d07      	ldr	r5, [pc, #28]	@ (8010420 <_lseek_r+0x20>)
 8010404:	4604      	mov	r4, r0
 8010406:	4608      	mov	r0, r1
 8010408:	4611      	mov	r1, r2
 801040a:	2200      	movs	r2, #0
 801040c:	602a      	str	r2, [r5, #0]
 801040e:	461a      	mov	r2, r3
 8010410:	f7f5 f92d 	bl	800566e <_lseek>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d102      	bne.n	801041e <_lseek_r+0x1e>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	b103      	cbz	r3, 801041e <_lseek_r+0x1e>
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	20040ce0 	.word	0x20040ce0

08010424 <_read_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4d07      	ldr	r5, [pc, #28]	@ (8010444 <_read_r+0x20>)
 8010428:	4604      	mov	r4, r0
 801042a:	4608      	mov	r0, r1
 801042c:	4611      	mov	r1, r2
 801042e:	2200      	movs	r2, #0
 8010430:	602a      	str	r2, [r5, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	f7f5 f8bb 	bl	80055ae <_read>
 8010438:	1c43      	adds	r3, r0, #1
 801043a:	d102      	bne.n	8010442 <_read_r+0x1e>
 801043c:	682b      	ldr	r3, [r5, #0]
 801043e:	b103      	cbz	r3, 8010442 <_read_r+0x1e>
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	bd38      	pop	{r3, r4, r5, pc}
 8010444:	20040ce0 	.word	0x20040ce0

08010448 <_write_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	@ (8010468 <_write_r+0x20>)
 801044c:	4604      	mov	r4, r0
 801044e:	4608      	mov	r0, r1
 8010450:	4611      	mov	r1, r2
 8010452:	2200      	movs	r2, #0
 8010454:	602a      	str	r2, [r5, #0]
 8010456:	461a      	mov	r2, r3
 8010458:	f7f5 f8c6 	bl	80055e8 <_write>
 801045c:	1c43      	adds	r3, r0, #1
 801045e:	d102      	bne.n	8010466 <_write_r+0x1e>
 8010460:	682b      	ldr	r3, [r5, #0]
 8010462:	b103      	cbz	r3, 8010466 <_write_r+0x1e>
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	20040ce0 	.word	0x20040ce0

0801046c <__errno>:
 801046c:	4b01      	ldr	r3, [pc, #4]	@ (8010474 <__errno+0x8>)
 801046e:	6818      	ldr	r0, [r3, #0]
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop
 8010474:	2004030c 	.word	0x2004030c

08010478 <__libc_init_array>:
 8010478:	b570      	push	{r4, r5, r6, lr}
 801047a:	4d0d      	ldr	r5, [pc, #52]	@ (80104b0 <__libc_init_array+0x38>)
 801047c:	4c0d      	ldr	r4, [pc, #52]	@ (80104b4 <__libc_init_array+0x3c>)
 801047e:	1b64      	subs	r4, r4, r5
 8010480:	10a4      	asrs	r4, r4, #2
 8010482:	2600      	movs	r6, #0
 8010484:	42a6      	cmp	r6, r4
 8010486:	d109      	bne.n	801049c <__libc_init_array+0x24>
 8010488:	4d0b      	ldr	r5, [pc, #44]	@ (80104b8 <__libc_init_array+0x40>)
 801048a:	4c0c      	ldr	r4, [pc, #48]	@ (80104bc <__libc_init_array+0x44>)
 801048c:	f002 f814 	bl	80124b8 <_init>
 8010490:	1b64      	subs	r4, r4, r5
 8010492:	10a4      	asrs	r4, r4, #2
 8010494:	2600      	movs	r6, #0
 8010496:	42a6      	cmp	r6, r4
 8010498:	d105      	bne.n	80104a6 <__libc_init_array+0x2e>
 801049a:	bd70      	pop	{r4, r5, r6, pc}
 801049c:	f855 3b04 	ldr.w	r3, [r5], #4
 80104a0:	4798      	blx	r3
 80104a2:	3601      	adds	r6, #1
 80104a4:	e7ee      	b.n	8010484 <__libc_init_array+0xc>
 80104a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80104aa:	4798      	blx	r3
 80104ac:	3601      	adds	r6, #1
 80104ae:	e7f2      	b.n	8010496 <__libc_init_array+0x1e>
 80104b0:	0801eea4 	.word	0x0801eea4
 80104b4:	0801eea4 	.word	0x0801eea4
 80104b8:	0801eea4 	.word	0x0801eea4
 80104bc:	0801eea8 	.word	0x0801eea8

080104c0 <__retarget_lock_init_recursive>:
 80104c0:	4770      	bx	lr

080104c2 <__retarget_lock_acquire_recursive>:
 80104c2:	4770      	bx	lr

080104c4 <__retarget_lock_release_recursive>:
 80104c4:	4770      	bx	lr

080104c6 <strcpy>:
 80104c6:	4603      	mov	r3, r0
 80104c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104cc:	f803 2b01 	strb.w	r2, [r3], #1
 80104d0:	2a00      	cmp	r2, #0
 80104d2:	d1f9      	bne.n	80104c8 <strcpy+0x2>
 80104d4:	4770      	bx	lr

080104d6 <memcpy>:
 80104d6:	440a      	add	r2, r1
 80104d8:	4291      	cmp	r1, r2
 80104da:	f100 33ff 	add.w	r3, r0, #4294967295
 80104de:	d100      	bne.n	80104e2 <memcpy+0xc>
 80104e0:	4770      	bx	lr
 80104e2:	b510      	push	{r4, lr}
 80104e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104ec:	4291      	cmp	r1, r2
 80104ee:	d1f9      	bne.n	80104e4 <memcpy+0xe>
 80104f0:	bd10      	pop	{r4, pc}

080104f2 <quorem>:
 80104f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f6:	6903      	ldr	r3, [r0, #16]
 80104f8:	690c      	ldr	r4, [r1, #16]
 80104fa:	42a3      	cmp	r3, r4
 80104fc:	4607      	mov	r7, r0
 80104fe:	db7e      	blt.n	80105fe <quorem+0x10c>
 8010500:	3c01      	subs	r4, #1
 8010502:	f101 0814 	add.w	r8, r1, #20
 8010506:	00a3      	lsls	r3, r4, #2
 8010508:	f100 0514 	add.w	r5, r0, #20
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801051c:	3301      	adds	r3, #1
 801051e:	429a      	cmp	r2, r3
 8010520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010524:	fbb2 f6f3 	udiv	r6, r2, r3
 8010528:	d32e      	bcc.n	8010588 <quorem+0x96>
 801052a:	f04f 0a00 	mov.w	sl, #0
 801052e:	46c4      	mov	ip, r8
 8010530:	46ae      	mov	lr, r5
 8010532:	46d3      	mov	fp, sl
 8010534:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010538:	b298      	uxth	r0, r3
 801053a:	fb06 a000 	mla	r0, r6, r0, sl
 801053e:	0c02      	lsrs	r2, r0, #16
 8010540:	0c1b      	lsrs	r3, r3, #16
 8010542:	fb06 2303 	mla	r3, r6, r3, r2
 8010546:	f8de 2000 	ldr.w	r2, [lr]
 801054a:	b280      	uxth	r0, r0
 801054c:	b292      	uxth	r2, r2
 801054e:	1a12      	subs	r2, r2, r0
 8010550:	445a      	add	r2, fp
 8010552:	f8de 0000 	ldr.w	r0, [lr]
 8010556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801055a:	b29b      	uxth	r3, r3
 801055c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010560:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010564:	b292      	uxth	r2, r2
 8010566:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801056a:	45e1      	cmp	r9, ip
 801056c:	f84e 2b04 	str.w	r2, [lr], #4
 8010570:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010574:	d2de      	bcs.n	8010534 <quorem+0x42>
 8010576:	9b00      	ldr	r3, [sp, #0]
 8010578:	58eb      	ldr	r3, [r5, r3]
 801057a:	b92b      	cbnz	r3, 8010588 <quorem+0x96>
 801057c:	9b01      	ldr	r3, [sp, #4]
 801057e:	3b04      	subs	r3, #4
 8010580:	429d      	cmp	r5, r3
 8010582:	461a      	mov	r2, r3
 8010584:	d32f      	bcc.n	80105e6 <quorem+0xf4>
 8010586:	613c      	str	r4, [r7, #16]
 8010588:	4638      	mov	r0, r7
 801058a:	f001 f97f 	bl	801188c <__mcmp>
 801058e:	2800      	cmp	r0, #0
 8010590:	db25      	blt.n	80105de <quorem+0xec>
 8010592:	4629      	mov	r1, r5
 8010594:	2000      	movs	r0, #0
 8010596:	f858 2b04 	ldr.w	r2, [r8], #4
 801059a:	f8d1 c000 	ldr.w	ip, [r1]
 801059e:	fa1f fe82 	uxth.w	lr, r2
 80105a2:	fa1f f38c 	uxth.w	r3, ip
 80105a6:	eba3 030e 	sub.w	r3, r3, lr
 80105aa:	4403      	add	r3, r0
 80105ac:	0c12      	lsrs	r2, r2, #16
 80105ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80105b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105bc:	45c1      	cmp	r9, r8
 80105be:	f841 3b04 	str.w	r3, [r1], #4
 80105c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80105c6:	d2e6      	bcs.n	8010596 <quorem+0xa4>
 80105c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105d0:	b922      	cbnz	r2, 80105dc <quorem+0xea>
 80105d2:	3b04      	subs	r3, #4
 80105d4:	429d      	cmp	r5, r3
 80105d6:	461a      	mov	r2, r3
 80105d8:	d30b      	bcc.n	80105f2 <quorem+0x100>
 80105da:	613c      	str	r4, [r7, #16]
 80105dc:	3601      	adds	r6, #1
 80105de:	4630      	mov	r0, r6
 80105e0:	b003      	add	sp, #12
 80105e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e6:	6812      	ldr	r2, [r2, #0]
 80105e8:	3b04      	subs	r3, #4
 80105ea:	2a00      	cmp	r2, #0
 80105ec:	d1cb      	bne.n	8010586 <quorem+0x94>
 80105ee:	3c01      	subs	r4, #1
 80105f0:	e7c6      	b.n	8010580 <quorem+0x8e>
 80105f2:	6812      	ldr	r2, [r2, #0]
 80105f4:	3b04      	subs	r3, #4
 80105f6:	2a00      	cmp	r2, #0
 80105f8:	d1ef      	bne.n	80105da <quorem+0xe8>
 80105fa:	3c01      	subs	r4, #1
 80105fc:	e7ea      	b.n	80105d4 <quorem+0xe2>
 80105fe:	2000      	movs	r0, #0
 8010600:	e7ee      	b.n	80105e0 <quorem+0xee>
 8010602:	0000      	movs	r0, r0
 8010604:	0000      	movs	r0, r0
	...

08010608 <_dtoa_r>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	69c7      	ldr	r7, [r0, #28]
 801060e:	b097      	sub	sp, #92	@ 0x5c
 8010610:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010614:	ec55 4b10 	vmov	r4, r5, d0
 8010618:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801061a:	9107      	str	r1, [sp, #28]
 801061c:	4681      	mov	r9, r0
 801061e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010620:	9311      	str	r3, [sp, #68]	@ 0x44
 8010622:	b97f      	cbnz	r7, 8010644 <_dtoa_r+0x3c>
 8010624:	2010      	movs	r0, #16
 8010626:	f000 fe09 	bl	801123c <malloc>
 801062a:	4602      	mov	r2, r0
 801062c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010630:	b920      	cbnz	r0, 801063c <_dtoa_r+0x34>
 8010632:	4ba9      	ldr	r3, [pc, #676]	@ (80108d8 <_dtoa_r+0x2d0>)
 8010634:	21ef      	movs	r1, #239	@ 0xef
 8010636:	48a9      	ldr	r0, [pc, #676]	@ (80108dc <_dtoa_r+0x2d4>)
 8010638:	f001 fe58 	bl	80122ec <__assert_func>
 801063c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010640:	6007      	str	r7, [r0, #0]
 8010642:	60c7      	str	r7, [r0, #12]
 8010644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010648:	6819      	ldr	r1, [r3, #0]
 801064a:	b159      	cbz	r1, 8010664 <_dtoa_r+0x5c>
 801064c:	685a      	ldr	r2, [r3, #4]
 801064e:	604a      	str	r2, [r1, #4]
 8010650:	2301      	movs	r3, #1
 8010652:	4093      	lsls	r3, r2
 8010654:	608b      	str	r3, [r1, #8]
 8010656:	4648      	mov	r0, r9
 8010658:	f000 fee6 	bl	8011428 <_Bfree>
 801065c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010660:	2200      	movs	r2, #0
 8010662:	601a      	str	r2, [r3, #0]
 8010664:	1e2b      	subs	r3, r5, #0
 8010666:	bfb9      	ittee	lt
 8010668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801066c:	9305      	strlt	r3, [sp, #20]
 801066e:	2300      	movge	r3, #0
 8010670:	6033      	strge	r3, [r6, #0]
 8010672:	9f05      	ldr	r7, [sp, #20]
 8010674:	4b9a      	ldr	r3, [pc, #616]	@ (80108e0 <_dtoa_r+0x2d8>)
 8010676:	bfbc      	itt	lt
 8010678:	2201      	movlt	r2, #1
 801067a:	6032      	strlt	r2, [r6, #0]
 801067c:	43bb      	bics	r3, r7
 801067e:	d112      	bne.n	80106a6 <_dtoa_r+0x9e>
 8010680:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010682:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010686:	6013      	str	r3, [r2, #0]
 8010688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801068c:	4323      	orrs	r3, r4
 801068e:	f000 855a 	beq.w	8011146 <_dtoa_r+0xb3e>
 8010692:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010694:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80108f4 <_dtoa_r+0x2ec>
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 855c 	beq.w	8011156 <_dtoa_r+0xb4e>
 801069e:	f10a 0303 	add.w	r3, sl, #3
 80106a2:	f000 bd56 	b.w	8011152 <_dtoa_r+0xb4a>
 80106a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80106aa:	2200      	movs	r2, #0
 80106ac:	ec51 0b17 	vmov	r0, r1, d7
 80106b0:	2300      	movs	r3, #0
 80106b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80106b6:	f7f0 fa1f 	bl	8000af8 <__aeabi_dcmpeq>
 80106ba:	4680      	mov	r8, r0
 80106bc:	b158      	cbz	r0, 80106d6 <_dtoa_r+0xce>
 80106be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106c0:	2301      	movs	r3, #1
 80106c2:	6013      	str	r3, [r2, #0]
 80106c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80106c6:	b113      	cbz	r3, 80106ce <_dtoa_r+0xc6>
 80106c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80106ca:	4b86      	ldr	r3, [pc, #536]	@ (80108e4 <_dtoa_r+0x2dc>)
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80108f8 <_dtoa_r+0x2f0>
 80106d2:	f000 bd40 	b.w	8011156 <_dtoa_r+0xb4e>
 80106d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80106da:	aa14      	add	r2, sp, #80	@ 0x50
 80106dc:	a915      	add	r1, sp, #84	@ 0x54
 80106de:	4648      	mov	r0, r9
 80106e0:	f001 f984 	bl	80119ec <__d2b>
 80106e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80106e8:	9002      	str	r0, [sp, #8]
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	d078      	beq.n	80107e0 <_dtoa_r+0x1d8>
 80106ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80106f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010708:	4619      	mov	r1, r3
 801070a:	2200      	movs	r2, #0
 801070c:	4b76      	ldr	r3, [pc, #472]	@ (80108e8 <_dtoa_r+0x2e0>)
 801070e:	f7ef fdd3 	bl	80002b8 <__aeabi_dsub>
 8010712:	a36b      	add	r3, pc, #428	@ (adr r3, 80108c0 <_dtoa_r+0x2b8>)
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	f7ef ff86 	bl	8000628 <__aeabi_dmul>
 801071c:	a36a      	add	r3, pc, #424	@ (adr r3, 80108c8 <_dtoa_r+0x2c0>)
 801071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010722:	f7ef fdcb 	bl	80002bc <__adddf3>
 8010726:	4604      	mov	r4, r0
 8010728:	4630      	mov	r0, r6
 801072a:	460d      	mov	r5, r1
 801072c:	f7ef ff12 	bl	8000554 <__aeabi_i2d>
 8010730:	a367      	add	r3, pc, #412	@ (adr r3, 80108d0 <_dtoa_r+0x2c8>)
 8010732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010736:	f7ef ff77 	bl	8000628 <__aeabi_dmul>
 801073a:	4602      	mov	r2, r0
 801073c:	460b      	mov	r3, r1
 801073e:	4620      	mov	r0, r4
 8010740:	4629      	mov	r1, r5
 8010742:	f7ef fdbb 	bl	80002bc <__adddf3>
 8010746:	4604      	mov	r4, r0
 8010748:	460d      	mov	r5, r1
 801074a:	f7f0 fa1d 	bl	8000b88 <__aeabi_d2iz>
 801074e:	2200      	movs	r2, #0
 8010750:	4607      	mov	r7, r0
 8010752:	2300      	movs	r3, #0
 8010754:	4620      	mov	r0, r4
 8010756:	4629      	mov	r1, r5
 8010758:	f7f0 f9d8 	bl	8000b0c <__aeabi_dcmplt>
 801075c:	b140      	cbz	r0, 8010770 <_dtoa_r+0x168>
 801075e:	4638      	mov	r0, r7
 8010760:	f7ef fef8 	bl	8000554 <__aeabi_i2d>
 8010764:	4622      	mov	r2, r4
 8010766:	462b      	mov	r3, r5
 8010768:	f7f0 f9c6 	bl	8000af8 <__aeabi_dcmpeq>
 801076c:	b900      	cbnz	r0, 8010770 <_dtoa_r+0x168>
 801076e:	3f01      	subs	r7, #1
 8010770:	2f16      	cmp	r7, #22
 8010772:	d852      	bhi.n	801081a <_dtoa_r+0x212>
 8010774:	4b5d      	ldr	r3, [pc, #372]	@ (80108ec <_dtoa_r+0x2e4>)
 8010776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010782:	f7f0 f9c3 	bl	8000b0c <__aeabi_dcmplt>
 8010786:	2800      	cmp	r0, #0
 8010788:	d049      	beq.n	801081e <_dtoa_r+0x216>
 801078a:	3f01      	subs	r7, #1
 801078c:	2300      	movs	r3, #0
 801078e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010790:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010792:	1b9b      	subs	r3, r3, r6
 8010794:	1e5a      	subs	r2, r3, #1
 8010796:	bf45      	ittet	mi
 8010798:	f1c3 0301 	rsbmi	r3, r3, #1
 801079c:	9300      	strmi	r3, [sp, #0]
 801079e:	2300      	movpl	r3, #0
 80107a0:	2300      	movmi	r3, #0
 80107a2:	9206      	str	r2, [sp, #24]
 80107a4:	bf54      	ite	pl
 80107a6:	9300      	strpl	r3, [sp, #0]
 80107a8:	9306      	strmi	r3, [sp, #24]
 80107aa:	2f00      	cmp	r7, #0
 80107ac:	db39      	blt.n	8010822 <_dtoa_r+0x21a>
 80107ae:	9b06      	ldr	r3, [sp, #24]
 80107b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80107b2:	443b      	add	r3, r7
 80107b4:	9306      	str	r3, [sp, #24]
 80107b6:	2300      	movs	r3, #0
 80107b8:	9308      	str	r3, [sp, #32]
 80107ba:	9b07      	ldr	r3, [sp, #28]
 80107bc:	2b09      	cmp	r3, #9
 80107be:	d863      	bhi.n	8010888 <_dtoa_r+0x280>
 80107c0:	2b05      	cmp	r3, #5
 80107c2:	bfc4      	itt	gt
 80107c4:	3b04      	subgt	r3, #4
 80107c6:	9307      	strgt	r3, [sp, #28]
 80107c8:	9b07      	ldr	r3, [sp, #28]
 80107ca:	f1a3 0302 	sub.w	r3, r3, #2
 80107ce:	bfcc      	ite	gt
 80107d0:	2400      	movgt	r4, #0
 80107d2:	2401      	movle	r4, #1
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	d863      	bhi.n	80108a0 <_dtoa_r+0x298>
 80107d8:	e8df f003 	tbb	[pc, r3]
 80107dc:	2b375452 	.word	0x2b375452
 80107e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80107e4:	441e      	add	r6, r3
 80107e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80107ea:	2b20      	cmp	r3, #32
 80107ec:	bfc1      	itttt	gt
 80107ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80107f2:	409f      	lslgt	r7, r3
 80107f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80107f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80107fc:	bfd6      	itet	le
 80107fe:	f1c3 0320 	rsble	r3, r3, #32
 8010802:	ea47 0003 	orrgt.w	r0, r7, r3
 8010806:	fa04 f003 	lslle.w	r0, r4, r3
 801080a:	f7ef fe93 	bl	8000534 <__aeabi_ui2d>
 801080e:	2201      	movs	r2, #1
 8010810:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010814:	3e01      	subs	r6, #1
 8010816:	9212      	str	r2, [sp, #72]	@ 0x48
 8010818:	e776      	b.n	8010708 <_dtoa_r+0x100>
 801081a:	2301      	movs	r3, #1
 801081c:	e7b7      	b.n	801078e <_dtoa_r+0x186>
 801081e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010820:	e7b6      	b.n	8010790 <_dtoa_r+0x188>
 8010822:	9b00      	ldr	r3, [sp, #0]
 8010824:	1bdb      	subs	r3, r3, r7
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	427b      	negs	r3, r7
 801082a:	9308      	str	r3, [sp, #32]
 801082c:	2300      	movs	r3, #0
 801082e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010830:	e7c3      	b.n	80107ba <_dtoa_r+0x1b2>
 8010832:	2301      	movs	r3, #1
 8010834:	9309      	str	r3, [sp, #36]	@ 0x24
 8010836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010838:	eb07 0b03 	add.w	fp, r7, r3
 801083c:	f10b 0301 	add.w	r3, fp, #1
 8010840:	2b01      	cmp	r3, #1
 8010842:	9303      	str	r3, [sp, #12]
 8010844:	bfb8      	it	lt
 8010846:	2301      	movlt	r3, #1
 8010848:	e006      	b.n	8010858 <_dtoa_r+0x250>
 801084a:	2301      	movs	r3, #1
 801084c:	9309      	str	r3, [sp, #36]	@ 0x24
 801084e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010850:	2b00      	cmp	r3, #0
 8010852:	dd28      	ble.n	80108a6 <_dtoa_r+0x29e>
 8010854:	469b      	mov	fp, r3
 8010856:	9303      	str	r3, [sp, #12]
 8010858:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801085c:	2100      	movs	r1, #0
 801085e:	2204      	movs	r2, #4
 8010860:	f102 0514 	add.w	r5, r2, #20
 8010864:	429d      	cmp	r5, r3
 8010866:	d926      	bls.n	80108b6 <_dtoa_r+0x2ae>
 8010868:	6041      	str	r1, [r0, #4]
 801086a:	4648      	mov	r0, r9
 801086c:	f000 fd9c 	bl	80113a8 <_Balloc>
 8010870:	4682      	mov	sl, r0
 8010872:	2800      	cmp	r0, #0
 8010874:	d142      	bne.n	80108fc <_dtoa_r+0x2f4>
 8010876:	4b1e      	ldr	r3, [pc, #120]	@ (80108f0 <_dtoa_r+0x2e8>)
 8010878:	4602      	mov	r2, r0
 801087a:	f240 11af 	movw	r1, #431	@ 0x1af
 801087e:	e6da      	b.n	8010636 <_dtoa_r+0x2e>
 8010880:	2300      	movs	r3, #0
 8010882:	e7e3      	b.n	801084c <_dtoa_r+0x244>
 8010884:	2300      	movs	r3, #0
 8010886:	e7d5      	b.n	8010834 <_dtoa_r+0x22c>
 8010888:	2401      	movs	r4, #1
 801088a:	2300      	movs	r3, #0
 801088c:	9307      	str	r3, [sp, #28]
 801088e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010890:	f04f 3bff 	mov.w	fp, #4294967295
 8010894:	2200      	movs	r2, #0
 8010896:	f8cd b00c 	str.w	fp, [sp, #12]
 801089a:	2312      	movs	r3, #18
 801089c:	920c      	str	r2, [sp, #48]	@ 0x30
 801089e:	e7db      	b.n	8010858 <_dtoa_r+0x250>
 80108a0:	2301      	movs	r3, #1
 80108a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80108a4:	e7f4      	b.n	8010890 <_dtoa_r+0x288>
 80108a6:	f04f 0b01 	mov.w	fp, #1
 80108aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80108ae:	465b      	mov	r3, fp
 80108b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80108b4:	e7d0      	b.n	8010858 <_dtoa_r+0x250>
 80108b6:	3101      	adds	r1, #1
 80108b8:	0052      	lsls	r2, r2, #1
 80108ba:	e7d1      	b.n	8010860 <_dtoa_r+0x258>
 80108bc:	f3af 8000 	nop.w
 80108c0:	636f4361 	.word	0x636f4361
 80108c4:	3fd287a7 	.word	0x3fd287a7
 80108c8:	8b60c8b3 	.word	0x8b60c8b3
 80108cc:	3fc68a28 	.word	0x3fc68a28
 80108d0:	509f79fb 	.word	0x509f79fb
 80108d4:	3fd34413 	.word	0x3fd34413
 80108d8:	0801eb65 	.word	0x0801eb65
 80108dc:	0801eb7c 	.word	0x0801eb7c
 80108e0:	7ff00000 	.word	0x7ff00000
 80108e4:	0801eb35 	.word	0x0801eb35
 80108e8:	3ff80000 	.word	0x3ff80000
 80108ec:	0801ecd0 	.word	0x0801ecd0
 80108f0:	0801ebd4 	.word	0x0801ebd4
 80108f4:	0801eb61 	.word	0x0801eb61
 80108f8:	0801eb34 	.word	0x0801eb34
 80108fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010900:	6018      	str	r0, [r3, #0]
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	2b0e      	cmp	r3, #14
 8010906:	f200 80a1 	bhi.w	8010a4c <_dtoa_r+0x444>
 801090a:	2c00      	cmp	r4, #0
 801090c:	f000 809e 	beq.w	8010a4c <_dtoa_r+0x444>
 8010910:	2f00      	cmp	r7, #0
 8010912:	dd33      	ble.n	801097c <_dtoa_r+0x374>
 8010914:	4b9c      	ldr	r3, [pc, #624]	@ (8010b88 <_dtoa_r+0x580>)
 8010916:	f007 020f 	and.w	r2, r7, #15
 801091a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801091e:	ed93 7b00 	vldr	d7, [r3]
 8010922:	05f8      	lsls	r0, r7, #23
 8010924:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010928:	ea4f 1427 	mov.w	r4, r7, asr #4
 801092c:	d516      	bpl.n	801095c <_dtoa_r+0x354>
 801092e:	4b97      	ldr	r3, [pc, #604]	@ (8010b8c <_dtoa_r+0x584>)
 8010930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010938:	f7ef ffa0 	bl	800087c <__aeabi_ddiv>
 801093c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010940:	f004 040f 	and.w	r4, r4, #15
 8010944:	2603      	movs	r6, #3
 8010946:	4d91      	ldr	r5, [pc, #580]	@ (8010b8c <_dtoa_r+0x584>)
 8010948:	b954      	cbnz	r4, 8010960 <_dtoa_r+0x358>
 801094a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801094e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010952:	f7ef ff93 	bl	800087c <__aeabi_ddiv>
 8010956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801095a:	e028      	b.n	80109ae <_dtoa_r+0x3a6>
 801095c:	2602      	movs	r6, #2
 801095e:	e7f2      	b.n	8010946 <_dtoa_r+0x33e>
 8010960:	07e1      	lsls	r1, r4, #31
 8010962:	d508      	bpl.n	8010976 <_dtoa_r+0x36e>
 8010964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010968:	e9d5 2300 	ldrd	r2, r3, [r5]
 801096c:	f7ef fe5c 	bl	8000628 <__aeabi_dmul>
 8010970:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010974:	3601      	adds	r6, #1
 8010976:	1064      	asrs	r4, r4, #1
 8010978:	3508      	adds	r5, #8
 801097a:	e7e5      	b.n	8010948 <_dtoa_r+0x340>
 801097c:	f000 80af 	beq.w	8010ade <_dtoa_r+0x4d6>
 8010980:	427c      	negs	r4, r7
 8010982:	4b81      	ldr	r3, [pc, #516]	@ (8010b88 <_dtoa_r+0x580>)
 8010984:	4d81      	ldr	r5, [pc, #516]	@ (8010b8c <_dtoa_r+0x584>)
 8010986:	f004 020f 	and.w	r2, r4, #15
 801098a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010996:	f7ef fe47 	bl	8000628 <__aeabi_dmul>
 801099a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801099e:	1124      	asrs	r4, r4, #4
 80109a0:	2300      	movs	r3, #0
 80109a2:	2602      	movs	r6, #2
 80109a4:	2c00      	cmp	r4, #0
 80109a6:	f040 808f 	bne.w	8010ac8 <_dtoa_r+0x4c0>
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d1d3      	bne.n	8010956 <_dtoa_r+0x34e>
 80109ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 8094 	beq.w	8010ae2 <_dtoa_r+0x4da>
 80109ba:	4b75      	ldr	r3, [pc, #468]	@ (8010b90 <_dtoa_r+0x588>)
 80109bc:	2200      	movs	r2, #0
 80109be:	4620      	mov	r0, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	f7f0 f8a3 	bl	8000b0c <__aeabi_dcmplt>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	f000 808b 	beq.w	8010ae2 <_dtoa_r+0x4da>
 80109cc:	9b03      	ldr	r3, [sp, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f000 8087 	beq.w	8010ae2 <_dtoa_r+0x4da>
 80109d4:	f1bb 0f00 	cmp.w	fp, #0
 80109d8:	dd34      	ble.n	8010a44 <_dtoa_r+0x43c>
 80109da:	4620      	mov	r0, r4
 80109dc:	4b6d      	ldr	r3, [pc, #436]	@ (8010b94 <_dtoa_r+0x58c>)
 80109de:	2200      	movs	r2, #0
 80109e0:	4629      	mov	r1, r5
 80109e2:	f7ef fe21 	bl	8000628 <__aeabi_dmul>
 80109e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80109ee:	3601      	adds	r6, #1
 80109f0:	465c      	mov	r4, fp
 80109f2:	4630      	mov	r0, r6
 80109f4:	f7ef fdae 	bl	8000554 <__aeabi_i2d>
 80109f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109fc:	f7ef fe14 	bl	8000628 <__aeabi_dmul>
 8010a00:	4b65      	ldr	r3, [pc, #404]	@ (8010b98 <_dtoa_r+0x590>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	f7ef fc5a 	bl	80002bc <__adddf3>
 8010a08:	4605      	mov	r5, r0
 8010a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010a0e:	2c00      	cmp	r4, #0
 8010a10:	d16a      	bne.n	8010ae8 <_dtoa_r+0x4e0>
 8010a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a16:	4b61      	ldr	r3, [pc, #388]	@ (8010b9c <_dtoa_r+0x594>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f7ef fc4d 	bl	80002b8 <__aeabi_dsub>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	460b      	mov	r3, r1
 8010a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a26:	462a      	mov	r2, r5
 8010a28:	4633      	mov	r3, r6
 8010a2a:	f7f0 f88d 	bl	8000b48 <__aeabi_dcmpgt>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f040 8298 	bne.w	8010f64 <_dtoa_r+0x95c>
 8010a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a38:	462a      	mov	r2, r5
 8010a3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010a3e:	f7f0 f865 	bl	8000b0c <__aeabi_dcmplt>
 8010a42:	bb38      	cbnz	r0, 8010a94 <_dtoa_r+0x48c>
 8010a44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010a48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010a4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f2c0 8157 	blt.w	8010d02 <_dtoa_r+0x6fa>
 8010a54:	2f0e      	cmp	r7, #14
 8010a56:	f300 8154 	bgt.w	8010d02 <_dtoa_r+0x6fa>
 8010a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8010b88 <_dtoa_r+0x580>)
 8010a5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a60:	ed93 7b00 	vldr	d7, [r3]
 8010a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	ed8d 7b00 	vstr	d7, [sp]
 8010a6c:	f280 80e5 	bge.w	8010c3a <_dtoa_r+0x632>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f300 80e1 	bgt.w	8010c3a <_dtoa_r+0x632>
 8010a78:	d10c      	bne.n	8010a94 <_dtoa_r+0x48c>
 8010a7a:	4b48      	ldr	r3, [pc, #288]	@ (8010b9c <_dtoa_r+0x594>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	ec51 0b17 	vmov	r0, r1, d7
 8010a82:	f7ef fdd1 	bl	8000628 <__aeabi_dmul>
 8010a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a8a:	f7f0 f853 	bl	8000b34 <__aeabi_dcmpge>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	f000 8266 	beq.w	8010f60 <_dtoa_r+0x958>
 8010a94:	2400      	movs	r4, #0
 8010a96:	4625      	mov	r5, r4
 8010a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a9a:	4656      	mov	r6, sl
 8010a9c:	ea6f 0803 	mvn.w	r8, r3
 8010aa0:	2700      	movs	r7, #0
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	4648      	mov	r0, r9
 8010aa6:	f000 fcbf 	bl	8011428 <_Bfree>
 8010aaa:	2d00      	cmp	r5, #0
 8010aac:	f000 80bd 	beq.w	8010c2a <_dtoa_r+0x622>
 8010ab0:	b12f      	cbz	r7, 8010abe <_dtoa_r+0x4b6>
 8010ab2:	42af      	cmp	r7, r5
 8010ab4:	d003      	beq.n	8010abe <_dtoa_r+0x4b6>
 8010ab6:	4639      	mov	r1, r7
 8010ab8:	4648      	mov	r0, r9
 8010aba:	f000 fcb5 	bl	8011428 <_Bfree>
 8010abe:	4629      	mov	r1, r5
 8010ac0:	4648      	mov	r0, r9
 8010ac2:	f000 fcb1 	bl	8011428 <_Bfree>
 8010ac6:	e0b0      	b.n	8010c2a <_dtoa_r+0x622>
 8010ac8:	07e2      	lsls	r2, r4, #31
 8010aca:	d505      	bpl.n	8010ad8 <_dtoa_r+0x4d0>
 8010acc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ad0:	f7ef fdaa 	bl	8000628 <__aeabi_dmul>
 8010ad4:	3601      	adds	r6, #1
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	1064      	asrs	r4, r4, #1
 8010ada:	3508      	adds	r5, #8
 8010adc:	e762      	b.n	80109a4 <_dtoa_r+0x39c>
 8010ade:	2602      	movs	r6, #2
 8010ae0:	e765      	b.n	80109ae <_dtoa_r+0x3a6>
 8010ae2:	9c03      	ldr	r4, [sp, #12]
 8010ae4:	46b8      	mov	r8, r7
 8010ae6:	e784      	b.n	80109f2 <_dtoa_r+0x3ea>
 8010ae8:	4b27      	ldr	r3, [pc, #156]	@ (8010b88 <_dtoa_r+0x580>)
 8010aea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010aec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010af0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010af4:	4454      	add	r4, sl
 8010af6:	2900      	cmp	r1, #0
 8010af8:	d054      	beq.n	8010ba4 <_dtoa_r+0x59c>
 8010afa:	4929      	ldr	r1, [pc, #164]	@ (8010ba0 <_dtoa_r+0x598>)
 8010afc:	2000      	movs	r0, #0
 8010afe:	f7ef febd 	bl	800087c <__aeabi_ddiv>
 8010b02:	4633      	mov	r3, r6
 8010b04:	462a      	mov	r2, r5
 8010b06:	f7ef fbd7 	bl	80002b8 <__aeabi_dsub>
 8010b0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b0e:	4656      	mov	r6, sl
 8010b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b14:	f7f0 f838 	bl	8000b88 <__aeabi_d2iz>
 8010b18:	4605      	mov	r5, r0
 8010b1a:	f7ef fd1b 	bl	8000554 <__aeabi_i2d>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b26:	f7ef fbc7 	bl	80002b8 <__aeabi_dsub>
 8010b2a:	3530      	adds	r5, #48	@ 0x30
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b34:	f806 5b01 	strb.w	r5, [r6], #1
 8010b38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b3c:	f7ef ffe6 	bl	8000b0c <__aeabi_dcmplt>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d172      	bne.n	8010c2a <_dtoa_r+0x622>
 8010b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b48:	4911      	ldr	r1, [pc, #68]	@ (8010b90 <_dtoa_r+0x588>)
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	f7ef fbb4 	bl	80002b8 <__aeabi_dsub>
 8010b50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b54:	f7ef ffda 	bl	8000b0c <__aeabi_dcmplt>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	f040 80b4 	bne.w	8010cc6 <_dtoa_r+0x6be>
 8010b5e:	42a6      	cmp	r6, r4
 8010b60:	f43f af70 	beq.w	8010a44 <_dtoa_r+0x43c>
 8010b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b68:	4b0a      	ldr	r3, [pc, #40]	@ (8010b94 <_dtoa_r+0x58c>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f7ef fd5c 	bl	8000628 <__aeabi_dmul>
 8010b70:	4b08      	ldr	r3, [pc, #32]	@ (8010b94 <_dtoa_r+0x58c>)
 8010b72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010b76:	2200      	movs	r2, #0
 8010b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b7c:	f7ef fd54 	bl	8000628 <__aeabi_dmul>
 8010b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b84:	e7c4      	b.n	8010b10 <_dtoa_r+0x508>
 8010b86:	bf00      	nop
 8010b88:	0801ecd0 	.word	0x0801ecd0
 8010b8c:	0801eca8 	.word	0x0801eca8
 8010b90:	3ff00000 	.word	0x3ff00000
 8010b94:	40240000 	.word	0x40240000
 8010b98:	401c0000 	.word	0x401c0000
 8010b9c:	40140000 	.word	0x40140000
 8010ba0:	3fe00000 	.word	0x3fe00000
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f7ef fd3e 	bl	8000628 <__aeabi_dmul>
 8010bac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010bb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010bb2:	4656      	mov	r6, sl
 8010bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bb8:	f7ef ffe6 	bl	8000b88 <__aeabi_d2iz>
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	f7ef fcc9 	bl	8000554 <__aeabi_i2d>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bca:	f7ef fb75 	bl	80002b8 <__aeabi_dsub>
 8010bce:	3530      	adds	r5, #48	@ 0x30
 8010bd0:	f806 5b01 	strb.w	r5, [r6], #1
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	42a6      	cmp	r6, r4
 8010bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010bde:	f04f 0200 	mov.w	r2, #0
 8010be2:	d124      	bne.n	8010c2e <_dtoa_r+0x626>
 8010be4:	4baf      	ldr	r3, [pc, #700]	@ (8010ea4 <_dtoa_r+0x89c>)
 8010be6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010bea:	f7ef fb67 	bl	80002bc <__adddf3>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bf6:	f7ef ffa7 	bl	8000b48 <__aeabi_dcmpgt>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d163      	bne.n	8010cc6 <_dtoa_r+0x6be>
 8010bfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c02:	49a8      	ldr	r1, [pc, #672]	@ (8010ea4 <_dtoa_r+0x89c>)
 8010c04:	2000      	movs	r0, #0
 8010c06:	f7ef fb57 	bl	80002b8 <__aeabi_dsub>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c12:	f7ef ff7b 	bl	8000b0c <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f43f af14 	beq.w	8010a44 <_dtoa_r+0x43c>
 8010c1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010c1e:	1e73      	subs	r3, r6, #1
 8010c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c26:	2b30      	cmp	r3, #48	@ 0x30
 8010c28:	d0f8      	beq.n	8010c1c <_dtoa_r+0x614>
 8010c2a:	4647      	mov	r7, r8
 8010c2c:	e03b      	b.n	8010ca6 <_dtoa_r+0x69e>
 8010c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8010ea8 <_dtoa_r+0x8a0>)
 8010c30:	f7ef fcfa 	bl	8000628 <__aeabi_dmul>
 8010c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c38:	e7bc      	b.n	8010bb4 <_dtoa_r+0x5ac>
 8010c3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010c3e:	4656      	mov	r6, sl
 8010c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c44:	4620      	mov	r0, r4
 8010c46:	4629      	mov	r1, r5
 8010c48:	f7ef fe18 	bl	800087c <__aeabi_ddiv>
 8010c4c:	f7ef ff9c 	bl	8000b88 <__aeabi_d2iz>
 8010c50:	4680      	mov	r8, r0
 8010c52:	f7ef fc7f 	bl	8000554 <__aeabi_i2d>
 8010c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c5a:	f7ef fce5 	bl	8000628 <__aeabi_dmul>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4620      	mov	r0, r4
 8010c64:	4629      	mov	r1, r5
 8010c66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c6a:	f7ef fb25 	bl	80002b8 <__aeabi_dsub>
 8010c6e:	f806 4b01 	strb.w	r4, [r6], #1
 8010c72:	9d03      	ldr	r5, [sp, #12]
 8010c74:	eba6 040a 	sub.w	r4, r6, sl
 8010c78:	42a5      	cmp	r5, r4
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	d133      	bne.n	8010ce8 <_dtoa_r+0x6e0>
 8010c80:	f7ef fb1c 	bl	80002bc <__adddf3>
 8010c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c88:	4604      	mov	r4, r0
 8010c8a:	460d      	mov	r5, r1
 8010c8c:	f7ef ff5c 	bl	8000b48 <__aeabi_dcmpgt>
 8010c90:	b9c0      	cbnz	r0, 8010cc4 <_dtoa_r+0x6bc>
 8010c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	f7ef ff2d 	bl	8000af8 <__aeabi_dcmpeq>
 8010c9e:	b110      	cbz	r0, 8010ca6 <_dtoa_r+0x69e>
 8010ca0:	f018 0f01 	tst.w	r8, #1
 8010ca4:	d10e      	bne.n	8010cc4 <_dtoa_r+0x6bc>
 8010ca6:	9902      	ldr	r1, [sp, #8]
 8010ca8:	4648      	mov	r0, r9
 8010caa:	f000 fbbd 	bl	8011428 <_Bfree>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	7033      	strb	r3, [r6, #0]
 8010cb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cb4:	3701      	adds	r7, #1
 8010cb6:	601f      	str	r7, [r3, #0]
 8010cb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 824b 	beq.w	8011156 <_dtoa_r+0xb4e>
 8010cc0:	601e      	str	r6, [r3, #0]
 8010cc2:	e248      	b.n	8011156 <_dtoa_r+0xb4e>
 8010cc4:	46b8      	mov	r8, r7
 8010cc6:	4633      	mov	r3, r6
 8010cc8:	461e      	mov	r6, r3
 8010cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cce:	2a39      	cmp	r2, #57	@ 0x39
 8010cd0:	d106      	bne.n	8010ce0 <_dtoa_r+0x6d8>
 8010cd2:	459a      	cmp	sl, r3
 8010cd4:	d1f8      	bne.n	8010cc8 <_dtoa_r+0x6c0>
 8010cd6:	2230      	movs	r2, #48	@ 0x30
 8010cd8:	f108 0801 	add.w	r8, r8, #1
 8010cdc:	f88a 2000 	strb.w	r2, [sl]
 8010ce0:	781a      	ldrb	r2, [r3, #0]
 8010ce2:	3201      	adds	r2, #1
 8010ce4:	701a      	strb	r2, [r3, #0]
 8010ce6:	e7a0      	b.n	8010c2a <_dtoa_r+0x622>
 8010ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8010ea8 <_dtoa_r+0x8a0>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	f7ef fc9c 	bl	8000628 <__aeabi_dmul>
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	4604      	mov	r4, r0
 8010cf6:	460d      	mov	r5, r1
 8010cf8:	f7ef fefe 	bl	8000af8 <__aeabi_dcmpeq>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d09f      	beq.n	8010c40 <_dtoa_r+0x638>
 8010d00:	e7d1      	b.n	8010ca6 <_dtoa_r+0x69e>
 8010d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d04:	2a00      	cmp	r2, #0
 8010d06:	f000 80ea 	beq.w	8010ede <_dtoa_r+0x8d6>
 8010d0a:	9a07      	ldr	r2, [sp, #28]
 8010d0c:	2a01      	cmp	r2, #1
 8010d0e:	f300 80cd 	bgt.w	8010eac <_dtoa_r+0x8a4>
 8010d12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010d14:	2a00      	cmp	r2, #0
 8010d16:	f000 80c1 	beq.w	8010e9c <_dtoa_r+0x894>
 8010d1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010d1e:	9c08      	ldr	r4, [sp, #32]
 8010d20:	9e00      	ldr	r6, [sp, #0]
 8010d22:	9a00      	ldr	r2, [sp, #0]
 8010d24:	441a      	add	r2, r3
 8010d26:	9200      	str	r2, [sp, #0]
 8010d28:	9a06      	ldr	r2, [sp, #24]
 8010d2a:	2101      	movs	r1, #1
 8010d2c:	441a      	add	r2, r3
 8010d2e:	4648      	mov	r0, r9
 8010d30:	9206      	str	r2, [sp, #24]
 8010d32:	f000 fc2d 	bl	8011590 <__i2b>
 8010d36:	4605      	mov	r5, r0
 8010d38:	b166      	cbz	r6, 8010d54 <_dtoa_r+0x74c>
 8010d3a:	9b06      	ldr	r3, [sp, #24]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dd09      	ble.n	8010d54 <_dtoa_r+0x74c>
 8010d40:	42b3      	cmp	r3, r6
 8010d42:	9a00      	ldr	r2, [sp, #0]
 8010d44:	bfa8      	it	ge
 8010d46:	4633      	movge	r3, r6
 8010d48:	1ad2      	subs	r2, r2, r3
 8010d4a:	9200      	str	r2, [sp, #0]
 8010d4c:	9a06      	ldr	r2, [sp, #24]
 8010d4e:	1af6      	subs	r6, r6, r3
 8010d50:	1ad3      	subs	r3, r2, r3
 8010d52:	9306      	str	r3, [sp, #24]
 8010d54:	9b08      	ldr	r3, [sp, #32]
 8010d56:	b30b      	cbz	r3, 8010d9c <_dtoa_r+0x794>
 8010d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f000 80c6 	beq.w	8010eec <_dtoa_r+0x8e4>
 8010d60:	2c00      	cmp	r4, #0
 8010d62:	f000 80c0 	beq.w	8010ee6 <_dtoa_r+0x8de>
 8010d66:	4629      	mov	r1, r5
 8010d68:	4622      	mov	r2, r4
 8010d6a:	4648      	mov	r0, r9
 8010d6c:	f000 fcc8 	bl	8011700 <__pow5mult>
 8010d70:	9a02      	ldr	r2, [sp, #8]
 8010d72:	4601      	mov	r1, r0
 8010d74:	4605      	mov	r5, r0
 8010d76:	4648      	mov	r0, r9
 8010d78:	f000 fc20 	bl	80115bc <__multiply>
 8010d7c:	9902      	ldr	r1, [sp, #8]
 8010d7e:	4680      	mov	r8, r0
 8010d80:	4648      	mov	r0, r9
 8010d82:	f000 fb51 	bl	8011428 <_Bfree>
 8010d86:	9b08      	ldr	r3, [sp, #32]
 8010d88:	1b1b      	subs	r3, r3, r4
 8010d8a:	9308      	str	r3, [sp, #32]
 8010d8c:	f000 80b1 	beq.w	8010ef2 <_dtoa_r+0x8ea>
 8010d90:	9a08      	ldr	r2, [sp, #32]
 8010d92:	4641      	mov	r1, r8
 8010d94:	4648      	mov	r0, r9
 8010d96:	f000 fcb3 	bl	8011700 <__pow5mult>
 8010d9a:	9002      	str	r0, [sp, #8]
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	4648      	mov	r0, r9
 8010da0:	f000 fbf6 	bl	8011590 <__i2b>
 8010da4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010da6:	4604      	mov	r4, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 81d8 	beq.w	801115e <_dtoa_r+0xb56>
 8010dae:	461a      	mov	r2, r3
 8010db0:	4601      	mov	r1, r0
 8010db2:	4648      	mov	r0, r9
 8010db4:	f000 fca4 	bl	8011700 <__pow5mult>
 8010db8:	9b07      	ldr	r3, [sp, #28]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	f300 809f 	bgt.w	8010f00 <_dtoa_r+0x8f8>
 8010dc2:	9b04      	ldr	r3, [sp, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f040 8097 	bne.w	8010ef8 <_dtoa_r+0x8f0>
 8010dca:	9b05      	ldr	r3, [sp, #20]
 8010dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f040 8093 	bne.w	8010efc <_dtoa_r+0x8f4>
 8010dd6:	9b05      	ldr	r3, [sp, #20]
 8010dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ddc:	0d1b      	lsrs	r3, r3, #20
 8010dde:	051b      	lsls	r3, r3, #20
 8010de0:	b133      	cbz	r3, 8010df0 <_dtoa_r+0x7e8>
 8010de2:	9b00      	ldr	r3, [sp, #0]
 8010de4:	3301      	adds	r3, #1
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	9b06      	ldr	r3, [sp, #24]
 8010dea:	3301      	adds	r3, #1
 8010dec:	9306      	str	r3, [sp, #24]
 8010dee:	2301      	movs	r3, #1
 8010df0:	9308      	str	r3, [sp, #32]
 8010df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 81b8 	beq.w	801116a <_dtoa_r+0xb62>
 8010dfa:	6923      	ldr	r3, [r4, #16]
 8010dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e00:	6918      	ldr	r0, [r3, #16]
 8010e02:	f000 fb79 	bl	80114f8 <__hi0bits>
 8010e06:	f1c0 0020 	rsb	r0, r0, #32
 8010e0a:	9b06      	ldr	r3, [sp, #24]
 8010e0c:	4418      	add	r0, r3
 8010e0e:	f010 001f 	ands.w	r0, r0, #31
 8010e12:	f000 8082 	beq.w	8010f1a <_dtoa_r+0x912>
 8010e16:	f1c0 0320 	rsb	r3, r0, #32
 8010e1a:	2b04      	cmp	r3, #4
 8010e1c:	dd73      	ble.n	8010f06 <_dtoa_r+0x8fe>
 8010e1e:	9b00      	ldr	r3, [sp, #0]
 8010e20:	f1c0 001c 	rsb	r0, r0, #28
 8010e24:	4403      	add	r3, r0
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	9b06      	ldr	r3, [sp, #24]
 8010e2a:	4403      	add	r3, r0
 8010e2c:	4406      	add	r6, r0
 8010e2e:	9306      	str	r3, [sp, #24]
 8010e30:	9b00      	ldr	r3, [sp, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	dd05      	ble.n	8010e42 <_dtoa_r+0x83a>
 8010e36:	9902      	ldr	r1, [sp, #8]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4648      	mov	r0, r9
 8010e3c:	f000 fcba 	bl	80117b4 <__lshift>
 8010e40:	9002      	str	r0, [sp, #8]
 8010e42:	9b06      	ldr	r3, [sp, #24]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	dd05      	ble.n	8010e54 <_dtoa_r+0x84c>
 8010e48:	4621      	mov	r1, r4
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	4648      	mov	r0, r9
 8010e4e:	f000 fcb1 	bl	80117b4 <__lshift>
 8010e52:	4604      	mov	r4, r0
 8010e54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d061      	beq.n	8010f1e <_dtoa_r+0x916>
 8010e5a:	9802      	ldr	r0, [sp, #8]
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	f000 fd15 	bl	801188c <__mcmp>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	da5b      	bge.n	8010f1e <_dtoa_r+0x916>
 8010e66:	2300      	movs	r3, #0
 8010e68:	9902      	ldr	r1, [sp, #8]
 8010e6a:	220a      	movs	r2, #10
 8010e6c:	4648      	mov	r0, r9
 8010e6e:	f000 fafd 	bl	801146c <__multadd>
 8010e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e74:	9002      	str	r0, [sp, #8]
 8010e76:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 8177 	beq.w	801116e <_dtoa_r+0xb66>
 8010e80:	4629      	mov	r1, r5
 8010e82:	2300      	movs	r3, #0
 8010e84:	220a      	movs	r2, #10
 8010e86:	4648      	mov	r0, r9
 8010e88:	f000 faf0 	bl	801146c <__multadd>
 8010e8c:	f1bb 0f00 	cmp.w	fp, #0
 8010e90:	4605      	mov	r5, r0
 8010e92:	dc6f      	bgt.n	8010f74 <_dtoa_r+0x96c>
 8010e94:	9b07      	ldr	r3, [sp, #28]
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	dc49      	bgt.n	8010f2e <_dtoa_r+0x926>
 8010e9a:	e06b      	b.n	8010f74 <_dtoa_r+0x96c>
 8010e9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ea2:	e73c      	b.n	8010d1e <_dtoa_r+0x716>
 8010ea4:	3fe00000 	.word	0x3fe00000
 8010ea8:	40240000 	.word	0x40240000
 8010eac:	9b03      	ldr	r3, [sp, #12]
 8010eae:	1e5c      	subs	r4, r3, #1
 8010eb0:	9b08      	ldr	r3, [sp, #32]
 8010eb2:	42a3      	cmp	r3, r4
 8010eb4:	db09      	blt.n	8010eca <_dtoa_r+0x8c2>
 8010eb6:	1b1c      	subs	r4, r3, r4
 8010eb8:	9b03      	ldr	r3, [sp, #12]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f6bf af30 	bge.w	8010d20 <_dtoa_r+0x718>
 8010ec0:	9b00      	ldr	r3, [sp, #0]
 8010ec2:	9a03      	ldr	r2, [sp, #12]
 8010ec4:	1a9e      	subs	r6, r3, r2
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e72b      	b.n	8010d22 <_dtoa_r+0x71a>
 8010eca:	9b08      	ldr	r3, [sp, #32]
 8010ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ece:	9408      	str	r4, [sp, #32]
 8010ed0:	1ae3      	subs	r3, r4, r3
 8010ed2:	441a      	add	r2, r3
 8010ed4:	9e00      	ldr	r6, [sp, #0]
 8010ed6:	9b03      	ldr	r3, [sp, #12]
 8010ed8:	920d      	str	r2, [sp, #52]	@ 0x34
 8010eda:	2400      	movs	r4, #0
 8010edc:	e721      	b.n	8010d22 <_dtoa_r+0x71a>
 8010ede:	9c08      	ldr	r4, [sp, #32]
 8010ee0:	9e00      	ldr	r6, [sp, #0]
 8010ee2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010ee4:	e728      	b.n	8010d38 <_dtoa_r+0x730>
 8010ee6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010eea:	e751      	b.n	8010d90 <_dtoa_r+0x788>
 8010eec:	9a08      	ldr	r2, [sp, #32]
 8010eee:	9902      	ldr	r1, [sp, #8]
 8010ef0:	e750      	b.n	8010d94 <_dtoa_r+0x78c>
 8010ef2:	f8cd 8008 	str.w	r8, [sp, #8]
 8010ef6:	e751      	b.n	8010d9c <_dtoa_r+0x794>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	e779      	b.n	8010df0 <_dtoa_r+0x7e8>
 8010efc:	9b04      	ldr	r3, [sp, #16]
 8010efe:	e777      	b.n	8010df0 <_dtoa_r+0x7e8>
 8010f00:	2300      	movs	r3, #0
 8010f02:	9308      	str	r3, [sp, #32]
 8010f04:	e779      	b.n	8010dfa <_dtoa_r+0x7f2>
 8010f06:	d093      	beq.n	8010e30 <_dtoa_r+0x828>
 8010f08:	9a00      	ldr	r2, [sp, #0]
 8010f0a:	331c      	adds	r3, #28
 8010f0c:	441a      	add	r2, r3
 8010f0e:	9200      	str	r2, [sp, #0]
 8010f10:	9a06      	ldr	r2, [sp, #24]
 8010f12:	441a      	add	r2, r3
 8010f14:	441e      	add	r6, r3
 8010f16:	9206      	str	r2, [sp, #24]
 8010f18:	e78a      	b.n	8010e30 <_dtoa_r+0x828>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	e7f4      	b.n	8010f08 <_dtoa_r+0x900>
 8010f1e:	9b03      	ldr	r3, [sp, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	46b8      	mov	r8, r7
 8010f24:	dc20      	bgt.n	8010f68 <_dtoa_r+0x960>
 8010f26:	469b      	mov	fp, r3
 8010f28:	9b07      	ldr	r3, [sp, #28]
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	dd1e      	ble.n	8010f6c <_dtoa_r+0x964>
 8010f2e:	f1bb 0f00 	cmp.w	fp, #0
 8010f32:	f47f adb1 	bne.w	8010a98 <_dtoa_r+0x490>
 8010f36:	4621      	mov	r1, r4
 8010f38:	465b      	mov	r3, fp
 8010f3a:	2205      	movs	r2, #5
 8010f3c:	4648      	mov	r0, r9
 8010f3e:	f000 fa95 	bl	801146c <__multadd>
 8010f42:	4601      	mov	r1, r0
 8010f44:	4604      	mov	r4, r0
 8010f46:	9802      	ldr	r0, [sp, #8]
 8010f48:	f000 fca0 	bl	801188c <__mcmp>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	f77f ada3 	ble.w	8010a98 <_dtoa_r+0x490>
 8010f52:	4656      	mov	r6, sl
 8010f54:	2331      	movs	r3, #49	@ 0x31
 8010f56:	f806 3b01 	strb.w	r3, [r6], #1
 8010f5a:	f108 0801 	add.w	r8, r8, #1
 8010f5e:	e59f      	b.n	8010aa0 <_dtoa_r+0x498>
 8010f60:	9c03      	ldr	r4, [sp, #12]
 8010f62:	46b8      	mov	r8, r7
 8010f64:	4625      	mov	r5, r4
 8010f66:	e7f4      	b.n	8010f52 <_dtoa_r+0x94a>
 8010f68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	f000 8101 	beq.w	8011176 <_dtoa_r+0xb6e>
 8010f74:	2e00      	cmp	r6, #0
 8010f76:	dd05      	ble.n	8010f84 <_dtoa_r+0x97c>
 8010f78:	4629      	mov	r1, r5
 8010f7a:	4632      	mov	r2, r6
 8010f7c:	4648      	mov	r0, r9
 8010f7e:	f000 fc19 	bl	80117b4 <__lshift>
 8010f82:	4605      	mov	r5, r0
 8010f84:	9b08      	ldr	r3, [sp, #32]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d05c      	beq.n	8011044 <_dtoa_r+0xa3c>
 8010f8a:	6869      	ldr	r1, [r5, #4]
 8010f8c:	4648      	mov	r0, r9
 8010f8e:	f000 fa0b 	bl	80113a8 <_Balloc>
 8010f92:	4606      	mov	r6, r0
 8010f94:	b928      	cbnz	r0, 8010fa2 <_dtoa_r+0x99a>
 8010f96:	4b82      	ldr	r3, [pc, #520]	@ (80111a0 <_dtoa_r+0xb98>)
 8010f98:	4602      	mov	r2, r0
 8010f9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f9e:	f7ff bb4a 	b.w	8010636 <_dtoa_r+0x2e>
 8010fa2:	692a      	ldr	r2, [r5, #16]
 8010fa4:	3202      	adds	r2, #2
 8010fa6:	0092      	lsls	r2, r2, #2
 8010fa8:	f105 010c 	add.w	r1, r5, #12
 8010fac:	300c      	adds	r0, #12
 8010fae:	f7ff fa92 	bl	80104d6 <memcpy>
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4648      	mov	r0, r9
 8010fb8:	f000 fbfc 	bl	80117b4 <__lshift>
 8010fbc:	f10a 0301 	add.w	r3, sl, #1
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	eb0a 030b 	add.w	r3, sl, fp
 8010fc6:	9308      	str	r3, [sp, #32]
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	462f      	mov	r7, r5
 8010fd0:	9306      	str	r3, [sp, #24]
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	9b00      	ldr	r3, [sp, #0]
 8010fd6:	9802      	ldr	r0, [sp, #8]
 8010fd8:	4621      	mov	r1, r4
 8010fda:	f103 3bff 	add.w	fp, r3, #4294967295
 8010fde:	f7ff fa88 	bl	80104f2 <quorem>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	3330      	adds	r3, #48	@ 0x30
 8010fe6:	9003      	str	r0, [sp, #12]
 8010fe8:	4639      	mov	r1, r7
 8010fea:	9802      	ldr	r0, [sp, #8]
 8010fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fee:	f000 fc4d 	bl	801188c <__mcmp>
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	9004      	str	r0, [sp, #16]
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	4648      	mov	r0, r9
 8010ffa:	f000 fc63 	bl	80118c4 <__mdiff>
 8010ffe:	68c2      	ldr	r2, [r0, #12]
 8011000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011002:	4606      	mov	r6, r0
 8011004:	bb02      	cbnz	r2, 8011048 <_dtoa_r+0xa40>
 8011006:	4601      	mov	r1, r0
 8011008:	9802      	ldr	r0, [sp, #8]
 801100a:	f000 fc3f 	bl	801188c <__mcmp>
 801100e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011010:	4602      	mov	r2, r0
 8011012:	4631      	mov	r1, r6
 8011014:	4648      	mov	r0, r9
 8011016:	920c      	str	r2, [sp, #48]	@ 0x30
 8011018:	9309      	str	r3, [sp, #36]	@ 0x24
 801101a:	f000 fa05 	bl	8011428 <_Bfree>
 801101e:	9b07      	ldr	r3, [sp, #28]
 8011020:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011022:	9e00      	ldr	r6, [sp, #0]
 8011024:	ea42 0103 	orr.w	r1, r2, r3
 8011028:	9b06      	ldr	r3, [sp, #24]
 801102a:	4319      	orrs	r1, r3
 801102c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801102e:	d10d      	bne.n	801104c <_dtoa_r+0xa44>
 8011030:	2b39      	cmp	r3, #57	@ 0x39
 8011032:	d027      	beq.n	8011084 <_dtoa_r+0xa7c>
 8011034:	9a04      	ldr	r2, [sp, #16]
 8011036:	2a00      	cmp	r2, #0
 8011038:	dd01      	ble.n	801103e <_dtoa_r+0xa36>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	3331      	adds	r3, #49	@ 0x31
 801103e:	f88b 3000 	strb.w	r3, [fp]
 8011042:	e52e      	b.n	8010aa2 <_dtoa_r+0x49a>
 8011044:	4628      	mov	r0, r5
 8011046:	e7b9      	b.n	8010fbc <_dtoa_r+0x9b4>
 8011048:	2201      	movs	r2, #1
 801104a:	e7e2      	b.n	8011012 <_dtoa_r+0xa0a>
 801104c:	9904      	ldr	r1, [sp, #16]
 801104e:	2900      	cmp	r1, #0
 8011050:	db04      	blt.n	801105c <_dtoa_r+0xa54>
 8011052:	9807      	ldr	r0, [sp, #28]
 8011054:	4301      	orrs	r1, r0
 8011056:	9806      	ldr	r0, [sp, #24]
 8011058:	4301      	orrs	r1, r0
 801105a:	d120      	bne.n	801109e <_dtoa_r+0xa96>
 801105c:	2a00      	cmp	r2, #0
 801105e:	ddee      	ble.n	801103e <_dtoa_r+0xa36>
 8011060:	9902      	ldr	r1, [sp, #8]
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	2201      	movs	r2, #1
 8011066:	4648      	mov	r0, r9
 8011068:	f000 fba4 	bl	80117b4 <__lshift>
 801106c:	4621      	mov	r1, r4
 801106e:	9002      	str	r0, [sp, #8]
 8011070:	f000 fc0c 	bl	801188c <__mcmp>
 8011074:	2800      	cmp	r0, #0
 8011076:	9b00      	ldr	r3, [sp, #0]
 8011078:	dc02      	bgt.n	8011080 <_dtoa_r+0xa78>
 801107a:	d1e0      	bne.n	801103e <_dtoa_r+0xa36>
 801107c:	07da      	lsls	r2, r3, #31
 801107e:	d5de      	bpl.n	801103e <_dtoa_r+0xa36>
 8011080:	2b39      	cmp	r3, #57	@ 0x39
 8011082:	d1da      	bne.n	801103a <_dtoa_r+0xa32>
 8011084:	2339      	movs	r3, #57	@ 0x39
 8011086:	f88b 3000 	strb.w	r3, [fp]
 801108a:	4633      	mov	r3, r6
 801108c:	461e      	mov	r6, r3
 801108e:	3b01      	subs	r3, #1
 8011090:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011094:	2a39      	cmp	r2, #57	@ 0x39
 8011096:	d04e      	beq.n	8011136 <_dtoa_r+0xb2e>
 8011098:	3201      	adds	r2, #1
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	e501      	b.n	8010aa2 <_dtoa_r+0x49a>
 801109e:	2a00      	cmp	r2, #0
 80110a0:	dd03      	ble.n	80110aa <_dtoa_r+0xaa2>
 80110a2:	2b39      	cmp	r3, #57	@ 0x39
 80110a4:	d0ee      	beq.n	8011084 <_dtoa_r+0xa7c>
 80110a6:	3301      	adds	r3, #1
 80110a8:	e7c9      	b.n	801103e <_dtoa_r+0xa36>
 80110aa:	9a00      	ldr	r2, [sp, #0]
 80110ac:	9908      	ldr	r1, [sp, #32]
 80110ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80110b2:	428a      	cmp	r2, r1
 80110b4:	d028      	beq.n	8011108 <_dtoa_r+0xb00>
 80110b6:	9902      	ldr	r1, [sp, #8]
 80110b8:	2300      	movs	r3, #0
 80110ba:	220a      	movs	r2, #10
 80110bc:	4648      	mov	r0, r9
 80110be:	f000 f9d5 	bl	801146c <__multadd>
 80110c2:	42af      	cmp	r7, r5
 80110c4:	9002      	str	r0, [sp, #8]
 80110c6:	f04f 0300 	mov.w	r3, #0
 80110ca:	f04f 020a 	mov.w	r2, #10
 80110ce:	4639      	mov	r1, r7
 80110d0:	4648      	mov	r0, r9
 80110d2:	d107      	bne.n	80110e4 <_dtoa_r+0xadc>
 80110d4:	f000 f9ca 	bl	801146c <__multadd>
 80110d8:	4607      	mov	r7, r0
 80110da:	4605      	mov	r5, r0
 80110dc:	9b00      	ldr	r3, [sp, #0]
 80110de:	3301      	adds	r3, #1
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	e777      	b.n	8010fd4 <_dtoa_r+0x9cc>
 80110e4:	f000 f9c2 	bl	801146c <__multadd>
 80110e8:	4629      	mov	r1, r5
 80110ea:	4607      	mov	r7, r0
 80110ec:	2300      	movs	r3, #0
 80110ee:	220a      	movs	r2, #10
 80110f0:	4648      	mov	r0, r9
 80110f2:	f000 f9bb 	bl	801146c <__multadd>
 80110f6:	4605      	mov	r5, r0
 80110f8:	e7f0      	b.n	80110dc <_dtoa_r+0xad4>
 80110fa:	f1bb 0f00 	cmp.w	fp, #0
 80110fe:	bfcc      	ite	gt
 8011100:	465e      	movgt	r6, fp
 8011102:	2601      	movle	r6, #1
 8011104:	4456      	add	r6, sl
 8011106:	2700      	movs	r7, #0
 8011108:	9902      	ldr	r1, [sp, #8]
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	2201      	movs	r2, #1
 801110e:	4648      	mov	r0, r9
 8011110:	f000 fb50 	bl	80117b4 <__lshift>
 8011114:	4621      	mov	r1, r4
 8011116:	9002      	str	r0, [sp, #8]
 8011118:	f000 fbb8 	bl	801188c <__mcmp>
 801111c:	2800      	cmp	r0, #0
 801111e:	dcb4      	bgt.n	801108a <_dtoa_r+0xa82>
 8011120:	d102      	bne.n	8011128 <_dtoa_r+0xb20>
 8011122:	9b00      	ldr	r3, [sp, #0]
 8011124:	07db      	lsls	r3, r3, #31
 8011126:	d4b0      	bmi.n	801108a <_dtoa_r+0xa82>
 8011128:	4633      	mov	r3, r6
 801112a:	461e      	mov	r6, r3
 801112c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011130:	2a30      	cmp	r2, #48	@ 0x30
 8011132:	d0fa      	beq.n	801112a <_dtoa_r+0xb22>
 8011134:	e4b5      	b.n	8010aa2 <_dtoa_r+0x49a>
 8011136:	459a      	cmp	sl, r3
 8011138:	d1a8      	bne.n	801108c <_dtoa_r+0xa84>
 801113a:	2331      	movs	r3, #49	@ 0x31
 801113c:	f108 0801 	add.w	r8, r8, #1
 8011140:	f88a 3000 	strb.w	r3, [sl]
 8011144:	e4ad      	b.n	8010aa2 <_dtoa_r+0x49a>
 8011146:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011148:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80111a4 <_dtoa_r+0xb9c>
 801114c:	b11b      	cbz	r3, 8011156 <_dtoa_r+0xb4e>
 801114e:	f10a 0308 	add.w	r3, sl, #8
 8011152:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011154:	6013      	str	r3, [r2, #0]
 8011156:	4650      	mov	r0, sl
 8011158:	b017      	add	sp, #92	@ 0x5c
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	9b07      	ldr	r3, [sp, #28]
 8011160:	2b01      	cmp	r3, #1
 8011162:	f77f ae2e 	ble.w	8010dc2 <_dtoa_r+0x7ba>
 8011166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011168:	9308      	str	r3, [sp, #32]
 801116a:	2001      	movs	r0, #1
 801116c:	e64d      	b.n	8010e0a <_dtoa_r+0x802>
 801116e:	f1bb 0f00 	cmp.w	fp, #0
 8011172:	f77f aed9 	ble.w	8010f28 <_dtoa_r+0x920>
 8011176:	4656      	mov	r6, sl
 8011178:	9802      	ldr	r0, [sp, #8]
 801117a:	4621      	mov	r1, r4
 801117c:	f7ff f9b9 	bl	80104f2 <quorem>
 8011180:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011184:	f806 3b01 	strb.w	r3, [r6], #1
 8011188:	eba6 020a 	sub.w	r2, r6, sl
 801118c:	4593      	cmp	fp, r2
 801118e:	ddb4      	ble.n	80110fa <_dtoa_r+0xaf2>
 8011190:	9902      	ldr	r1, [sp, #8]
 8011192:	2300      	movs	r3, #0
 8011194:	220a      	movs	r2, #10
 8011196:	4648      	mov	r0, r9
 8011198:	f000 f968 	bl	801146c <__multadd>
 801119c:	9002      	str	r0, [sp, #8]
 801119e:	e7eb      	b.n	8011178 <_dtoa_r+0xb70>
 80111a0:	0801ebd4 	.word	0x0801ebd4
 80111a4:	0801eb58 	.word	0x0801eb58

080111a8 <_free_r>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4605      	mov	r5, r0
 80111ac:	2900      	cmp	r1, #0
 80111ae:	d041      	beq.n	8011234 <_free_r+0x8c>
 80111b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111b4:	1f0c      	subs	r4, r1, #4
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	bfb8      	it	lt
 80111ba:	18e4      	addlt	r4, r4, r3
 80111bc:	f000 f8e8 	bl	8011390 <__malloc_lock>
 80111c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011238 <_free_r+0x90>)
 80111c2:	6813      	ldr	r3, [r2, #0]
 80111c4:	b933      	cbnz	r3, 80111d4 <_free_r+0x2c>
 80111c6:	6063      	str	r3, [r4, #4]
 80111c8:	6014      	str	r4, [r2, #0]
 80111ca:	4628      	mov	r0, r5
 80111cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111d0:	f000 b8e4 	b.w	801139c <__malloc_unlock>
 80111d4:	42a3      	cmp	r3, r4
 80111d6:	d908      	bls.n	80111ea <_free_r+0x42>
 80111d8:	6820      	ldr	r0, [r4, #0]
 80111da:	1821      	adds	r1, r4, r0
 80111dc:	428b      	cmp	r3, r1
 80111de:	bf01      	itttt	eq
 80111e0:	6819      	ldreq	r1, [r3, #0]
 80111e2:	685b      	ldreq	r3, [r3, #4]
 80111e4:	1809      	addeq	r1, r1, r0
 80111e6:	6021      	streq	r1, [r4, #0]
 80111e8:	e7ed      	b.n	80111c6 <_free_r+0x1e>
 80111ea:	461a      	mov	r2, r3
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	b10b      	cbz	r3, 80111f4 <_free_r+0x4c>
 80111f0:	42a3      	cmp	r3, r4
 80111f2:	d9fa      	bls.n	80111ea <_free_r+0x42>
 80111f4:	6811      	ldr	r1, [r2, #0]
 80111f6:	1850      	adds	r0, r2, r1
 80111f8:	42a0      	cmp	r0, r4
 80111fa:	d10b      	bne.n	8011214 <_free_r+0x6c>
 80111fc:	6820      	ldr	r0, [r4, #0]
 80111fe:	4401      	add	r1, r0
 8011200:	1850      	adds	r0, r2, r1
 8011202:	4283      	cmp	r3, r0
 8011204:	6011      	str	r1, [r2, #0]
 8011206:	d1e0      	bne.n	80111ca <_free_r+0x22>
 8011208:	6818      	ldr	r0, [r3, #0]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	6053      	str	r3, [r2, #4]
 801120e:	4408      	add	r0, r1
 8011210:	6010      	str	r0, [r2, #0]
 8011212:	e7da      	b.n	80111ca <_free_r+0x22>
 8011214:	d902      	bls.n	801121c <_free_r+0x74>
 8011216:	230c      	movs	r3, #12
 8011218:	602b      	str	r3, [r5, #0]
 801121a:	e7d6      	b.n	80111ca <_free_r+0x22>
 801121c:	6820      	ldr	r0, [r4, #0]
 801121e:	1821      	adds	r1, r4, r0
 8011220:	428b      	cmp	r3, r1
 8011222:	bf04      	itt	eq
 8011224:	6819      	ldreq	r1, [r3, #0]
 8011226:	685b      	ldreq	r3, [r3, #4]
 8011228:	6063      	str	r3, [r4, #4]
 801122a:	bf04      	itt	eq
 801122c:	1809      	addeq	r1, r1, r0
 801122e:	6021      	streq	r1, [r4, #0]
 8011230:	6054      	str	r4, [r2, #4]
 8011232:	e7ca      	b.n	80111ca <_free_r+0x22>
 8011234:	bd38      	pop	{r3, r4, r5, pc}
 8011236:	bf00      	nop
 8011238:	20040cec 	.word	0x20040cec

0801123c <malloc>:
 801123c:	4b02      	ldr	r3, [pc, #8]	@ (8011248 <malloc+0xc>)
 801123e:	4601      	mov	r1, r0
 8011240:	6818      	ldr	r0, [r3, #0]
 8011242:	f000 b825 	b.w	8011290 <_malloc_r>
 8011246:	bf00      	nop
 8011248:	2004030c 	.word	0x2004030c

0801124c <sbrk_aligned>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	4e0f      	ldr	r6, [pc, #60]	@ (801128c <sbrk_aligned+0x40>)
 8011250:	460c      	mov	r4, r1
 8011252:	6831      	ldr	r1, [r6, #0]
 8011254:	4605      	mov	r5, r0
 8011256:	b911      	cbnz	r1, 801125e <sbrk_aligned+0x12>
 8011258:	f001 f838 	bl	80122cc <_sbrk_r>
 801125c:	6030      	str	r0, [r6, #0]
 801125e:	4621      	mov	r1, r4
 8011260:	4628      	mov	r0, r5
 8011262:	f001 f833 	bl	80122cc <_sbrk_r>
 8011266:	1c43      	adds	r3, r0, #1
 8011268:	d103      	bne.n	8011272 <sbrk_aligned+0x26>
 801126a:	f04f 34ff 	mov.w	r4, #4294967295
 801126e:	4620      	mov	r0, r4
 8011270:	bd70      	pop	{r4, r5, r6, pc}
 8011272:	1cc4      	adds	r4, r0, #3
 8011274:	f024 0403 	bic.w	r4, r4, #3
 8011278:	42a0      	cmp	r0, r4
 801127a:	d0f8      	beq.n	801126e <sbrk_aligned+0x22>
 801127c:	1a21      	subs	r1, r4, r0
 801127e:	4628      	mov	r0, r5
 8011280:	f001 f824 	bl	80122cc <_sbrk_r>
 8011284:	3001      	adds	r0, #1
 8011286:	d1f2      	bne.n	801126e <sbrk_aligned+0x22>
 8011288:	e7ef      	b.n	801126a <sbrk_aligned+0x1e>
 801128a:	bf00      	nop
 801128c:	20040ce8 	.word	0x20040ce8

08011290 <_malloc_r>:
 8011290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011294:	1ccd      	adds	r5, r1, #3
 8011296:	f025 0503 	bic.w	r5, r5, #3
 801129a:	3508      	adds	r5, #8
 801129c:	2d0c      	cmp	r5, #12
 801129e:	bf38      	it	cc
 80112a0:	250c      	movcc	r5, #12
 80112a2:	2d00      	cmp	r5, #0
 80112a4:	4606      	mov	r6, r0
 80112a6:	db01      	blt.n	80112ac <_malloc_r+0x1c>
 80112a8:	42a9      	cmp	r1, r5
 80112aa:	d904      	bls.n	80112b6 <_malloc_r+0x26>
 80112ac:	230c      	movs	r3, #12
 80112ae:	6033      	str	r3, [r6, #0]
 80112b0:	2000      	movs	r0, #0
 80112b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801138c <_malloc_r+0xfc>
 80112ba:	f000 f869 	bl	8011390 <__malloc_lock>
 80112be:	f8d8 3000 	ldr.w	r3, [r8]
 80112c2:	461c      	mov	r4, r3
 80112c4:	bb44      	cbnz	r4, 8011318 <_malloc_r+0x88>
 80112c6:	4629      	mov	r1, r5
 80112c8:	4630      	mov	r0, r6
 80112ca:	f7ff ffbf 	bl	801124c <sbrk_aligned>
 80112ce:	1c43      	adds	r3, r0, #1
 80112d0:	4604      	mov	r4, r0
 80112d2:	d158      	bne.n	8011386 <_malloc_r+0xf6>
 80112d4:	f8d8 4000 	ldr.w	r4, [r8]
 80112d8:	4627      	mov	r7, r4
 80112da:	2f00      	cmp	r7, #0
 80112dc:	d143      	bne.n	8011366 <_malloc_r+0xd6>
 80112de:	2c00      	cmp	r4, #0
 80112e0:	d04b      	beq.n	801137a <_malloc_r+0xea>
 80112e2:	6823      	ldr	r3, [r4, #0]
 80112e4:	4639      	mov	r1, r7
 80112e6:	4630      	mov	r0, r6
 80112e8:	eb04 0903 	add.w	r9, r4, r3
 80112ec:	f000 ffee 	bl	80122cc <_sbrk_r>
 80112f0:	4581      	cmp	r9, r0
 80112f2:	d142      	bne.n	801137a <_malloc_r+0xea>
 80112f4:	6821      	ldr	r1, [r4, #0]
 80112f6:	1a6d      	subs	r5, r5, r1
 80112f8:	4629      	mov	r1, r5
 80112fa:	4630      	mov	r0, r6
 80112fc:	f7ff ffa6 	bl	801124c <sbrk_aligned>
 8011300:	3001      	adds	r0, #1
 8011302:	d03a      	beq.n	801137a <_malloc_r+0xea>
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	442b      	add	r3, r5
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	f8d8 3000 	ldr.w	r3, [r8]
 801130e:	685a      	ldr	r2, [r3, #4]
 8011310:	bb62      	cbnz	r2, 801136c <_malloc_r+0xdc>
 8011312:	f8c8 7000 	str.w	r7, [r8]
 8011316:	e00f      	b.n	8011338 <_malloc_r+0xa8>
 8011318:	6822      	ldr	r2, [r4, #0]
 801131a:	1b52      	subs	r2, r2, r5
 801131c:	d420      	bmi.n	8011360 <_malloc_r+0xd0>
 801131e:	2a0b      	cmp	r2, #11
 8011320:	d917      	bls.n	8011352 <_malloc_r+0xc2>
 8011322:	1961      	adds	r1, r4, r5
 8011324:	42a3      	cmp	r3, r4
 8011326:	6025      	str	r5, [r4, #0]
 8011328:	bf18      	it	ne
 801132a:	6059      	strne	r1, [r3, #4]
 801132c:	6863      	ldr	r3, [r4, #4]
 801132e:	bf08      	it	eq
 8011330:	f8c8 1000 	streq.w	r1, [r8]
 8011334:	5162      	str	r2, [r4, r5]
 8011336:	604b      	str	r3, [r1, #4]
 8011338:	4630      	mov	r0, r6
 801133a:	f000 f82f 	bl	801139c <__malloc_unlock>
 801133e:	f104 000b 	add.w	r0, r4, #11
 8011342:	1d23      	adds	r3, r4, #4
 8011344:	f020 0007 	bic.w	r0, r0, #7
 8011348:	1ac2      	subs	r2, r0, r3
 801134a:	bf1c      	itt	ne
 801134c:	1a1b      	subne	r3, r3, r0
 801134e:	50a3      	strne	r3, [r4, r2]
 8011350:	e7af      	b.n	80112b2 <_malloc_r+0x22>
 8011352:	6862      	ldr	r2, [r4, #4]
 8011354:	42a3      	cmp	r3, r4
 8011356:	bf0c      	ite	eq
 8011358:	f8c8 2000 	streq.w	r2, [r8]
 801135c:	605a      	strne	r2, [r3, #4]
 801135e:	e7eb      	b.n	8011338 <_malloc_r+0xa8>
 8011360:	4623      	mov	r3, r4
 8011362:	6864      	ldr	r4, [r4, #4]
 8011364:	e7ae      	b.n	80112c4 <_malloc_r+0x34>
 8011366:	463c      	mov	r4, r7
 8011368:	687f      	ldr	r7, [r7, #4]
 801136a:	e7b6      	b.n	80112da <_malloc_r+0x4a>
 801136c:	461a      	mov	r2, r3
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	42a3      	cmp	r3, r4
 8011372:	d1fb      	bne.n	801136c <_malloc_r+0xdc>
 8011374:	2300      	movs	r3, #0
 8011376:	6053      	str	r3, [r2, #4]
 8011378:	e7de      	b.n	8011338 <_malloc_r+0xa8>
 801137a:	230c      	movs	r3, #12
 801137c:	6033      	str	r3, [r6, #0]
 801137e:	4630      	mov	r0, r6
 8011380:	f000 f80c 	bl	801139c <__malloc_unlock>
 8011384:	e794      	b.n	80112b0 <_malloc_r+0x20>
 8011386:	6005      	str	r5, [r0, #0]
 8011388:	e7d6      	b.n	8011338 <_malloc_r+0xa8>
 801138a:	bf00      	nop
 801138c:	20040cec 	.word	0x20040cec

08011390 <__malloc_lock>:
 8011390:	4801      	ldr	r0, [pc, #4]	@ (8011398 <__malloc_lock+0x8>)
 8011392:	f7ff b896 	b.w	80104c2 <__retarget_lock_acquire_recursive>
 8011396:	bf00      	nop
 8011398:	20040ce4 	.word	0x20040ce4

0801139c <__malloc_unlock>:
 801139c:	4801      	ldr	r0, [pc, #4]	@ (80113a4 <__malloc_unlock+0x8>)
 801139e:	f7ff b891 	b.w	80104c4 <__retarget_lock_release_recursive>
 80113a2:	bf00      	nop
 80113a4:	20040ce4 	.word	0x20040ce4

080113a8 <_Balloc>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	69c6      	ldr	r6, [r0, #28]
 80113ac:	4604      	mov	r4, r0
 80113ae:	460d      	mov	r5, r1
 80113b0:	b976      	cbnz	r6, 80113d0 <_Balloc+0x28>
 80113b2:	2010      	movs	r0, #16
 80113b4:	f7ff ff42 	bl	801123c <malloc>
 80113b8:	4602      	mov	r2, r0
 80113ba:	61e0      	str	r0, [r4, #28]
 80113bc:	b920      	cbnz	r0, 80113c8 <_Balloc+0x20>
 80113be:	4b18      	ldr	r3, [pc, #96]	@ (8011420 <_Balloc+0x78>)
 80113c0:	4818      	ldr	r0, [pc, #96]	@ (8011424 <_Balloc+0x7c>)
 80113c2:	216b      	movs	r1, #107	@ 0x6b
 80113c4:	f000 ff92 	bl	80122ec <__assert_func>
 80113c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113cc:	6006      	str	r6, [r0, #0]
 80113ce:	60c6      	str	r6, [r0, #12]
 80113d0:	69e6      	ldr	r6, [r4, #28]
 80113d2:	68f3      	ldr	r3, [r6, #12]
 80113d4:	b183      	cbz	r3, 80113f8 <_Balloc+0x50>
 80113d6:	69e3      	ldr	r3, [r4, #28]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113de:	b9b8      	cbnz	r0, 8011410 <_Balloc+0x68>
 80113e0:	2101      	movs	r1, #1
 80113e2:	fa01 f605 	lsl.w	r6, r1, r5
 80113e6:	1d72      	adds	r2, r6, #5
 80113e8:	0092      	lsls	r2, r2, #2
 80113ea:	4620      	mov	r0, r4
 80113ec:	f000 ff9c 	bl	8012328 <_calloc_r>
 80113f0:	b160      	cbz	r0, 801140c <_Balloc+0x64>
 80113f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113f6:	e00e      	b.n	8011416 <_Balloc+0x6e>
 80113f8:	2221      	movs	r2, #33	@ 0x21
 80113fa:	2104      	movs	r1, #4
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 ff93 	bl	8012328 <_calloc_r>
 8011402:	69e3      	ldr	r3, [r4, #28]
 8011404:	60f0      	str	r0, [r6, #12]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1e4      	bne.n	80113d6 <_Balloc+0x2e>
 801140c:	2000      	movs	r0, #0
 801140e:	bd70      	pop	{r4, r5, r6, pc}
 8011410:	6802      	ldr	r2, [r0, #0]
 8011412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011416:	2300      	movs	r3, #0
 8011418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801141c:	e7f7      	b.n	801140e <_Balloc+0x66>
 801141e:	bf00      	nop
 8011420:	0801eb65 	.word	0x0801eb65
 8011424:	0801ebe5 	.word	0x0801ebe5

08011428 <_Bfree>:
 8011428:	b570      	push	{r4, r5, r6, lr}
 801142a:	69c6      	ldr	r6, [r0, #28]
 801142c:	4605      	mov	r5, r0
 801142e:	460c      	mov	r4, r1
 8011430:	b976      	cbnz	r6, 8011450 <_Bfree+0x28>
 8011432:	2010      	movs	r0, #16
 8011434:	f7ff ff02 	bl	801123c <malloc>
 8011438:	4602      	mov	r2, r0
 801143a:	61e8      	str	r0, [r5, #28]
 801143c:	b920      	cbnz	r0, 8011448 <_Bfree+0x20>
 801143e:	4b09      	ldr	r3, [pc, #36]	@ (8011464 <_Bfree+0x3c>)
 8011440:	4809      	ldr	r0, [pc, #36]	@ (8011468 <_Bfree+0x40>)
 8011442:	218f      	movs	r1, #143	@ 0x8f
 8011444:	f000 ff52 	bl	80122ec <__assert_func>
 8011448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801144c:	6006      	str	r6, [r0, #0]
 801144e:	60c6      	str	r6, [r0, #12]
 8011450:	b13c      	cbz	r4, 8011462 <_Bfree+0x3a>
 8011452:	69eb      	ldr	r3, [r5, #28]
 8011454:	6862      	ldr	r2, [r4, #4]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801145c:	6021      	str	r1, [r4, #0]
 801145e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011462:	bd70      	pop	{r4, r5, r6, pc}
 8011464:	0801eb65 	.word	0x0801eb65
 8011468:	0801ebe5 	.word	0x0801ebe5

0801146c <__multadd>:
 801146c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011470:	690d      	ldr	r5, [r1, #16]
 8011472:	4607      	mov	r7, r0
 8011474:	460c      	mov	r4, r1
 8011476:	461e      	mov	r6, r3
 8011478:	f101 0c14 	add.w	ip, r1, #20
 801147c:	2000      	movs	r0, #0
 801147e:	f8dc 3000 	ldr.w	r3, [ip]
 8011482:	b299      	uxth	r1, r3
 8011484:	fb02 6101 	mla	r1, r2, r1, r6
 8011488:	0c1e      	lsrs	r6, r3, #16
 801148a:	0c0b      	lsrs	r3, r1, #16
 801148c:	fb02 3306 	mla	r3, r2, r6, r3
 8011490:	b289      	uxth	r1, r1
 8011492:	3001      	adds	r0, #1
 8011494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011498:	4285      	cmp	r5, r0
 801149a:	f84c 1b04 	str.w	r1, [ip], #4
 801149e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80114a2:	dcec      	bgt.n	801147e <__multadd+0x12>
 80114a4:	b30e      	cbz	r6, 80114ea <__multadd+0x7e>
 80114a6:	68a3      	ldr	r3, [r4, #8]
 80114a8:	42ab      	cmp	r3, r5
 80114aa:	dc19      	bgt.n	80114e0 <__multadd+0x74>
 80114ac:	6861      	ldr	r1, [r4, #4]
 80114ae:	4638      	mov	r0, r7
 80114b0:	3101      	adds	r1, #1
 80114b2:	f7ff ff79 	bl	80113a8 <_Balloc>
 80114b6:	4680      	mov	r8, r0
 80114b8:	b928      	cbnz	r0, 80114c6 <__multadd+0x5a>
 80114ba:	4602      	mov	r2, r0
 80114bc:	4b0c      	ldr	r3, [pc, #48]	@ (80114f0 <__multadd+0x84>)
 80114be:	480d      	ldr	r0, [pc, #52]	@ (80114f4 <__multadd+0x88>)
 80114c0:	21ba      	movs	r1, #186	@ 0xba
 80114c2:	f000 ff13 	bl	80122ec <__assert_func>
 80114c6:	6922      	ldr	r2, [r4, #16]
 80114c8:	3202      	adds	r2, #2
 80114ca:	f104 010c 	add.w	r1, r4, #12
 80114ce:	0092      	lsls	r2, r2, #2
 80114d0:	300c      	adds	r0, #12
 80114d2:	f7ff f800 	bl	80104d6 <memcpy>
 80114d6:	4621      	mov	r1, r4
 80114d8:	4638      	mov	r0, r7
 80114da:	f7ff ffa5 	bl	8011428 <_Bfree>
 80114de:	4644      	mov	r4, r8
 80114e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114e4:	3501      	adds	r5, #1
 80114e6:	615e      	str	r6, [r3, #20]
 80114e8:	6125      	str	r5, [r4, #16]
 80114ea:	4620      	mov	r0, r4
 80114ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114f0:	0801ebd4 	.word	0x0801ebd4
 80114f4:	0801ebe5 	.word	0x0801ebe5

080114f8 <__hi0bits>:
 80114f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80114fc:	4603      	mov	r3, r0
 80114fe:	bf36      	itet	cc
 8011500:	0403      	lslcc	r3, r0, #16
 8011502:	2000      	movcs	r0, #0
 8011504:	2010      	movcc	r0, #16
 8011506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801150a:	bf3c      	itt	cc
 801150c:	021b      	lslcc	r3, r3, #8
 801150e:	3008      	addcc	r0, #8
 8011510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011514:	bf3c      	itt	cc
 8011516:	011b      	lslcc	r3, r3, #4
 8011518:	3004      	addcc	r0, #4
 801151a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801151e:	bf3c      	itt	cc
 8011520:	009b      	lslcc	r3, r3, #2
 8011522:	3002      	addcc	r0, #2
 8011524:	2b00      	cmp	r3, #0
 8011526:	db05      	blt.n	8011534 <__hi0bits+0x3c>
 8011528:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801152c:	f100 0001 	add.w	r0, r0, #1
 8011530:	bf08      	it	eq
 8011532:	2020      	moveq	r0, #32
 8011534:	4770      	bx	lr

08011536 <__lo0bits>:
 8011536:	6803      	ldr	r3, [r0, #0]
 8011538:	4602      	mov	r2, r0
 801153a:	f013 0007 	ands.w	r0, r3, #7
 801153e:	d00b      	beq.n	8011558 <__lo0bits+0x22>
 8011540:	07d9      	lsls	r1, r3, #31
 8011542:	d421      	bmi.n	8011588 <__lo0bits+0x52>
 8011544:	0798      	lsls	r0, r3, #30
 8011546:	bf49      	itett	mi
 8011548:	085b      	lsrmi	r3, r3, #1
 801154a:	089b      	lsrpl	r3, r3, #2
 801154c:	2001      	movmi	r0, #1
 801154e:	6013      	strmi	r3, [r2, #0]
 8011550:	bf5c      	itt	pl
 8011552:	6013      	strpl	r3, [r2, #0]
 8011554:	2002      	movpl	r0, #2
 8011556:	4770      	bx	lr
 8011558:	b299      	uxth	r1, r3
 801155a:	b909      	cbnz	r1, 8011560 <__lo0bits+0x2a>
 801155c:	0c1b      	lsrs	r3, r3, #16
 801155e:	2010      	movs	r0, #16
 8011560:	b2d9      	uxtb	r1, r3
 8011562:	b909      	cbnz	r1, 8011568 <__lo0bits+0x32>
 8011564:	3008      	adds	r0, #8
 8011566:	0a1b      	lsrs	r3, r3, #8
 8011568:	0719      	lsls	r1, r3, #28
 801156a:	bf04      	itt	eq
 801156c:	091b      	lsreq	r3, r3, #4
 801156e:	3004      	addeq	r0, #4
 8011570:	0799      	lsls	r1, r3, #30
 8011572:	bf04      	itt	eq
 8011574:	089b      	lsreq	r3, r3, #2
 8011576:	3002      	addeq	r0, #2
 8011578:	07d9      	lsls	r1, r3, #31
 801157a:	d403      	bmi.n	8011584 <__lo0bits+0x4e>
 801157c:	085b      	lsrs	r3, r3, #1
 801157e:	f100 0001 	add.w	r0, r0, #1
 8011582:	d003      	beq.n	801158c <__lo0bits+0x56>
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	4770      	bx	lr
 8011588:	2000      	movs	r0, #0
 801158a:	4770      	bx	lr
 801158c:	2020      	movs	r0, #32
 801158e:	4770      	bx	lr

08011590 <__i2b>:
 8011590:	b510      	push	{r4, lr}
 8011592:	460c      	mov	r4, r1
 8011594:	2101      	movs	r1, #1
 8011596:	f7ff ff07 	bl	80113a8 <_Balloc>
 801159a:	4602      	mov	r2, r0
 801159c:	b928      	cbnz	r0, 80115aa <__i2b+0x1a>
 801159e:	4b05      	ldr	r3, [pc, #20]	@ (80115b4 <__i2b+0x24>)
 80115a0:	4805      	ldr	r0, [pc, #20]	@ (80115b8 <__i2b+0x28>)
 80115a2:	f240 1145 	movw	r1, #325	@ 0x145
 80115a6:	f000 fea1 	bl	80122ec <__assert_func>
 80115aa:	2301      	movs	r3, #1
 80115ac:	6144      	str	r4, [r0, #20]
 80115ae:	6103      	str	r3, [r0, #16]
 80115b0:	bd10      	pop	{r4, pc}
 80115b2:	bf00      	nop
 80115b4:	0801ebd4 	.word	0x0801ebd4
 80115b8:	0801ebe5 	.word	0x0801ebe5

080115bc <__multiply>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	4617      	mov	r7, r2
 80115c2:	690a      	ldr	r2, [r1, #16]
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	bfa8      	it	ge
 80115ca:	463b      	movge	r3, r7
 80115cc:	4689      	mov	r9, r1
 80115ce:	bfa4      	itt	ge
 80115d0:	460f      	movge	r7, r1
 80115d2:	4699      	movge	r9, r3
 80115d4:	693d      	ldr	r5, [r7, #16]
 80115d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	eb05 060a 	add.w	r6, r5, sl
 80115e2:	42b3      	cmp	r3, r6
 80115e4:	b085      	sub	sp, #20
 80115e6:	bfb8      	it	lt
 80115e8:	3101      	addlt	r1, #1
 80115ea:	f7ff fedd 	bl	80113a8 <_Balloc>
 80115ee:	b930      	cbnz	r0, 80115fe <__multiply+0x42>
 80115f0:	4602      	mov	r2, r0
 80115f2:	4b41      	ldr	r3, [pc, #260]	@ (80116f8 <__multiply+0x13c>)
 80115f4:	4841      	ldr	r0, [pc, #260]	@ (80116fc <__multiply+0x140>)
 80115f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80115fa:	f000 fe77 	bl	80122ec <__assert_func>
 80115fe:	f100 0414 	add.w	r4, r0, #20
 8011602:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011606:	4623      	mov	r3, r4
 8011608:	2200      	movs	r2, #0
 801160a:	4573      	cmp	r3, lr
 801160c:	d320      	bcc.n	8011650 <__multiply+0x94>
 801160e:	f107 0814 	add.w	r8, r7, #20
 8011612:	f109 0114 	add.w	r1, r9, #20
 8011616:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801161a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801161e:	9302      	str	r3, [sp, #8]
 8011620:	1beb      	subs	r3, r5, r7
 8011622:	3b15      	subs	r3, #21
 8011624:	f023 0303 	bic.w	r3, r3, #3
 8011628:	3304      	adds	r3, #4
 801162a:	3715      	adds	r7, #21
 801162c:	42bd      	cmp	r5, r7
 801162e:	bf38      	it	cc
 8011630:	2304      	movcc	r3, #4
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	9b02      	ldr	r3, [sp, #8]
 8011636:	9103      	str	r1, [sp, #12]
 8011638:	428b      	cmp	r3, r1
 801163a:	d80c      	bhi.n	8011656 <__multiply+0x9a>
 801163c:	2e00      	cmp	r6, #0
 801163e:	dd03      	ble.n	8011648 <__multiply+0x8c>
 8011640:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011644:	2b00      	cmp	r3, #0
 8011646:	d055      	beq.n	80116f4 <__multiply+0x138>
 8011648:	6106      	str	r6, [r0, #16]
 801164a:	b005      	add	sp, #20
 801164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011650:	f843 2b04 	str.w	r2, [r3], #4
 8011654:	e7d9      	b.n	801160a <__multiply+0x4e>
 8011656:	f8b1 a000 	ldrh.w	sl, [r1]
 801165a:	f1ba 0f00 	cmp.w	sl, #0
 801165e:	d01f      	beq.n	80116a0 <__multiply+0xe4>
 8011660:	46c4      	mov	ip, r8
 8011662:	46a1      	mov	r9, r4
 8011664:	2700      	movs	r7, #0
 8011666:	f85c 2b04 	ldr.w	r2, [ip], #4
 801166a:	f8d9 3000 	ldr.w	r3, [r9]
 801166e:	fa1f fb82 	uxth.w	fp, r2
 8011672:	b29b      	uxth	r3, r3
 8011674:	fb0a 330b 	mla	r3, sl, fp, r3
 8011678:	443b      	add	r3, r7
 801167a:	f8d9 7000 	ldr.w	r7, [r9]
 801167e:	0c12      	lsrs	r2, r2, #16
 8011680:	0c3f      	lsrs	r7, r7, #16
 8011682:	fb0a 7202 	mla	r2, sl, r2, r7
 8011686:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801168a:	b29b      	uxth	r3, r3
 801168c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011690:	4565      	cmp	r5, ip
 8011692:	f849 3b04 	str.w	r3, [r9], #4
 8011696:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801169a:	d8e4      	bhi.n	8011666 <__multiply+0xaa>
 801169c:	9b01      	ldr	r3, [sp, #4]
 801169e:	50e7      	str	r7, [r4, r3]
 80116a0:	9b03      	ldr	r3, [sp, #12]
 80116a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80116a6:	3104      	adds	r1, #4
 80116a8:	f1b9 0f00 	cmp.w	r9, #0
 80116ac:	d020      	beq.n	80116f0 <__multiply+0x134>
 80116ae:	6823      	ldr	r3, [r4, #0]
 80116b0:	4647      	mov	r7, r8
 80116b2:	46a4      	mov	ip, r4
 80116b4:	f04f 0a00 	mov.w	sl, #0
 80116b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80116bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80116c0:	fb09 220b 	mla	r2, r9, fp, r2
 80116c4:	4452      	add	r2, sl
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116cc:	f84c 3b04 	str.w	r3, [ip], #4
 80116d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80116d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80116dc:	fb09 330a 	mla	r3, r9, sl, r3
 80116e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80116e4:	42bd      	cmp	r5, r7
 80116e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116ea:	d8e5      	bhi.n	80116b8 <__multiply+0xfc>
 80116ec:	9a01      	ldr	r2, [sp, #4]
 80116ee:	50a3      	str	r3, [r4, r2]
 80116f0:	3404      	adds	r4, #4
 80116f2:	e79f      	b.n	8011634 <__multiply+0x78>
 80116f4:	3e01      	subs	r6, #1
 80116f6:	e7a1      	b.n	801163c <__multiply+0x80>
 80116f8:	0801ebd4 	.word	0x0801ebd4
 80116fc:	0801ebe5 	.word	0x0801ebe5

08011700 <__pow5mult>:
 8011700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011704:	4615      	mov	r5, r2
 8011706:	f012 0203 	ands.w	r2, r2, #3
 801170a:	4607      	mov	r7, r0
 801170c:	460e      	mov	r6, r1
 801170e:	d007      	beq.n	8011720 <__pow5mult+0x20>
 8011710:	4c25      	ldr	r4, [pc, #148]	@ (80117a8 <__pow5mult+0xa8>)
 8011712:	3a01      	subs	r2, #1
 8011714:	2300      	movs	r3, #0
 8011716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801171a:	f7ff fea7 	bl	801146c <__multadd>
 801171e:	4606      	mov	r6, r0
 8011720:	10ad      	asrs	r5, r5, #2
 8011722:	d03d      	beq.n	80117a0 <__pow5mult+0xa0>
 8011724:	69fc      	ldr	r4, [r7, #28]
 8011726:	b97c      	cbnz	r4, 8011748 <__pow5mult+0x48>
 8011728:	2010      	movs	r0, #16
 801172a:	f7ff fd87 	bl	801123c <malloc>
 801172e:	4602      	mov	r2, r0
 8011730:	61f8      	str	r0, [r7, #28]
 8011732:	b928      	cbnz	r0, 8011740 <__pow5mult+0x40>
 8011734:	4b1d      	ldr	r3, [pc, #116]	@ (80117ac <__pow5mult+0xac>)
 8011736:	481e      	ldr	r0, [pc, #120]	@ (80117b0 <__pow5mult+0xb0>)
 8011738:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801173c:	f000 fdd6 	bl	80122ec <__assert_func>
 8011740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011744:	6004      	str	r4, [r0, #0]
 8011746:	60c4      	str	r4, [r0, #12]
 8011748:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801174c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011750:	b94c      	cbnz	r4, 8011766 <__pow5mult+0x66>
 8011752:	f240 2171 	movw	r1, #625	@ 0x271
 8011756:	4638      	mov	r0, r7
 8011758:	f7ff ff1a 	bl	8011590 <__i2b>
 801175c:	2300      	movs	r3, #0
 801175e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011762:	4604      	mov	r4, r0
 8011764:	6003      	str	r3, [r0, #0]
 8011766:	f04f 0900 	mov.w	r9, #0
 801176a:	07eb      	lsls	r3, r5, #31
 801176c:	d50a      	bpl.n	8011784 <__pow5mult+0x84>
 801176e:	4631      	mov	r1, r6
 8011770:	4622      	mov	r2, r4
 8011772:	4638      	mov	r0, r7
 8011774:	f7ff ff22 	bl	80115bc <__multiply>
 8011778:	4631      	mov	r1, r6
 801177a:	4680      	mov	r8, r0
 801177c:	4638      	mov	r0, r7
 801177e:	f7ff fe53 	bl	8011428 <_Bfree>
 8011782:	4646      	mov	r6, r8
 8011784:	106d      	asrs	r5, r5, #1
 8011786:	d00b      	beq.n	80117a0 <__pow5mult+0xa0>
 8011788:	6820      	ldr	r0, [r4, #0]
 801178a:	b938      	cbnz	r0, 801179c <__pow5mult+0x9c>
 801178c:	4622      	mov	r2, r4
 801178e:	4621      	mov	r1, r4
 8011790:	4638      	mov	r0, r7
 8011792:	f7ff ff13 	bl	80115bc <__multiply>
 8011796:	6020      	str	r0, [r4, #0]
 8011798:	f8c0 9000 	str.w	r9, [r0]
 801179c:	4604      	mov	r4, r0
 801179e:	e7e4      	b.n	801176a <__pow5mult+0x6a>
 80117a0:	4630      	mov	r0, r6
 80117a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a6:	bf00      	nop
 80117a8:	0801ec98 	.word	0x0801ec98
 80117ac:	0801eb65 	.word	0x0801eb65
 80117b0:	0801ebe5 	.word	0x0801ebe5

080117b4 <__lshift>:
 80117b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b8:	460c      	mov	r4, r1
 80117ba:	6849      	ldr	r1, [r1, #4]
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117c2:	68a3      	ldr	r3, [r4, #8]
 80117c4:	4607      	mov	r7, r0
 80117c6:	4691      	mov	r9, r2
 80117c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117cc:	f108 0601 	add.w	r6, r8, #1
 80117d0:	42b3      	cmp	r3, r6
 80117d2:	db0b      	blt.n	80117ec <__lshift+0x38>
 80117d4:	4638      	mov	r0, r7
 80117d6:	f7ff fde7 	bl	80113a8 <_Balloc>
 80117da:	4605      	mov	r5, r0
 80117dc:	b948      	cbnz	r0, 80117f2 <__lshift+0x3e>
 80117de:	4602      	mov	r2, r0
 80117e0:	4b28      	ldr	r3, [pc, #160]	@ (8011884 <__lshift+0xd0>)
 80117e2:	4829      	ldr	r0, [pc, #164]	@ (8011888 <__lshift+0xd4>)
 80117e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80117e8:	f000 fd80 	bl	80122ec <__assert_func>
 80117ec:	3101      	adds	r1, #1
 80117ee:	005b      	lsls	r3, r3, #1
 80117f0:	e7ee      	b.n	80117d0 <__lshift+0x1c>
 80117f2:	2300      	movs	r3, #0
 80117f4:	f100 0114 	add.w	r1, r0, #20
 80117f8:	f100 0210 	add.w	r2, r0, #16
 80117fc:	4618      	mov	r0, r3
 80117fe:	4553      	cmp	r3, sl
 8011800:	db33      	blt.n	801186a <__lshift+0xb6>
 8011802:	6920      	ldr	r0, [r4, #16]
 8011804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011808:	f104 0314 	add.w	r3, r4, #20
 801180c:	f019 091f 	ands.w	r9, r9, #31
 8011810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011818:	d02b      	beq.n	8011872 <__lshift+0xbe>
 801181a:	f1c9 0e20 	rsb	lr, r9, #32
 801181e:	468a      	mov	sl, r1
 8011820:	2200      	movs	r2, #0
 8011822:	6818      	ldr	r0, [r3, #0]
 8011824:	fa00 f009 	lsl.w	r0, r0, r9
 8011828:	4310      	orrs	r0, r2
 801182a:	f84a 0b04 	str.w	r0, [sl], #4
 801182e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011832:	459c      	cmp	ip, r3
 8011834:	fa22 f20e 	lsr.w	r2, r2, lr
 8011838:	d8f3      	bhi.n	8011822 <__lshift+0x6e>
 801183a:	ebac 0304 	sub.w	r3, ip, r4
 801183e:	3b15      	subs	r3, #21
 8011840:	f023 0303 	bic.w	r3, r3, #3
 8011844:	3304      	adds	r3, #4
 8011846:	f104 0015 	add.w	r0, r4, #21
 801184a:	4560      	cmp	r0, ip
 801184c:	bf88      	it	hi
 801184e:	2304      	movhi	r3, #4
 8011850:	50ca      	str	r2, [r1, r3]
 8011852:	b10a      	cbz	r2, 8011858 <__lshift+0xa4>
 8011854:	f108 0602 	add.w	r6, r8, #2
 8011858:	3e01      	subs	r6, #1
 801185a:	4638      	mov	r0, r7
 801185c:	612e      	str	r6, [r5, #16]
 801185e:	4621      	mov	r1, r4
 8011860:	f7ff fde2 	bl	8011428 <_Bfree>
 8011864:	4628      	mov	r0, r5
 8011866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801186a:	f842 0f04 	str.w	r0, [r2, #4]!
 801186e:	3301      	adds	r3, #1
 8011870:	e7c5      	b.n	80117fe <__lshift+0x4a>
 8011872:	3904      	subs	r1, #4
 8011874:	f853 2b04 	ldr.w	r2, [r3], #4
 8011878:	f841 2f04 	str.w	r2, [r1, #4]!
 801187c:	459c      	cmp	ip, r3
 801187e:	d8f9      	bhi.n	8011874 <__lshift+0xc0>
 8011880:	e7ea      	b.n	8011858 <__lshift+0xa4>
 8011882:	bf00      	nop
 8011884:	0801ebd4 	.word	0x0801ebd4
 8011888:	0801ebe5 	.word	0x0801ebe5

0801188c <__mcmp>:
 801188c:	690a      	ldr	r2, [r1, #16]
 801188e:	4603      	mov	r3, r0
 8011890:	6900      	ldr	r0, [r0, #16]
 8011892:	1a80      	subs	r0, r0, r2
 8011894:	b530      	push	{r4, r5, lr}
 8011896:	d10e      	bne.n	80118b6 <__mcmp+0x2a>
 8011898:	3314      	adds	r3, #20
 801189a:	3114      	adds	r1, #20
 801189c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80118a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80118a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80118a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80118ac:	4295      	cmp	r5, r2
 80118ae:	d003      	beq.n	80118b8 <__mcmp+0x2c>
 80118b0:	d205      	bcs.n	80118be <__mcmp+0x32>
 80118b2:	f04f 30ff 	mov.w	r0, #4294967295
 80118b6:	bd30      	pop	{r4, r5, pc}
 80118b8:	42a3      	cmp	r3, r4
 80118ba:	d3f3      	bcc.n	80118a4 <__mcmp+0x18>
 80118bc:	e7fb      	b.n	80118b6 <__mcmp+0x2a>
 80118be:	2001      	movs	r0, #1
 80118c0:	e7f9      	b.n	80118b6 <__mcmp+0x2a>
	...

080118c4 <__mdiff>:
 80118c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c8:	4689      	mov	r9, r1
 80118ca:	4606      	mov	r6, r0
 80118cc:	4611      	mov	r1, r2
 80118ce:	4648      	mov	r0, r9
 80118d0:	4614      	mov	r4, r2
 80118d2:	f7ff ffdb 	bl	801188c <__mcmp>
 80118d6:	1e05      	subs	r5, r0, #0
 80118d8:	d112      	bne.n	8011900 <__mdiff+0x3c>
 80118da:	4629      	mov	r1, r5
 80118dc:	4630      	mov	r0, r6
 80118de:	f7ff fd63 	bl	80113a8 <_Balloc>
 80118e2:	4602      	mov	r2, r0
 80118e4:	b928      	cbnz	r0, 80118f2 <__mdiff+0x2e>
 80118e6:	4b3f      	ldr	r3, [pc, #252]	@ (80119e4 <__mdiff+0x120>)
 80118e8:	f240 2137 	movw	r1, #567	@ 0x237
 80118ec:	483e      	ldr	r0, [pc, #248]	@ (80119e8 <__mdiff+0x124>)
 80118ee:	f000 fcfd 	bl	80122ec <__assert_func>
 80118f2:	2301      	movs	r3, #1
 80118f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118f8:	4610      	mov	r0, r2
 80118fa:	b003      	add	sp, #12
 80118fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011900:	bfbc      	itt	lt
 8011902:	464b      	movlt	r3, r9
 8011904:	46a1      	movlt	r9, r4
 8011906:	4630      	mov	r0, r6
 8011908:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801190c:	bfba      	itte	lt
 801190e:	461c      	movlt	r4, r3
 8011910:	2501      	movlt	r5, #1
 8011912:	2500      	movge	r5, #0
 8011914:	f7ff fd48 	bl	80113a8 <_Balloc>
 8011918:	4602      	mov	r2, r0
 801191a:	b918      	cbnz	r0, 8011924 <__mdiff+0x60>
 801191c:	4b31      	ldr	r3, [pc, #196]	@ (80119e4 <__mdiff+0x120>)
 801191e:	f240 2145 	movw	r1, #581	@ 0x245
 8011922:	e7e3      	b.n	80118ec <__mdiff+0x28>
 8011924:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011928:	6926      	ldr	r6, [r4, #16]
 801192a:	60c5      	str	r5, [r0, #12]
 801192c:	f109 0310 	add.w	r3, r9, #16
 8011930:	f109 0514 	add.w	r5, r9, #20
 8011934:	f104 0e14 	add.w	lr, r4, #20
 8011938:	f100 0b14 	add.w	fp, r0, #20
 801193c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011940:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	46d9      	mov	r9, fp
 8011948:	f04f 0c00 	mov.w	ip, #0
 801194c:	9b01      	ldr	r3, [sp, #4]
 801194e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011952:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011956:	9301      	str	r3, [sp, #4]
 8011958:	fa1f f38a 	uxth.w	r3, sl
 801195c:	4619      	mov	r1, r3
 801195e:	b283      	uxth	r3, r0
 8011960:	1acb      	subs	r3, r1, r3
 8011962:	0c00      	lsrs	r0, r0, #16
 8011964:	4463      	add	r3, ip
 8011966:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801196a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801196e:	b29b      	uxth	r3, r3
 8011970:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011974:	4576      	cmp	r6, lr
 8011976:	f849 3b04 	str.w	r3, [r9], #4
 801197a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801197e:	d8e5      	bhi.n	801194c <__mdiff+0x88>
 8011980:	1b33      	subs	r3, r6, r4
 8011982:	3b15      	subs	r3, #21
 8011984:	f023 0303 	bic.w	r3, r3, #3
 8011988:	3415      	adds	r4, #21
 801198a:	3304      	adds	r3, #4
 801198c:	42a6      	cmp	r6, r4
 801198e:	bf38      	it	cc
 8011990:	2304      	movcc	r3, #4
 8011992:	441d      	add	r5, r3
 8011994:	445b      	add	r3, fp
 8011996:	461e      	mov	r6, r3
 8011998:	462c      	mov	r4, r5
 801199a:	4544      	cmp	r4, r8
 801199c:	d30e      	bcc.n	80119bc <__mdiff+0xf8>
 801199e:	f108 0103 	add.w	r1, r8, #3
 80119a2:	1b49      	subs	r1, r1, r5
 80119a4:	f021 0103 	bic.w	r1, r1, #3
 80119a8:	3d03      	subs	r5, #3
 80119aa:	45a8      	cmp	r8, r5
 80119ac:	bf38      	it	cc
 80119ae:	2100      	movcc	r1, #0
 80119b0:	440b      	add	r3, r1
 80119b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119b6:	b191      	cbz	r1, 80119de <__mdiff+0x11a>
 80119b8:	6117      	str	r7, [r2, #16]
 80119ba:	e79d      	b.n	80118f8 <__mdiff+0x34>
 80119bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80119c0:	46e6      	mov	lr, ip
 80119c2:	0c08      	lsrs	r0, r1, #16
 80119c4:	fa1c fc81 	uxtah	ip, ip, r1
 80119c8:	4471      	add	r1, lr
 80119ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80119ce:	b289      	uxth	r1, r1
 80119d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80119d4:	f846 1b04 	str.w	r1, [r6], #4
 80119d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119dc:	e7dd      	b.n	801199a <__mdiff+0xd6>
 80119de:	3f01      	subs	r7, #1
 80119e0:	e7e7      	b.n	80119b2 <__mdiff+0xee>
 80119e2:	bf00      	nop
 80119e4:	0801ebd4 	.word	0x0801ebd4
 80119e8:	0801ebe5 	.word	0x0801ebe5

080119ec <__d2b>:
 80119ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119f0:	460f      	mov	r7, r1
 80119f2:	2101      	movs	r1, #1
 80119f4:	ec59 8b10 	vmov	r8, r9, d0
 80119f8:	4616      	mov	r6, r2
 80119fa:	f7ff fcd5 	bl	80113a8 <_Balloc>
 80119fe:	4604      	mov	r4, r0
 8011a00:	b930      	cbnz	r0, 8011a10 <__d2b+0x24>
 8011a02:	4602      	mov	r2, r0
 8011a04:	4b23      	ldr	r3, [pc, #140]	@ (8011a94 <__d2b+0xa8>)
 8011a06:	4824      	ldr	r0, [pc, #144]	@ (8011a98 <__d2b+0xac>)
 8011a08:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a0c:	f000 fc6e 	bl	80122ec <__assert_func>
 8011a10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a18:	b10d      	cbz	r5, 8011a1e <__d2b+0x32>
 8011a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a1e:	9301      	str	r3, [sp, #4]
 8011a20:	f1b8 0300 	subs.w	r3, r8, #0
 8011a24:	d023      	beq.n	8011a6e <__d2b+0x82>
 8011a26:	4668      	mov	r0, sp
 8011a28:	9300      	str	r3, [sp, #0]
 8011a2a:	f7ff fd84 	bl	8011536 <__lo0bits>
 8011a2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a32:	b1d0      	cbz	r0, 8011a6a <__d2b+0x7e>
 8011a34:	f1c0 0320 	rsb	r3, r0, #32
 8011a38:	fa02 f303 	lsl.w	r3, r2, r3
 8011a3c:	430b      	orrs	r3, r1
 8011a3e:	40c2      	lsrs	r2, r0
 8011a40:	6163      	str	r3, [r4, #20]
 8011a42:	9201      	str	r2, [sp, #4]
 8011a44:	9b01      	ldr	r3, [sp, #4]
 8011a46:	61a3      	str	r3, [r4, #24]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	bf0c      	ite	eq
 8011a4c:	2201      	moveq	r2, #1
 8011a4e:	2202      	movne	r2, #2
 8011a50:	6122      	str	r2, [r4, #16]
 8011a52:	b1a5      	cbz	r5, 8011a7e <__d2b+0x92>
 8011a54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011a58:	4405      	add	r5, r0
 8011a5a:	603d      	str	r5, [r7, #0]
 8011a5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011a60:	6030      	str	r0, [r6, #0]
 8011a62:	4620      	mov	r0, r4
 8011a64:	b003      	add	sp, #12
 8011a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a6a:	6161      	str	r1, [r4, #20]
 8011a6c:	e7ea      	b.n	8011a44 <__d2b+0x58>
 8011a6e:	a801      	add	r0, sp, #4
 8011a70:	f7ff fd61 	bl	8011536 <__lo0bits>
 8011a74:	9b01      	ldr	r3, [sp, #4]
 8011a76:	6163      	str	r3, [r4, #20]
 8011a78:	3020      	adds	r0, #32
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	e7e8      	b.n	8011a50 <__d2b+0x64>
 8011a7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a86:	6038      	str	r0, [r7, #0]
 8011a88:	6918      	ldr	r0, [r3, #16]
 8011a8a:	f7ff fd35 	bl	80114f8 <__hi0bits>
 8011a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a92:	e7e5      	b.n	8011a60 <__d2b+0x74>
 8011a94:	0801ebd4 	.word	0x0801ebd4
 8011a98:	0801ebe5 	.word	0x0801ebe5

08011a9c <__ssputs_r>:
 8011a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa0:	688e      	ldr	r6, [r1, #8]
 8011aa2:	461f      	mov	r7, r3
 8011aa4:	42be      	cmp	r6, r7
 8011aa6:	680b      	ldr	r3, [r1, #0]
 8011aa8:	4682      	mov	sl, r0
 8011aaa:	460c      	mov	r4, r1
 8011aac:	4690      	mov	r8, r2
 8011aae:	d82d      	bhi.n	8011b0c <__ssputs_r+0x70>
 8011ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ab8:	d026      	beq.n	8011b08 <__ssputs_r+0x6c>
 8011aba:	6965      	ldr	r5, [r4, #20]
 8011abc:	6909      	ldr	r1, [r1, #16]
 8011abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ac2:	eba3 0901 	sub.w	r9, r3, r1
 8011ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011aca:	1c7b      	adds	r3, r7, #1
 8011acc:	444b      	add	r3, r9
 8011ace:	106d      	asrs	r5, r5, #1
 8011ad0:	429d      	cmp	r5, r3
 8011ad2:	bf38      	it	cc
 8011ad4:	461d      	movcc	r5, r3
 8011ad6:	0553      	lsls	r3, r2, #21
 8011ad8:	d527      	bpl.n	8011b2a <__ssputs_r+0x8e>
 8011ada:	4629      	mov	r1, r5
 8011adc:	f7ff fbd8 	bl	8011290 <_malloc_r>
 8011ae0:	4606      	mov	r6, r0
 8011ae2:	b360      	cbz	r0, 8011b3e <__ssputs_r+0xa2>
 8011ae4:	6921      	ldr	r1, [r4, #16]
 8011ae6:	464a      	mov	r2, r9
 8011ae8:	f7fe fcf5 	bl	80104d6 <memcpy>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	6126      	str	r6, [r4, #16]
 8011afa:	6165      	str	r5, [r4, #20]
 8011afc:	444e      	add	r6, r9
 8011afe:	eba5 0509 	sub.w	r5, r5, r9
 8011b02:	6026      	str	r6, [r4, #0]
 8011b04:	60a5      	str	r5, [r4, #8]
 8011b06:	463e      	mov	r6, r7
 8011b08:	42be      	cmp	r6, r7
 8011b0a:	d900      	bls.n	8011b0e <__ssputs_r+0x72>
 8011b0c:	463e      	mov	r6, r7
 8011b0e:	6820      	ldr	r0, [r4, #0]
 8011b10:	4632      	mov	r2, r6
 8011b12:	4641      	mov	r1, r8
 8011b14:	f000 fb9e 	bl	8012254 <memmove>
 8011b18:	68a3      	ldr	r3, [r4, #8]
 8011b1a:	1b9b      	subs	r3, r3, r6
 8011b1c:	60a3      	str	r3, [r4, #8]
 8011b1e:	6823      	ldr	r3, [r4, #0]
 8011b20:	4433      	add	r3, r6
 8011b22:	6023      	str	r3, [r4, #0]
 8011b24:	2000      	movs	r0, #0
 8011b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b2a:	462a      	mov	r2, r5
 8011b2c:	f000 fc22 	bl	8012374 <_realloc_r>
 8011b30:	4606      	mov	r6, r0
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d1e0      	bne.n	8011af8 <__ssputs_r+0x5c>
 8011b36:	6921      	ldr	r1, [r4, #16]
 8011b38:	4650      	mov	r0, sl
 8011b3a:	f7ff fb35 	bl	80111a8 <_free_r>
 8011b3e:	230c      	movs	r3, #12
 8011b40:	f8ca 3000 	str.w	r3, [sl]
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b50:	e7e9      	b.n	8011b26 <__ssputs_r+0x8a>
	...

08011b54 <_svfiprintf_r>:
 8011b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b58:	4698      	mov	r8, r3
 8011b5a:	898b      	ldrh	r3, [r1, #12]
 8011b5c:	061b      	lsls	r3, r3, #24
 8011b5e:	b09d      	sub	sp, #116	@ 0x74
 8011b60:	4607      	mov	r7, r0
 8011b62:	460d      	mov	r5, r1
 8011b64:	4614      	mov	r4, r2
 8011b66:	d510      	bpl.n	8011b8a <_svfiprintf_r+0x36>
 8011b68:	690b      	ldr	r3, [r1, #16]
 8011b6a:	b973      	cbnz	r3, 8011b8a <_svfiprintf_r+0x36>
 8011b6c:	2140      	movs	r1, #64	@ 0x40
 8011b6e:	f7ff fb8f 	bl	8011290 <_malloc_r>
 8011b72:	6028      	str	r0, [r5, #0]
 8011b74:	6128      	str	r0, [r5, #16]
 8011b76:	b930      	cbnz	r0, 8011b86 <_svfiprintf_r+0x32>
 8011b78:	230c      	movs	r3, #12
 8011b7a:	603b      	str	r3, [r7, #0]
 8011b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b80:	b01d      	add	sp, #116	@ 0x74
 8011b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b86:	2340      	movs	r3, #64	@ 0x40
 8011b88:	616b      	str	r3, [r5, #20]
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b8e:	2320      	movs	r3, #32
 8011b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b98:	2330      	movs	r3, #48	@ 0x30
 8011b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d38 <_svfiprintf_r+0x1e4>
 8011b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ba2:	f04f 0901 	mov.w	r9, #1
 8011ba6:	4623      	mov	r3, r4
 8011ba8:	469a      	mov	sl, r3
 8011baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bae:	b10a      	cbz	r2, 8011bb4 <_svfiprintf_r+0x60>
 8011bb0:	2a25      	cmp	r2, #37	@ 0x25
 8011bb2:	d1f9      	bne.n	8011ba8 <_svfiprintf_r+0x54>
 8011bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8011bb8:	d00b      	beq.n	8011bd2 <_svfiprintf_r+0x7e>
 8011bba:	465b      	mov	r3, fp
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	4638      	mov	r0, r7
 8011bc2:	f7ff ff6b 	bl	8011a9c <__ssputs_r>
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	f000 80a7 	beq.w	8011d1a <_svfiprintf_r+0x1c6>
 8011bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bce:	445a      	add	r2, fp
 8011bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f000 809f 	beq.w	8011d1a <_svfiprintf_r+0x1c6>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	f04f 32ff 	mov.w	r2, #4294967295
 8011be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011be6:	f10a 0a01 	add.w	sl, sl, #1
 8011bea:	9304      	str	r3, [sp, #16]
 8011bec:	9307      	str	r3, [sp, #28]
 8011bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bf4:	4654      	mov	r4, sl
 8011bf6:	2205      	movs	r2, #5
 8011bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bfc:	484e      	ldr	r0, [pc, #312]	@ (8011d38 <_svfiprintf_r+0x1e4>)
 8011bfe:	f7ee faff 	bl	8000200 <memchr>
 8011c02:	9a04      	ldr	r2, [sp, #16]
 8011c04:	b9d8      	cbnz	r0, 8011c3e <_svfiprintf_r+0xea>
 8011c06:	06d0      	lsls	r0, r2, #27
 8011c08:	bf44      	itt	mi
 8011c0a:	2320      	movmi	r3, #32
 8011c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c10:	0711      	lsls	r1, r2, #28
 8011c12:	bf44      	itt	mi
 8011c14:	232b      	movmi	r3, #43	@ 0x2b
 8011c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c20:	d015      	beq.n	8011c4e <_svfiprintf_r+0xfa>
 8011c22:	9a07      	ldr	r2, [sp, #28]
 8011c24:	4654      	mov	r4, sl
 8011c26:	2000      	movs	r0, #0
 8011c28:	f04f 0c0a 	mov.w	ip, #10
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c32:	3b30      	subs	r3, #48	@ 0x30
 8011c34:	2b09      	cmp	r3, #9
 8011c36:	d94b      	bls.n	8011cd0 <_svfiprintf_r+0x17c>
 8011c38:	b1b0      	cbz	r0, 8011c68 <_svfiprintf_r+0x114>
 8011c3a:	9207      	str	r2, [sp, #28]
 8011c3c:	e014      	b.n	8011c68 <_svfiprintf_r+0x114>
 8011c3e:	eba0 0308 	sub.w	r3, r0, r8
 8011c42:	fa09 f303 	lsl.w	r3, r9, r3
 8011c46:	4313      	orrs	r3, r2
 8011c48:	9304      	str	r3, [sp, #16]
 8011c4a:	46a2      	mov	sl, r4
 8011c4c:	e7d2      	b.n	8011bf4 <_svfiprintf_r+0xa0>
 8011c4e:	9b03      	ldr	r3, [sp, #12]
 8011c50:	1d19      	adds	r1, r3, #4
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	9103      	str	r1, [sp, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	bfbb      	ittet	lt
 8011c5a:	425b      	neglt	r3, r3
 8011c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c60:	9307      	strge	r3, [sp, #28]
 8011c62:	9307      	strlt	r3, [sp, #28]
 8011c64:	bfb8      	it	lt
 8011c66:	9204      	strlt	r2, [sp, #16]
 8011c68:	7823      	ldrb	r3, [r4, #0]
 8011c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c6c:	d10a      	bne.n	8011c84 <_svfiprintf_r+0x130>
 8011c6e:	7863      	ldrb	r3, [r4, #1]
 8011c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c72:	d132      	bne.n	8011cda <_svfiprintf_r+0x186>
 8011c74:	9b03      	ldr	r3, [sp, #12]
 8011c76:	1d1a      	adds	r2, r3, #4
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	9203      	str	r2, [sp, #12]
 8011c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c80:	3402      	adds	r4, #2
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d48 <_svfiprintf_r+0x1f4>
 8011c88:	7821      	ldrb	r1, [r4, #0]
 8011c8a:	2203      	movs	r2, #3
 8011c8c:	4650      	mov	r0, sl
 8011c8e:	f7ee fab7 	bl	8000200 <memchr>
 8011c92:	b138      	cbz	r0, 8011ca4 <_svfiprintf_r+0x150>
 8011c94:	9b04      	ldr	r3, [sp, #16]
 8011c96:	eba0 000a 	sub.w	r0, r0, sl
 8011c9a:	2240      	movs	r2, #64	@ 0x40
 8011c9c:	4082      	lsls	r2, r0
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	3401      	adds	r4, #1
 8011ca2:	9304      	str	r3, [sp, #16]
 8011ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ca8:	4824      	ldr	r0, [pc, #144]	@ (8011d3c <_svfiprintf_r+0x1e8>)
 8011caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011cae:	2206      	movs	r2, #6
 8011cb0:	f7ee faa6 	bl	8000200 <memchr>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d036      	beq.n	8011d26 <_svfiprintf_r+0x1d2>
 8011cb8:	4b21      	ldr	r3, [pc, #132]	@ (8011d40 <_svfiprintf_r+0x1ec>)
 8011cba:	bb1b      	cbnz	r3, 8011d04 <_svfiprintf_r+0x1b0>
 8011cbc:	9b03      	ldr	r3, [sp, #12]
 8011cbe:	3307      	adds	r3, #7
 8011cc0:	f023 0307 	bic.w	r3, r3, #7
 8011cc4:	3308      	adds	r3, #8
 8011cc6:	9303      	str	r3, [sp, #12]
 8011cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cca:	4433      	add	r3, r6
 8011ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cce:	e76a      	b.n	8011ba6 <_svfiprintf_r+0x52>
 8011cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	2001      	movs	r0, #1
 8011cd8:	e7a8      	b.n	8011c2c <_svfiprintf_r+0xd8>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	3401      	adds	r4, #1
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	f04f 0c0a 	mov.w	ip, #10
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cec:	3a30      	subs	r2, #48	@ 0x30
 8011cee:	2a09      	cmp	r2, #9
 8011cf0:	d903      	bls.n	8011cfa <_svfiprintf_r+0x1a6>
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d0c6      	beq.n	8011c84 <_svfiprintf_r+0x130>
 8011cf6:	9105      	str	r1, [sp, #20]
 8011cf8:	e7c4      	b.n	8011c84 <_svfiprintf_r+0x130>
 8011cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cfe:	4604      	mov	r4, r0
 8011d00:	2301      	movs	r3, #1
 8011d02:	e7f0      	b.n	8011ce6 <_svfiprintf_r+0x192>
 8011d04:	ab03      	add	r3, sp, #12
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	462a      	mov	r2, r5
 8011d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8011d44 <_svfiprintf_r+0x1f0>)
 8011d0c:	a904      	add	r1, sp, #16
 8011d0e:	4638      	mov	r0, r7
 8011d10:	f7fd fd60 	bl	800f7d4 <_printf_float>
 8011d14:	1c42      	adds	r2, r0, #1
 8011d16:	4606      	mov	r6, r0
 8011d18:	d1d6      	bne.n	8011cc8 <_svfiprintf_r+0x174>
 8011d1a:	89ab      	ldrh	r3, [r5, #12]
 8011d1c:	065b      	lsls	r3, r3, #25
 8011d1e:	f53f af2d 	bmi.w	8011b7c <_svfiprintf_r+0x28>
 8011d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d24:	e72c      	b.n	8011b80 <_svfiprintf_r+0x2c>
 8011d26:	ab03      	add	r3, sp, #12
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	462a      	mov	r2, r5
 8011d2c:	4b05      	ldr	r3, [pc, #20]	@ (8011d44 <_svfiprintf_r+0x1f0>)
 8011d2e:	a904      	add	r1, sp, #16
 8011d30:	4638      	mov	r0, r7
 8011d32:	f7fd ffe7 	bl	800fd04 <_printf_i>
 8011d36:	e7ed      	b.n	8011d14 <_svfiprintf_r+0x1c0>
 8011d38:	0801ec3e 	.word	0x0801ec3e
 8011d3c:	0801ec48 	.word	0x0801ec48
 8011d40:	0800f7d5 	.word	0x0800f7d5
 8011d44:	08011a9d 	.word	0x08011a9d
 8011d48:	0801ec44 	.word	0x0801ec44

08011d4c <__sfputc_r>:
 8011d4c:	6893      	ldr	r3, [r2, #8]
 8011d4e:	3b01      	subs	r3, #1
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	b410      	push	{r4}
 8011d54:	6093      	str	r3, [r2, #8]
 8011d56:	da08      	bge.n	8011d6a <__sfputc_r+0x1e>
 8011d58:	6994      	ldr	r4, [r2, #24]
 8011d5a:	42a3      	cmp	r3, r4
 8011d5c:	db01      	blt.n	8011d62 <__sfputc_r+0x16>
 8011d5e:	290a      	cmp	r1, #10
 8011d60:	d103      	bne.n	8011d6a <__sfputc_r+0x1e>
 8011d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d66:	f7fe ba8a 	b.w	801027e <__swbuf_r>
 8011d6a:	6813      	ldr	r3, [r2, #0]
 8011d6c:	1c58      	adds	r0, r3, #1
 8011d6e:	6010      	str	r0, [r2, #0]
 8011d70:	7019      	strb	r1, [r3, #0]
 8011d72:	4608      	mov	r0, r1
 8011d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d78:	4770      	bx	lr

08011d7a <__sfputs_r>:
 8011d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	460f      	mov	r7, r1
 8011d80:	4614      	mov	r4, r2
 8011d82:	18d5      	adds	r5, r2, r3
 8011d84:	42ac      	cmp	r4, r5
 8011d86:	d101      	bne.n	8011d8c <__sfputs_r+0x12>
 8011d88:	2000      	movs	r0, #0
 8011d8a:	e007      	b.n	8011d9c <__sfputs_r+0x22>
 8011d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d90:	463a      	mov	r2, r7
 8011d92:	4630      	mov	r0, r6
 8011d94:	f7ff ffda 	bl	8011d4c <__sfputc_r>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	d1f3      	bne.n	8011d84 <__sfputs_r+0xa>
 8011d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011da0 <_vfiprintf_r>:
 8011da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da4:	460d      	mov	r5, r1
 8011da6:	b09d      	sub	sp, #116	@ 0x74
 8011da8:	4614      	mov	r4, r2
 8011daa:	4698      	mov	r8, r3
 8011dac:	4606      	mov	r6, r0
 8011dae:	b118      	cbz	r0, 8011db8 <_vfiprintf_r+0x18>
 8011db0:	6a03      	ldr	r3, [r0, #32]
 8011db2:	b90b      	cbnz	r3, 8011db8 <_vfiprintf_r+0x18>
 8011db4:	f7fe f950 	bl	8010058 <__sinit>
 8011db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dba:	07d9      	lsls	r1, r3, #31
 8011dbc:	d405      	bmi.n	8011dca <_vfiprintf_r+0x2a>
 8011dbe:	89ab      	ldrh	r3, [r5, #12]
 8011dc0:	059a      	lsls	r2, r3, #22
 8011dc2:	d402      	bmi.n	8011dca <_vfiprintf_r+0x2a>
 8011dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dc6:	f7fe fb7c 	bl	80104c2 <__retarget_lock_acquire_recursive>
 8011dca:	89ab      	ldrh	r3, [r5, #12]
 8011dcc:	071b      	lsls	r3, r3, #28
 8011dce:	d501      	bpl.n	8011dd4 <_vfiprintf_r+0x34>
 8011dd0:	692b      	ldr	r3, [r5, #16]
 8011dd2:	b99b      	cbnz	r3, 8011dfc <_vfiprintf_r+0x5c>
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f7fe fa90 	bl	80102fc <__swsetup_r>
 8011ddc:	b170      	cbz	r0, 8011dfc <_vfiprintf_r+0x5c>
 8011dde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011de0:	07dc      	lsls	r4, r3, #31
 8011de2:	d504      	bpl.n	8011dee <_vfiprintf_r+0x4e>
 8011de4:	f04f 30ff 	mov.w	r0, #4294967295
 8011de8:	b01d      	add	sp, #116	@ 0x74
 8011dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dee:	89ab      	ldrh	r3, [r5, #12]
 8011df0:	0598      	lsls	r0, r3, #22
 8011df2:	d4f7      	bmi.n	8011de4 <_vfiprintf_r+0x44>
 8011df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011df6:	f7fe fb65 	bl	80104c4 <__retarget_lock_release_recursive>
 8011dfa:	e7f3      	b.n	8011de4 <_vfiprintf_r+0x44>
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e00:	2320      	movs	r3, #32
 8011e02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e0a:	2330      	movs	r3, #48	@ 0x30
 8011e0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fbc <_vfiprintf_r+0x21c>
 8011e10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e14:	f04f 0901 	mov.w	r9, #1
 8011e18:	4623      	mov	r3, r4
 8011e1a:	469a      	mov	sl, r3
 8011e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e20:	b10a      	cbz	r2, 8011e26 <_vfiprintf_r+0x86>
 8011e22:	2a25      	cmp	r2, #37	@ 0x25
 8011e24:	d1f9      	bne.n	8011e1a <_vfiprintf_r+0x7a>
 8011e26:	ebba 0b04 	subs.w	fp, sl, r4
 8011e2a:	d00b      	beq.n	8011e44 <_vfiprintf_r+0xa4>
 8011e2c:	465b      	mov	r3, fp
 8011e2e:	4622      	mov	r2, r4
 8011e30:	4629      	mov	r1, r5
 8011e32:	4630      	mov	r0, r6
 8011e34:	f7ff ffa1 	bl	8011d7a <__sfputs_r>
 8011e38:	3001      	adds	r0, #1
 8011e3a:	f000 80a7 	beq.w	8011f8c <_vfiprintf_r+0x1ec>
 8011e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e40:	445a      	add	r2, fp
 8011e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e44:	f89a 3000 	ldrb.w	r3, [sl]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f000 809f 	beq.w	8011f8c <_vfiprintf_r+0x1ec>
 8011e4e:	2300      	movs	r3, #0
 8011e50:	f04f 32ff 	mov.w	r2, #4294967295
 8011e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e58:	f10a 0a01 	add.w	sl, sl, #1
 8011e5c:	9304      	str	r3, [sp, #16]
 8011e5e:	9307      	str	r3, [sp, #28]
 8011e60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e66:	4654      	mov	r4, sl
 8011e68:	2205      	movs	r2, #5
 8011e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e6e:	4853      	ldr	r0, [pc, #332]	@ (8011fbc <_vfiprintf_r+0x21c>)
 8011e70:	f7ee f9c6 	bl	8000200 <memchr>
 8011e74:	9a04      	ldr	r2, [sp, #16]
 8011e76:	b9d8      	cbnz	r0, 8011eb0 <_vfiprintf_r+0x110>
 8011e78:	06d1      	lsls	r1, r2, #27
 8011e7a:	bf44      	itt	mi
 8011e7c:	2320      	movmi	r3, #32
 8011e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e82:	0713      	lsls	r3, r2, #28
 8011e84:	bf44      	itt	mi
 8011e86:	232b      	movmi	r3, #43	@ 0x2b
 8011e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e92:	d015      	beq.n	8011ec0 <_vfiprintf_r+0x120>
 8011e94:	9a07      	ldr	r2, [sp, #28]
 8011e96:	4654      	mov	r4, sl
 8011e98:	2000      	movs	r0, #0
 8011e9a:	f04f 0c0a 	mov.w	ip, #10
 8011e9e:	4621      	mov	r1, r4
 8011ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ea4:	3b30      	subs	r3, #48	@ 0x30
 8011ea6:	2b09      	cmp	r3, #9
 8011ea8:	d94b      	bls.n	8011f42 <_vfiprintf_r+0x1a2>
 8011eaa:	b1b0      	cbz	r0, 8011eda <_vfiprintf_r+0x13a>
 8011eac:	9207      	str	r2, [sp, #28]
 8011eae:	e014      	b.n	8011eda <_vfiprintf_r+0x13a>
 8011eb0:	eba0 0308 	sub.w	r3, r0, r8
 8011eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	9304      	str	r3, [sp, #16]
 8011ebc:	46a2      	mov	sl, r4
 8011ebe:	e7d2      	b.n	8011e66 <_vfiprintf_r+0xc6>
 8011ec0:	9b03      	ldr	r3, [sp, #12]
 8011ec2:	1d19      	adds	r1, r3, #4
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	9103      	str	r1, [sp, #12]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	bfbb      	ittet	lt
 8011ecc:	425b      	neglt	r3, r3
 8011ece:	f042 0202 	orrlt.w	r2, r2, #2
 8011ed2:	9307      	strge	r3, [sp, #28]
 8011ed4:	9307      	strlt	r3, [sp, #28]
 8011ed6:	bfb8      	it	lt
 8011ed8:	9204      	strlt	r2, [sp, #16]
 8011eda:	7823      	ldrb	r3, [r4, #0]
 8011edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ede:	d10a      	bne.n	8011ef6 <_vfiprintf_r+0x156>
 8011ee0:	7863      	ldrb	r3, [r4, #1]
 8011ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ee4:	d132      	bne.n	8011f4c <_vfiprintf_r+0x1ac>
 8011ee6:	9b03      	ldr	r3, [sp, #12]
 8011ee8:	1d1a      	adds	r2, r3, #4
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	9203      	str	r2, [sp, #12]
 8011eee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ef2:	3402      	adds	r4, #2
 8011ef4:	9305      	str	r3, [sp, #20]
 8011ef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fcc <_vfiprintf_r+0x22c>
 8011efa:	7821      	ldrb	r1, [r4, #0]
 8011efc:	2203      	movs	r2, #3
 8011efe:	4650      	mov	r0, sl
 8011f00:	f7ee f97e 	bl	8000200 <memchr>
 8011f04:	b138      	cbz	r0, 8011f16 <_vfiprintf_r+0x176>
 8011f06:	9b04      	ldr	r3, [sp, #16]
 8011f08:	eba0 000a 	sub.w	r0, r0, sl
 8011f0c:	2240      	movs	r2, #64	@ 0x40
 8011f0e:	4082      	lsls	r2, r0
 8011f10:	4313      	orrs	r3, r2
 8011f12:	3401      	adds	r4, #1
 8011f14:	9304      	str	r3, [sp, #16]
 8011f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1a:	4829      	ldr	r0, [pc, #164]	@ (8011fc0 <_vfiprintf_r+0x220>)
 8011f1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f20:	2206      	movs	r2, #6
 8011f22:	f7ee f96d 	bl	8000200 <memchr>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d03f      	beq.n	8011faa <_vfiprintf_r+0x20a>
 8011f2a:	4b26      	ldr	r3, [pc, #152]	@ (8011fc4 <_vfiprintf_r+0x224>)
 8011f2c:	bb1b      	cbnz	r3, 8011f76 <_vfiprintf_r+0x1d6>
 8011f2e:	9b03      	ldr	r3, [sp, #12]
 8011f30:	3307      	adds	r3, #7
 8011f32:	f023 0307 	bic.w	r3, r3, #7
 8011f36:	3308      	adds	r3, #8
 8011f38:	9303      	str	r3, [sp, #12]
 8011f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f3c:	443b      	add	r3, r7
 8011f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f40:	e76a      	b.n	8011e18 <_vfiprintf_r+0x78>
 8011f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f46:	460c      	mov	r4, r1
 8011f48:	2001      	movs	r0, #1
 8011f4a:	e7a8      	b.n	8011e9e <_vfiprintf_r+0xfe>
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	3401      	adds	r4, #1
 8011f50:	9305      	str	r3, [sp, #20]
 8011f52:	4619      	mov	r1, r3
 8011f54:	f04f 0c0a 	mov.w	ip, #10
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f5e:	3a30      	subs	r2, #48	@ 0x30
 8011f60:	2a09      	cmp	r2, #9
 8011f62:	d903      	bls.n	8011f6c <_vfiprintf_r+0x1cc>
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d0c6      	beq.n	8011ef6 <_vfiprintf_r+0x156>
 8011f68:	9105      	str	r1, [sp, #20]
 8011f6a:	e7c4      	b.n	8011ef6 <_vfiprintf_r+0x156>
 8011f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f70:	4604      	mov	r4, r0
 8011f72:	2301      	movs	r3, #1
 8011f74:	e7f0      	b.n	8011f58 <_vfiprintf_r+0x1b8>
 8011f76:	ab03      	add	r3, sp, #12
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	462a      	mov	r2, r5
 8011f7c:	4b12      	ldr	r3, [pc, #72]	@ (8011fc8 <_vfiprintf_r+0x228>)
 8011f7e:	a904      	add	r1, sp, #16
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7fd fc27 	bl	800f7d4 <_printf_float>
 8011f86:	4607      	mov	r7, r0
 8011f88:	1c78      	adds	r0, r7, #1
 8011f8a:	d1d6      	bne.n	8011f3a <_vfiprintf_r+0x19a>
 8011f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f8e:	07d9      	lsls	r1, r3, #31
 8011f90:	d405      	bmi.n	8011f9e <_vfiprintf_r+0x1fe>
 8011f92:	89ab      	ldrh	r3, [r5, #12]
 8011f94:	059a      	lsls	r2, r3, #22
 8011f96:	d402      	bmi.n	8011f9e <_vfiprintf_r+0x1fe>
 8011f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f9a:	f7fe fa93 	bl	80104c4 <__retarget_lock_release_recursive>
 8011f9e:	89ab      	ldrh	r3, [r5, #12]
 8011fa0:	065b      	lsls	r3, r3, #25
 8011fa2:	f53f af1f 	bmi.w	8011de4 <_vfiprintf_r+0x44>
 8011fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fa8:	e71e      	b.n	8011de8 <_vfiprintf_r+0x48>
 8011faa:	ab03      	add	r3, sp, #12
 8011fac:	9300      	str	r3, [sp, #0]
 8011fae:	462a      	mov	r2, r5
 8011fb0:	4b05      	ldr	r3, [pc, #20]	@ (8011fc8 <_vfiprintf_r+0x228>)
 8011fb2:	a904      	add	r1, sp, #16
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	f7fd fea5 	bl	800fd04 <_printf_i>
 8011fba:	e7e4      	b.n	8011f86 <_vfiprintf_r+0x1e6>
 8011fbc:	0801ec3e 	.word	0x0801ec3e
 8011fc0:	0801ec48 	.word	0x0801ec48
 8011fc4:	0800f7d5 	.word	0x0800f7d5
 8011fc8:	08011d7b 	.word	0x08011d7b
 8011fcc:	0801ec44 	.word	0x0801ec44

08011fd0 <__sflush_r>:
 8011fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd8:	0716      	lsls	r6, r2, #28
 8011fda:	4605      	mov	r5, r0
 8011fdc:	460c      	mov	r4, r1
 8011fde:	d454      	bmi.n	801208a <__sflush_r+0xba>
 8011fe0:	684b      	ldr	r3, [r1, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	dc02      	bgt.n	8011fec <__sflush_r+0x1c>
 8011fe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dd48      	ble.n	801207e <__sflush_r+0xae>
 8011fec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011fee:	2e00      	cmp	r6, #0
 8011ff0:	d045      	beq.n	801207e <__sflush_r+0xae>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ff8:	682f      	ldr	r7, [r5, #0]
 8011ffa:	6a21      	ldr	r1, [r4, #32]
 8011ffc:	602b      	str	r3, [r5, #0]
 8011ffe:	d030      	beq.n	8012062 <__sflush_r+0x92>
 8012000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012002:	89a3      	ldrh	r3, [r4, #12]
 8012004:	0759      	lsls	r1, r3, #29
 8012006:	d505      	bpl.n	8012014 <__sflush_r+0x44>
 8012008:	6863      	ldr	r3, [r4, #4]
 801200a:	1ad2      	subs	r2, r2, r3
 801200c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801200e:	b10b      	cbz	r3, 8012014 <__sflush_r+0x44>
 8012010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012012:	1ad2      	subs	r2, r2, r3
 8012014:	2300      	movs	r3, #0
 8012016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012018:	6a21      	ldr	r1, [r4, #32]
 801201a:	4628      	mov	r0, r5
 801201c:	47b0      	blx	r6
 801201e:	1c43      	adds	r3, r0, #1
 8012020:	89a3      	ldrh	r3, [r4, #12]
 8012022:	d106      	bne.n	8012032 <__sflush_r+0x62>
 8012024:	6829      	ldr	r1, [r5, #0]
 8012026:	291d      	cmp	r1, #29
 8012028:	d82b      	bhi.n	8012082 <__sflush_r+0xb2>
 801202a:	4a2a      	ldr	r2, [pc, #168]	@ (80120d4 <__sflush_r+0x104>)
 801202c:	40ca      	lsrs	r2, r1
 801202e:	07d6      	lsls	r6, r2, #31
 8012030:	d527      	bpl.n	8012082 <__sflush_r+0xb2>
 8012032:	2200      	movs	r2, #0
 8012034:	6062      	str	r2, [r4, #4]
 8012036:	04d9      	lsls	r1, r3, #19
 8012038:	6922      	ldr	r2, [r4, #16]
 801203a:	6022      	str	r2, [r4, #0]
 801203c:	d504      	bpl.n	8012048 <__sflush_r+0x78>
 801203e:	1c42      	adds	r2, r0, #1
 8012040:	d101      	bne.n	8012046 <__sflush_r+0x76>
 8012042:	682b      	ldr	r3, [r5, #0]
 8012044:	b903      	cbnz	r3, 8012048 <__sflush_r+0x78>
 8012046:	6560      	str	r0, [r4, #84]	@ 0x54
 8012048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801204a:	602f      	str	r7, [r5, #0]
 801204c:	b1b9      	cbz	r1, 801207e <__sflush_r+0xae>
 801204e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012052:	4299      	cmp	r1, r3
 8012054:	d002      	beq.n	801205c <__sflush_r+0x8c>
 8012056:	4628      	mov	r0, r5
 8012058:	f7ff f8a6 	bl	80111a8 <_free_r>
 801205c:	2300      	movs	r3, #0
 801205e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012060:	e00d      	b.n	801207e <__sflush_r+0xae>
 8012062:	2301      	movs	r3, #1
 8012064:	4628      	mov	r0, r5
 8012066:	47b0      	blx	r6
 8012068:	4602      	mov	r2, r0
 801206a:	1c50      	adds	r0, r2, #1
 801206c:	d1c9      	bne.n	8012002 <__sflush_r+0x32>
 801206e:	682b      	ldr	r3, [r5, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d0c6      	beq.n	8012002 <__sflush_r+0x32>
 8012074:	2b1d      	cmp	r3, #29
 8012076:	d001      	beq.n	801207c <__sflush_r+0xac>
 8012078:	2b16      	cmp	r3, #22
 801207a:	d11e      	bne.n	80120ba <__sflush_r+0xea>
 801207c:	602f      	str	r7, [r5, #0]
 801207e:	2000      	movs	r0, #0
 8012080:	e022      	b.n	80120c8 <__sflush_r+0xf8>
 8012082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012086:	b21b      	sxth	r3, r3
 8012088:	e01b      	b.n	80120c2 <__sflush_r+0xf2>
 801208a:	690f      	ldr	r7, [r1, #16]
 801208c:	2f00      	cmp	r7, #0
 801208e:	d0f6      	beq.n	801207e <__sflush_r+0xae>
 8012090:	0793      	lsls	r3, r2, #30
 8012092:	680e      	ldr	r6, [r1, #0]
 8012094:	bf08      	it	eq
 8012096:	694b      	ldreq	r3, [r1, #20]
 8012098:	600f      	str	r7, [r1, #0]
 801209a:	bf18      	it	ne
 801209c:	2300      	movne	r3, #0
 801209e:	eba6 0807 	sub.w	r8, r6, r7
 80120a2:	608b      	str	r3, [r1, #8]
 80120a4:	f1b8 0f00 	cmp.w	r8, #0
 80120a8:	dde9      	ble.n	801207e <__sflush_r+0xae>
 80120aa:	6a21      	ldr	r1, [r4, #32]
 80120ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80120ae:	4643      	mov	r3, r8
 80120b0:	463a      	mov	r2, r7
 80120b2:	4628      	mov	r0, r5
 80120b4:	47b0      	blx	r6
 80120b6:	2800      	cmp	r0, #0
 80120b8:	dc08      	bgt.n	80120cc <__sflush_r+0xfc>
 80120ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120c2:	81a3      	strh	r3, [r4, #12]
 80120c4:	f04f 30ff 	mov.w	r0, #4294967295
 80120c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120cc:	4407      	add	r7, r0
 80120ce:	eba8 0800 	sub.w	r8, r8, r0
 80120d2:	e7e7      	b.n	80120a4 <__sflush_r+0xd4>
 80120d4:	20400001 	.word	0x20400001

080120d8 <_fflush_r>:
 80120d8:	b538      	push	{r3, r4, r5, lr}
 80120da:	690b      	ldr	r3, [r1, #16]
 80120dc:	4605      	mov	r5, r0
 80120de:	460c      	mov	r4, r1
 80120e0:	b913      	cbnz	r3, 80120e8 <_fflush_r+0x10>
 80120e2:	2500      	movs	r5, #0
 80120e4:	4628      	mov	r0, r5
 80120e6:	bd38      	pop	{r3, r4, r5, pc}
 80120e8:	b118      	cbz	r0, 80120f2 <_fflush_r+0x1a>
 80120ea:	6a03      	ldr	r3, [r0, #32]
 80120ec:	b90b      	cbnz	r3, 80120f2 <_fflush_r+0x1a>
 80120ee:	f7fd ffb3 	bl	8010058 <__sinit>
 80120f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d0f3      	beq.n	80120e2 <_fflush_r+0xa>
 80120fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80120fc:	07d0      	lsls	r0, r2, #31
 80120fe:	d404      	bmi.n	801210a <_fflush_r+0x32>
 8012100:	0599      	lsls	r1, r3, #22
 8012102:	d402      	bmi.n	801210a <_fflush_r+0x32>
 8012104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012106:	f7fe f9dc 	bl	80104c2 <__retarget_lock_acquire_recursive>
 801210a:	4628      	mov	r0, r5
 801210c:	4621      	mov	r1, r4
 801210e:	f7ff ff5f 	bl	8011fd0 <__sflush_r>
 8012112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012114:	07da      	lsls	r2, r3, #31
 8012116:	4605      	mov	r5, r0
 8012118:	d4e4      	bmi.n	80120e4 <_fflush_r+0xc>
 801211a:	89a3      	ldrh	r3, [r4, #12]
 801211c:	059b      	lsls	r3, r3, #22
 801211e:	d4e1      	bmi.n	80120e4 <_fflush_r+0xc>
 8012120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012122:	f7fe f9cf 	bl	80104c4 <__retarget_lock_release_recursive>
 8012126:	e7dd      	b.n	80120e4 <_fflush_r+0xc>

08012128 <__swhatbuf_r>:
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	460c      	mov	r4, r1
 801212c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012130:	2900      	cmp	r1, #0
 8012132:	b096      	sub	sp, #88	@ 0x58
 8012134:	4615      	mov	r5, r2
 8012136:	461e      	mov	r6, r3
 8012138:	da0d      	bge.n	8012156 <__swhatbuf_r+0x2e>
 801213a:	89a3      	ldrh	r3, [r4, #12]
 801213c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012140:	f04f 0100 	mov.w	r1, #0
 8012144:	bf14      	ite	ne
 8012146:	2340      	movne	r3, #64	@ 0x40
 8012148:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801214c:	2000      	movs	r0, #0
 801214e:	6031      	str	r1, [r6, #0]
 8012150:	602b      	str	r3, [r5, #0]
 8012152:	b016      	add	sp, #88	@ 0x58
 8012154:	bd70      	pop	{r4, r5, r6, pc}
 8012156:	466a      	mov	r2, sp
 8012158:	f000 f896 	bl	8012288 <_fstat_r>
 801215c:	2800      	cmp	r0, #0
 801215e:	dbec      	blt.n	801213a <__swhatbuf_r+0x12>
 8012160:	9901      	ldr	r1, [sp, #4]
 8012162:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012166:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801216a:	4259      	negs	r1, r3
 801216c:	4159      	adcs	r1, r3
 801216e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012172:	e7eb      	b.n	801214c <__swhatbuf_r+0x24>

08012174 <__smakebuf_r>:
 8012174:	898b      	ldrh	r3, [r1, #12]
 8012176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012178:	079d      	lsls	r5, r3, #30
 801217a:	4606      	mov	r6, r0
 801217c:	460c      	mov	r4, r1
 801217e:	d507      	bpl.n	8012190 <__smakebuf_r+0x1c>
 8012180:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	6123      	str	r3, [r4, #16]
 8012188:	2301      	movs	r3, #1
 801218a:	6163      	str	r3, [r4, #20]
 801218c:	b003      	add	sp, #12
 801218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012190:	ab01      	add	r3, sp, #4
 8012192:	466a      	mov	r2, sp
 8012194:	f7ff ffc8 	bl	8012128 <__swhatbuf_r>
 8012198:	9f00      	ldr	r7, [sp, #0]
 801219a:	4605      	mov	r5, r0
 801219c:	4639      	mov	r1, r7
 801219e:	4630      	mov	r0, r6
 80121a0:	f7ff f876 	bl	8011290 <_malloc_r>
 80121a4:	b948      	cbnz	r0, 80121ba <__smakebuf_r+0x46>
 80121a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121aa:	059a      	lsls	r2, r3, #22
 80121ac:	d4ee      	bmi.n	801218c <__smakebuf_r+0x18>
 80121ae:	f023 0303 	bic.w	r3, r3, #3
 80121b2:	f043 0302 	orr.w	r3, r3, #2
 80121b6:	81a3      	strh	r3, [r4, #12]
 80121b8:	e7e2      	b.n	8012180 <__smakebuf_r+0xc>
 80121ba:	89a3      	ldrh	r3, [r4, #12]
 80121bc:	6020      	str	r0, [r4, #0]
 80121be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	9b01      	ldr	r3, [sp, #4]
 80121c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80121ca:	b15b      	cbz	r3, 80121e4 <__smakebuf_r+0x70>
 80121cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121d0:	4630      	mov	r0, r6
 80121d2:	f000 f86b 	bl	80122ac <_isatty_r>
 80121d6:	b128      	cbz	r0, 80121e4 <__smakebuf_r+0x70>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	f023 0303 	bic.w	r3, r3, #3
 80121de:	f043 0301 	orr.w	r3, r3, #1
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	431d      	orrs	r5, r3
 80121e8:	81a5      	strh	r5, [r4, #12]
 80121ea:	e7cf      	b.n	801218c <__smakebuf_r+0x18>

080121ec <_putc_r>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	460d      	mov	r5, r1
 80121f0:	4614      	mov	r4, r2
 80121f2:	4606      	mov	r6, r0
 80121f4:	b118      	cbz	r0, 80121fe <_putc_r+0x12>
 80121f6:	6a03      	ldr	r3, [r0, #32]
 80121f8:	b90b      	cbnz	r3, 80121fe <_putc_r+0x12>
 80121fa:	f7fd ff2d 	bl	8010058 <__sinit>
 80121fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012200:	07d8      	lsls	r0, r3, #31
 8012202:	d405      	bmi.n	8012210 <_putc_r+0x24>
 8012204:	89a3      	ldrh	r3, [r4, #12]
 8012206:	0599      	lsls	r1, r3, #22
 8012208:	d402      	bmi.n	8012210 <_putc_r+0x24>
 801220a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801220c:	f7fe f959 	bl	80104c2 <__retarget_lock_acquire_recursive>
 8012210:	68a3      	ldr	r3, [r4, #8]
 8012212:	3b01      	subs	r3, #1
 8012214:	2b00      	cmp	r3, #0
 8012216:	60a3      	str	r3, [r4, #8]
 8012218:	da05      	bge.n	8012226 <_putc_r+0x3a>
 801221a:	69a2      	ldr	r2, [r4, #24]
 801221c:	4293      	cmp	r3, r2
 801221e:	db12      	blt.n	8012246 <_putc_r+0x5a>
 8012220:	b2eb      	uxtb	r3, r5
 8012222:	2b0a      	cmp	r3, #10
 8012224:	d00f      	beq.n	8012246 <_putc_r+0x5a>
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	701d      	strb	r5, [r3, #0]
 801222e:	b2ed      	uxtb	r5, r5
 8012230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012232:	07da      	lsls	r2, r3, #31
 8012234:	d405      	bmi.n	8012242 <_putc_r+0x56>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	059b      	lsls	r3, r3, #22
 801223a:	d402      	bmi.n	8012242 <_putc_r+0x56>
 801223c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801223e:	f7fe f941 	bl	80104c4 <__retarget_lock_release_recursive>
 8012242:	4628      	mov	r0, r5
 8012244:	bd70      	pop	{r4, r5, r6, pc}
 8012246:	4629      	mov	r1, r5
 8012248:	4622      	mov	r2, r4
 801224a:	4630      	mov	r0, r6
 801224c:	f7fe f817 	bl	801027e <__swbuf_r>
 8012250:	4605      	mov	r5, r0
 8012252:	e7ed      	b.n	8012230 <_putc_r+0x44>

08012254 <memmove>:
 8012254:	4288      	cmp	r0, r1
 8012256:	b510      	push	{r4, lr}
 8012258:	eb01 0402 	add.w	r4, r1, r2
 801225c:	d902      	bls.n	8012264 <memmove+0x10>
 801225e:	4284      	cmp	r4, r0
 8012260:	4623      	mov	r3, r4
 8012262:	d807      	bhi.n	8012274 <memmove+0x20>
 8012264:	1e43      	subs	r3, r0, #1
 8012266:	42a1      	cmp	r1, r4
 8012268:	d008      	beq.n	801227c <memmove+0x28>
 801226a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801226e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012272:	e7f8      	b.n	8012266 <memmove+0x12>
 8012274:	4402      	add	r2, r0
 8012276:	4601      	mov	r1, r0
 8012278:	428a      	cmp	r2, r1
 801227a:	d100      	bne.n	801227e <memmove+0x2a>
 801227c:	bd10      	pop	{r4, pc}
 801227e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012286:	e7f7      	b.n	8012278 <memmove+0x24>

08012288 <_fstat_r>:
 8012288:	b538      	push	{r3, r4, r5, lr}
 801228a:	4d07      	ldr	r5, [pc, #28]	@ (80122a8 <_fstat_r+0x20>)
 801228c:	2300      	movs	r3, #0
 801228e:	4604      	mov	r4, r0
 8012290:	4608      	mov	r0, r1
 8012292:	4611      	mov	r1, r2
 8012294:	602b      	str	r3, [r5, #0]
 8012296:	f7f3 f9cf 	bl	8005638 <_fstat>
 801229a:	1c43      	adds	r3, r0, #1
 801229c:	d102      	bne.n	80122a4 <_fstat_r+0x1c>
 801229e:	682b      	ldr	r3, [r5, #0]
 80122a0:	b103      	cbz	r3, 80122a4 <_fstat_r+0x1c>
 80122a2:	6023      	str	r3, [r4, #0]
 80122a4:	bd38      	pop	{r3, r4, r5, pc}
 80122a6:	bf00      	nop
 80122a8:	20040ce0 	.word	0x20040ce0

080122ac <_isatty_r>:
 80122ac:	b538      	push	{r3, r4, r5, lr}
 80122ae:	4d06      	ldr	r5, [pc, #24]	@ (80122c8 <_isatty_r+0x1c>)
 80122b0:	2300      	movs	r3, #0
 80122b2:	4604      	mov	r4, r0
 80122b4:	4608      	mov	r0, r1
 80122b6:	602b      	str	r3, [r5, #0]
 80122b8:	f7f3 f9ce 	bl	8005658 <_isatty>
 80122bc:	1c43      	adds	r3, r0, #1
 80122be:	d102      	bne.n	80122c6 <_isatty_r+0x1a>
 80122c0:	682b      	ldr	r3, [r5, #0]
 80122c2:	b103      	cbz	r3, 80122c6 <_isatty_r+0x1a>
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	20040ce0 	.word	0x20040ce0

080122cc <_sbrk_r>:
 80122cc:	b538      	push	{r3, r4, r5, lr}
 80122ce:	4d06      	ldr	r5, [pc, #24]	@ (80122e8 <_sbrk_r+0x1c>)
 80122d0:	2300      	movs	r3, #0
 80122d2:	4604      	mov	r4, r0
 80122d4:	4608      	mov	r0, r1
 80122d6:	602b      	str	r3, [r5, #0]
 80122d8:	f7f3 f9d6 	bl	8005688 <_sbrk>
 80122dc:	1c43      	adds	r3, r0, #1
 80122de:	d102      	bne.n	80122e6 <_sbrk_r+0x1a>
 80122e0:	682b      	ldr	r3, [r5, #0]
 80122e2:	b103      	cbz	r3, 80122e6 <_sbrk_r+0x1a>
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	bd38      	pop	{r3, r4, r5, pc}
 80122e8:	20040ce0 	.word	0x20040ce0

080122ec <__assert_func>:
 80122ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122ee:	4614      	mov	r4, r2
 80122f0:	461a      	mov	r2, r3
 80122f2:	4b09      	ldr	r3, [pc, #36]	@ (8012318 <__assert_func+0x2c>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	4605      	mov	r5, r0
 80122f8:	68d8      	ldr	r0, [r3, #12]
 80122fa:	b14c      	cbz	r4, 8012310 <__assert_func+0x24>
 80122fc:	4b07      	ldr	r3, [pc, #28]	@ (801231c <__assert_func+0x30>)
 80122fe:	9100      	str	r1, [sp, #0]
 8012300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012304:	4906      	ldr	r1, [pc, #24]	@ (8012320 <__assert_func+0x34>)
 8012306:	462b      	mov	r3, r5
 8012308:	f000 f870 	bl	80123ec <fiprintf>
 801230c:	f000 f880 	bl	8012410 <abort>
 8012310:	4b04      	ldr	r3, [pc, #16]	@ (8012324 <__assert_func+0x38>)
 8012312:	461c      	mov	r4, r3
 8012314:	e7f3      	b.n	80122fe <__assert_func+0x12>
 8012316:	bf00      	nop
 8012318:	2004030c 	.word	0x2004030c
 801231c:	0801ec59 	.word	0x0801ec59
 8012320:	0801ec66 	.word	0x0801ec66
 8012324:	0801ec94 	.word	0x0801ec94

08012328 <_calloc_r>:
 8012328:	b570      	push	{r4, r5, r6, lr}
 801232a:	fba1 5402 	umull	r5, r4, r1, r2
 801232e:	b934      	cbnz	r4, 801233e <_calloc_r+0x16>
 8012330:	4629      	mov	r1, r5
 8012332:	f7fe ffad 	bl	8011290 <_malloc_r>
 8012336:	4606      	mov	r6, r0
 8012338:	b928      	cbnz	r0, 8012346 <_calloc_r+0x1e>
 801233a:	4630      	mov	r0, r6
 801233c:	bd70      	pop	{r4, r5, r6, pc}
 801233e:	220c      	movs	r2, #12
 8012340:	6002      	str	r2, [r0, #0]
 8012342:	2600      	movs	r6, #0
 8012344:	e7f9      	b.n	801233a <_calloc_r+0x12>
 8012346:	462a      	mov	r2, r5
 8012348:	4621      	mov	r1, r4
 801234a:	f7fe f82d 	bl	80103a8 <memset>
 801234e:	e7f4      	b.n	801233a <_calloc_r+0x12>

08012350 <__ascii_mbtowc>:
 8012350:	b082      	sub	sp, #8
 8012352:	b901      	cbnz	r1, 8012356 <__ascii_mbtowc+0x6>
 8012354:	a901      	add	r1, sp, #4
 8012356:	b142      	cbz	r2, 801236a <__ascii_mbtowc+0x1a>
 8012358:	b14b      	cbz	r3, 801236e <__ascii_mbtowc+0x1e>
 801235a:	7813      	ldrb	r3, [r2, #0]
 801235c:	600b      	str	r3, [r1, #0]
 801235e:	7812      	ldrb	r2, [r2, #0]
 8012360:	1e10      	subs	r0, r2, #0
 8012362:	bf18      	it	ne
 8012364:	2001      	movne	r0, #1
 8012366:	b002      	add	sp, #8
 8012368:	4770      	bx	lr
 801236a:	4610      	mov	r0, r2
 801236c:	e7fb      	b.n	8012366 <__ascii_mbtowc+0x16>
 801236e:	f06f 0001 	mvn.w	r0, #1
 8012372:	e7f8      	b.n	8012366 <__ascii_mbtowc+0x16>

08012374 <_realloc_r>:
 8012374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	4607      	mov	r7, r0
 801237a:	4614      	mov	r4, r2
 801237c:	460d      	mov	r5, r1
 801237e:	b921      	cbnz	r1, 801238a <_realloc_r+0x16>
 8012380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012384:	4611      	mov	r1, r2
 8012386:	f7fe bf83 	b.w	8011290 <_malloc_r>
 801238a:	b92a      	cbnz	r2, 8012398 <_realloc_r+0x24>
 801238c:	f7fe ff0c 	bl	80111a8 <_free_r>
 8012390:	4625      	mov	r5, r4
 8012392:	4628      	mov	r0, r5
 8012394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012398:	f000 f841 	bl	801241e <_malloc_usable_size_r>
 801239c:	4284      	cmp	r4, r0
 801239e:	4606      	mov	r6, r0
 80123a0:	d802      	bhi.n	80123a8 <_realloc_r+0x34>
 80123a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123a6:	d8f4      	bhi.n	8012392 <_realloc_r+0x1e>
 80123a8:	4621      	mov	r1, r4
 80123aa:	4638      	mov	r0, r7
 80123ac:	f7fe ff70 	bl	8011290 <_malloc_r>
 80123b0:	4680      	mov	r8, r0
 80123b2:	b908      	cbnz	r0, 80123b8 <_realloc_r+0x44>
 80123b4:	4645      	mov	r5, r8
 80123b6:	e7ec      	b.n	8012392 <_realloc_r+0x1e>
 80123b8:	42b4      	cmp	r4, r6
 80123ba:	4622      	mov	r2, r4
 80123bc:	4629      	mov	r1, r5
 80123be:	bf28      	it	cs
 80123c0:	4632      	movcs	r2, r6
 80123c2:	f7fe f888 	bl	80104d6 <memcpy>
 80123c6:	4629      	mov	r1, r5
 80123c8:	4638      	mov	r0, r7
 80123ca:	f7fe feed 	bl	80111a8 <_free_r>
 80123ce:	e7f1      	b.n	80123b4 <_realloc_r+0x40>

080123d0 <__ascii_wctomb>:
 80123d0:	4603      	mov	r3, r0
 80123d2:	4608      	mov	r0, r1
 80123d4:	b141      	cbz	r1, 80123e8 <__ascii_wctomb+0x18>
 80123d6:	2aff      	cmp	r2, #255	@ 0xff
 80123d8:	d904      	bls.n	80123e4 <__ascii_wctomb+0x14>
 80123da:	228a      	movs	r2, #138	@ 0x8a
 80123dc:	601a      	str	r2, [r3, #0]
 80123de:	f04f 30ff 	mov.w	r0, #4294967295
 80123e2:	4770      	bx	lr
 80123e4:	700a      	strb	r2, [r1, #0]
 80123e6:	2001      	movs	r0, #1
 80123e8:	4770      	bx	lr
	...

080123ec <fiprintf>:
 80123ec:	b40e      	push	{r1, r2, r3}
 80123ee:	b503      	push	{r0, r1, lr}
 80123f0:	4601      	mov	r1, r0
 80123f2:	ab03      	add	r3, sp, #12
 80123f4:	4805      	ldr	r0, [pc, #20]	@ (801240c <fiprintf+0x20>)
 80123f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80123fa:	6800      	ldr	r0, [r0, #0]
 80123fc:	9301      	str	r3, [sp, #4]
 80123fe:	f7ff fccf 	bl	8011da0 <_vfiprintf_r>
 8012402:	b002      	add	sp, #8
 8012404:	f85d eb04 	ldr.w	lr, [sp], #4
 8012408:	b003      	add	sp, #12
 801240a:	4770      	bx	lr
 801240c:	2004030c 	.word	0x2004030c

08012410 <abort>:
 8012410:	b508      	push	{r3, lr}
 8012412:	2006      	movs	r0, #6
 8012414:	f000 f834 	bl	8012480 <raise>
 8012418:	2001      	movs	r0, #1
 801241a:	f7f3 f8bd 	bl	8005598 <_exit>

0801241e <_malloc_usable_size_r>:
 801241e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012422:	1f18      	subs	r0, r3, #4
 8012424:	2b00      	cmp	r3, #0
 8012426:	bfbc      	itt	lt
 8012428:	580b      	ldrlt	r3, [r1, r0]
 801242a:	18c0      	addlt	r0, r0, r3
 801242c:	4770      	bx	lr

0801242e <_raise_r>:
 801242e:	291f      	cmp	r1, #31
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	4605      	mov	r5, r0
 8012434:	460c      	mov	r4, r1
 8012436:	d904      	bls.n	8012442 <_raise_r+0x14>
 8012438:	2316      	movs	r3, #22
 801243a:	6003      	str	r3, [r0, #0]
 801243c:	f04f 30ff 	mov.w	r0, #4294967295
 8012440:	bd38      	pop	{r3, r4, r5, pc}
 8012442:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012444:	b112      	cbz	r2, 801244c <_raise_r+0x1e>
 8012446:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801244a:	b94b      	cbnz	r3, 8012460 <_raise_r+0x32>
 801244c:	4628      	mov	r0, r5
 801244e:	f000 f831 	bl	80124b4 <_getpid_r>
 8012452:	4622      	mov	r2, r4
 8012454:	4601      	mov	r1, r0
 8012456:	4628      	mov	r0, r5
 8012458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801245c:	f000 b818 	b.w	8012490 <_kill_r>
 8012460:	2b01      	cmp	r3, #1
 8012462:	d00a      	beq.n	801247a <_raise_r+0x4c>
 8012464:	1c59      	adds	r1, r3, #1
 8012466:	d103      	bne.n	8012470 <_raise_r+0x42>
 8012468:	2316      	movs	r3, #22
 801246a:	6003      	str	r3, [r0, #0]
 801246c:	2001      	movs	r0, #1
 801246e:	e7e7      	b.n	8012440 <_raise_r+0x12>
 8012470:	2100      	movs	r1, #0
 8012472:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012476:	4620      	mov	r0, r4
 8012478:	4798      	blx	r3
 801247a:	2000      	movs	r0, #0
 801247c:	e7e0      	b.n	8012440 <_raise_r+0x12>
	...

08012480 <raise>:
 8012480:	4b02      	ldr	r3, [pc, #8]	@ (801248c <raise+0xc>)
 8012482:	4601      	mov	r1, r0
 8012484:	6818      	ldr	r0, [r3, #0]
 8012486:	f7ff bfd2 	b.w	801242e <_raise_r>
 801248a:	bf00      	nop
 801248c:	2004030c 	.word	0x2004030c

08012490 <_kill_r>:
 8012490:	b538      	push	{r3, r4, r5, lr}
 8012492:	4d07      	ldr	r5, [pc, #28]	@ (80124b0 <_kill_r+0x20>)
 8012494:	2300      	movs	r3, #0
 8012496:	4604      	mov	r4, r0
 8012498:	4608      	mov	r0, r1
 801249a:	4611      	mov	r1, r2
 801249c:	602b      	str	r3, [r5, #0]
 801249e:	f7f3 f86b 	bl	8005578 <_kill>
 80124a2:	1c43      	adds	r3, r0, #1
 80124a4:	d102      	bne.n	80124ac <_kill_r+0x1c>
 80124a6:	682b      	ldr	r3, [r5, #0]
 80124a8:	b103      	cbz	r3, 80124ac <_kill_r+0x1c>
 80124aa:	6023      	str	r3, [r4, #0]
 80124ac:	bd38      	pop	{r3, r4, r5, pc}
 80124ae:	bf00      	nop
 80124b0:	20040ce0 	.word	0x20040ce0

080124b4 <_getpid_r>:
 80124b4:	f7f3 b858 	b.w	8005568 <_getpid>

080124b8 <_init>:
 80124b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ba:	bf00      	nop
 80124bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124be:	bc08      	pop	{r3}
 80124c0:	469e      	mov	lr, r3
 80124c2:	4770      	bx	lr

080124c4 <_fini>:
 80124c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c6:	bf00      	nop
 80124c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ca:	bc08      	pop	{r3}
 80124cc:	469e      	mov	lr, r3
 80124ce:	4770      	bx	lr
